
freeRTOS_tasks1_F302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080056d4  080056d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056d4  080056d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000010  080056ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ec4  080056ec  00020ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f63  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301f  00000000  00000000  00036fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00039fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038a9  00000000  00000000  0003c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192f7  00000000  00000000  00040049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af2bc  00000000  00000000  00059340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001085fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  0010864c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005640 	.word	0x08005640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005640 	.word	0x08005640

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	memset(buffer.tx_buffer, 65, sizeof(buffer.tx_buffer));
 80001d6:	220a      	movs	r2, #10
 80001d8:	2141      	movs	r1, #65	; 0x41
 80001da:	4823      	ldr	r0, [pc, #140]	; (8000268 <main+0x98>)
 80001dc:	f005 fa28 	bl	8005630 <memset>
	memset(buffer.rx_buffer, 66, sizeof(buffer.rx_buffer));
 80001e0:	220a      	movs	r2, #10
 80001e2:	2142      	movs	r1, #66	; 0x42
 80001e4:	4821      	ldr	r0, [pc, #132]	; (800026c <main+0x9c>)
 80001e6:	f005 fa23 	bl	8005630 <memset>
	buffer.rx = 0;
 80001ea:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <main+0x98>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	765a      	strb	r2, [r3, #25]
	buffer.tx = 0;
 80001f0:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <main+0x98>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	761a      	strb	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fb6b 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f845 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f90b 	bl	8000418 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000202:	f000 f899 	bl	8000338 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000206:	f000 f8d7 	bl	80003b8 <MX_USART1_UART_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(10, sizeof(char));
 800020a:	2200      	movs	r2, #0
 800020c:	2101      	movs	r1, #1
 800020e:	200a      	movs	r0, #10
 8000210:	f003 fc66 	bl	8003ae0 <xQueueGenericCreate>
 8000214:	6178      	str	r0, [r7, #20]
  buffer.queueh = myQueue1;
 8000216:	4a14      	ldr	r2, [pc, #80]	; (8000268 <main+0x98>)
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	6153      	str	r3, [r2, #20]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <main+0xa0>)
 800021e:	463c      	mov	r4, r7
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	682b      	ldr	r3, [r5, #0]
 8000228:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800022a:	463b      	mov	r3, r7
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fafe 	bl	8003830 <osThreadCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <main+0xa4>)
 8000238:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //TaskHandle_t sendUSART1_handle;
  xTaskCreate(sendUSART1, "send data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 800023a:	2300      	movs	r3, #0
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2305      	movs	r3, #5
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x98>)
 8000244:	2240      	movs	r2, #64	; 0x40
 8000246:	490c      	ldr	r1, [pc, #48]	; (8000278 <main+0xa8>)
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <main+0xac>)
 800024a:	f003 ff91 	bl	8004170 <xTaskCreate>
  //TaskHandle_t receiveUSART1_handle;
  xTaskCreate(receiveUSART1, "receive data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 800024e:	2300      	movs	r3, #0
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2305      	movs	r3, #5
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0x98>)
 8000258:	2240      	movs	r2, #64	; 0x40
 800025a:	4909      	ldr	r1, [pc, #36]	; (8000280 <main+0xb0>)
 800025c:	4809      	ldr	r0, [pc, #36]	; (8000284 <main+0xb4>)
 800025e:	f003 ff87 	bl	8004170 <xTaskCreate>
  //xTaskCreate(task_GPIOC12, "task_GPIOC12", 64, NULL, 3, NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000262:	f003 fade 	bl	8003822 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x96>
 8000268:	2000010c 	.word	0x2000010c
 800026c:	20000116 	.word	0x20000116
 8000270:	08005680 	.word	0x08005680
 8000274:	20000108 	.word	0x20000108
 8000278:	08005664 	.word	0x08005664
 800027c:	080004ed 	.word	0x080004ed
 8000280:	08005670 	.word	0x08005670
 8000284:	08000541 	.word	0x08000541

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09c      	sub	sp, #112	; 0x70
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f005 f9ca 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2234      	movs	r2, #52	; 0x34
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f005 f9bc 	bl	8005630 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	2302      	movs	r3, #2
 80002ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	2310      	movs	r3, #16
 80002c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fedc 	bl	8001094 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002e2:	f000 f98c 	bl	80005fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 ff04 	bl	8002110 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800030e:	f000 f976 	bl	80005fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000312:	2321      	movs	r3, #33	; 0x21
 8000314:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	4618      	mov	r0, r3
 8000322:	f002 f95d 	bl	80025e0 <HAL_RCCEx_PeriphCLKConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800032c:	f000 f967 	bl	80005fe <Error_Handler>
  }
}
 8000330:	bf00      	nop
 8000332:	3770      	adds	r7, #112	; 0x70
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_I2C1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <MX_I2C1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_I2C1_Init+0x74>)
 8000344:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <MX_I2C1_Init+0x7c>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_I2C1_Init+0x74>)
 8000350:	2201      	movs	r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <MX_I2C1_Init+0x74>)
 8000374:	f000 fd68 	bl	8000e48 <HAL_I2C_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037e:	f000 f93e 	bl	80005fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000382:	2100      	movs	r1, #0
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <MX_I2C1_Init+0x74>)
 8000386:	f000 fdee 	bl	8000f66 <HAL_I2CEx_ConfigAnalogFilter>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000390:	f000 f935 	bl	80005fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000394:	2100      	movs	r1, #0
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_I2C1_Init+0x74>)
 8000398:	f000 fe30 	bl	8000ffc <HAL_I2CEx_ConfigDigitalFilter>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f92c 	bl	80005fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000002c 	.word	0x2000002c
 80003b0:	40005400 	.word	0x40005400
 80003b4:	2000090e 	.word	0x2000090e

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <MX_USART1_UART_Init+0x5c>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003fc:	f002 fd0c 	bl	8002e18 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000406:	f000 f8fa 	bl	80005fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000080 	.word	0x20000080
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <MX_GPIO_Init+0xcc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <MX_GPIO_Init+0xcc>)
 800044c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a20      	ldr	r2, [pc, #128]	; (80004e4 <MX_GPIO_Init+0xcc>)
 8000464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_GPIO_Init+0xcc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11
 8000476:	2200      	movs	r2, #0
 8000478:	f641 410c 	movw	r1, #7180	; 0x1c0c
 800047c:	481a      	ldr	r0, [pc, #104]	; (80004e8 <MX_GPIO_Init+0xd0>)
 800047e:	f000 fcb1 	bl	8000de4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC2 PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000482:	f240 430c 	movw	r3, #1036	; 0x40c
 8000486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	4619      	mov	r1, r3
 800049a:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_GPIO_Init+0xd0>)
 800049c:	f000 fb30 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4619      	mov	r1, r3
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <MX_GPIO_Init+0xd0>)
 80004ba:	f000 fb21 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	4619      	mov	r1, r3
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0xd0>)
 80004d8:	f000 fb12 	bl	8000b00 <HAL_GPIO_Init>

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	48000800 	.word	0x48000800

080004ec <sendUSART1>:

/* USER CODE BEGIN 4 */
void sendUSART1( void* buffer_p)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80004f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <sendUSART1+0x4c>)
 80004fa:	f000 fc8b 	bl	8000e14 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60fb      	str	r3, [r7, #12]
	    // Copy the contents of src_buffer to dest_buffer
	    //memcpy(buffer_pp->tx_buffer, buffer_pp->rx_buffer, sizeof(buffer_pp->rx_buffer));
		xQueueReceive(buffer_pp->queueh, &buffer_pp->tx, portMAX_DELAY);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6958      	ldr	r0, [r3, #20]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	3318      	adds	r3, #24
 800050a:	f04f 32ff 	mov.w	r2, #4294967295
 800050e:	4619      	mov	r1, r3
 8000510:	f003 fc3e 	bl	8003d90 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*) &buffer_pp->tx, sizeof(buffer_pp->tx), 100);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f103 0118 	add.w	r1, r3, #24
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	2201      	movs	r2, #1
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <sendUSART1+0x50>)
 8000520:	f002 fcc8 	bl	8002eb4 <HAL_UART_Transmit>
		//xQueueSend(buffer_pp->queueh, &buffer_pp->tx_buffer, 2);
		vTaskDelay(200);
 8000524:	20c8      	movs	r0, #200	; 0xc8
 8000526:	f003 ff51 	bl	80043cc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	4802      	ldr	r0, [pc, #8]	; (8000538 <sendUSART1+0x4c>)
 8000530:	f000 fc70 	bl	8000e14 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000534:	e7de      	b.n	80004f4 <sendUSART1+0x8>
 8000536:	bf00      	nop
 8000538:	48000800 	.word	0x48000800
 800053c:	20000080 	.word	0x20000080

08000540 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data"));
}

void receiveUSART1( void * buffer_p)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <receiveUSART1+0x50>)
 800054e:	f000 fc61 	bl	8000e14 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	60fb      	str	r3, [r7, #12]
		if( HAL_UART_Receive(&huart1, &buffer_pp->rx, 1, 1) == HAL_OK)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	f103 0119 	add.w	r1, r3, #25
 800055c:	2301      	movs	r3, #1
 800055e:	2201      	movs	r2, #1
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <receiveUSART1+0x54>)
 8000562:	f002 fd31 	bl	8002fc8 <HAL_UART_Receive>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d108      	bne.n	800057e <receiveUSART1+0x3e>
		{
			xQueueSend(buffer_pp->queueh, &buffer_pp->rx, 1);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	6958      	ldr	r0, [r3, #20]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f103 0119 	add.w	r1, r3, #25
 8000576:	2300      	movs	r3, #0
 8000578:	2201      	movs	r2, #1
 800057a:	f003 fb0b 	bl	8003b94 <xQueueGenericSend>
		}
		//osDelay(1);
		vTaskDelay(5);
 800057e:	2005      	movs	r0, #5
 8000580:	f003 ff24 	bl	80043cc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000588:	4801      	ldr	r0, [pc, #4]	; (8000590 <receiveUSART1+0x50>)
 800058a:	f000 fc43 	bl	8000e14 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800058e:	e7db      	b.n	8000548 <receiveUSART1+0x8>
 8000590:	48000800 	.word	0x48000800
 8000594:	20000080 	.word	0x20000080

08000598 <vApplicationIdleHook>:
	}
	 vTaskDelete(xTaskGetHandle("receive data"));
}

void vApplicationIdleHook( void )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <vApplicationIdleHook+0x14>)
 80005a2:	f000 fc37 	bl	8000e14 <HAL_GPIO_TogglePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	48000800 	.word	0x48000800

080005b0 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2104      	movs	r1, #4
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <vApplicationTickHook+0x1c>)
 80005ba:	f000 fc13 	bl	8000de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2104      	movs	r1, #4
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <vApplicationTickHook+0x1c>)
 80005c4:	f000 fc0e 	bl	8000de4 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	48000800 	.word	0x48000800

080005d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3);
 80005d8:	2003      	movs	r0, #3
 80005da:	f003 f950 	bl	800387e <osDelay>
 80005de:	e7fb      	b.n	80005d8 <StartDefaultTask+0x8>

080005e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f0:	d101      	bne.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f2:	f000 f983 	bl	80008fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000602:	b672      	cpsid	i
}
 8000604:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000606:	e7fe      	b.n	8000606 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_MspInit+0x4c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <HAL_MspInit+0x4c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_MspInit+0x4c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_MspInit+0x4c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_MspInit+0x4c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_MspInit+0x4c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	210f      	movs	r1, #15
 8000642:	f06f 0001 	mvn.w	r0, #1
 8000646:	f000 fa31 	bl	8000aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_I2C_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d128      	bne.n	80006cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 8000680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000698:	2312      	movs	r3, #18
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a4:	2304      	movs	r3, #4
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_I2C_MspInit+0x84>)
 80006b0:	f000 fa26 	bl	8000b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_I2C_MspInit+0x80>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_UART_MspInit+0x7c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d127      	bne.n	8000752 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_UART_MspInit+0x80>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <HAL_UART_MspInit+0x80>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_UART_MspInit+0x80>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_UART_MspInit+0x80>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <HAL_UART_MspInit+0x80>)
 8000720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_UART_MspInit+0x80>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000732:	2330      	movs	r3, #48	; 0x30
 8000734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000742:	2307      	movs	r3, #7
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <HAL_UART_MspInit+0x84>)
 800074e:	f000 f9d7 	bl	8000b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40013800 	.word	0x40013800
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800

08000768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	201c      	movs	r0, #28
 800077e:	f000 f995 	bl	8000aac <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000782:	201c      	movs	r0, #28
 8000784:	f000 f9ae 	bl	8000ae4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <HAL_InitTick+0xa4>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <HAL_InitTick+0xa4>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	61d3      	str	r3, [r2, #28]
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <HAL_InitTick+0xa4>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a0:	f107 0210 	add.w	r2, r7, #16
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fee6 	bl	800257c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007b0:	f001 fea0 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 80007b4:	4603      	mov	r3, r0
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <HAL_InitTick+0xa8>)
 80007be:	fba2 2303 	umull	r2, r3, r2, r3
 80007c2:	0c9b      	lsrs	r3, r3, #18
 80007c4:	3b01      	subs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0xac>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_InitTick+0xac>)
 80007d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_InitTick+0xac>)
 80007da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007dc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_InitTick+0xac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_InitTick+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <HAL_InitTick+0xac>)
 80007ec:	f002 f88a 	bl	8002904 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d104      	bne.n	8000800 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_InitTick+0xac>)
 80007f8:	f002 f8e6 	bl	80029c8 <HAL_TIM_Base_Start_IT>
 80007fc:	4603      	mov	r3, r0
 80007fe:	e000      	b.n	8000802 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
}
 8000802:	4618      	mov	r0, r3
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	431bde83 	.word	0x431bde83
 8000814:	20000128 	.word	0x20000128

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM2_IRQHandler+0x10>)
 800084a:	f002 f911 	bl	8002a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000128 	.word	0x20000128

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f004 fe8f 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fc8f 	bl	80001d0 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008c0:	080056dc 	.word	0x080056dc
  ldr r2, =_sbss
 80008c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008c8:	20000ec4 	.word	0x20000ec4

080008cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f8d8 	bl	8000a96 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f7ff ff3e 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fe8c 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	20000174 	.word	0x20000174

08000924 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;  
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000174 	.word	0x20000174

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <__NVIC_EnableIRQ+0x38>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ff4c 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abe:	f7ff ff61 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000ac2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	6978      	ldr	r0, [r7, #20]
 8000aca:	f7ff ffb1 	bl	8000a30 <NVIC_EncodePriority>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff80 	bl	80009dc <__NVIC_SetPriority>
}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff54 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e14e      	b.n	8000dae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8140 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f003 0201 	and.w	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 809a 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b52      	ldr	r3, [pc, #328]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a50      	ldr	r2, [pc, #320]	; (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <HAL_GPIO_Init+0x2d4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <HAL_GPIO_Init+0x2d8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1d8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1d4>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf2:	4937      	ldr	r1, [pc, #220]	; (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d24:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4e:	4a24      	ldr	r2, [pc, #144]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f47f aea9 	bne.w	8000b10 <HAL_GPIO_Init+0x10>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43d9      	mvns	r1, r3
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	400b      	ands	r3, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e081      	b.n	8000f5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fbf2 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d107      	bne.n	8000ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	e006      	b.n	8000ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d104      	bne.n	8000ee2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69d9      	ldr	r1, [r3, #28]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1a      	ldr	r2, [r3, #32]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d138      	bne.n	8000fee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e032      	b.n	8000ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2224      	movs	r2, #36	; 0x24
 8000f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fee:	2302      	movs	r3, #2
  }
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b20      	cmp	r3, #32
 8001010:	d139      	bne.n	8001086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800101c:	2302      	movs	r3, #2
 800101e:	e033      	b.n	8001088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	; 0x24
 800102c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800104e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2220      	movs	r2, #32
 8001076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001086:	2302      	movs	r3, #2
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800109a:	af00      	add	r7, sp, #0
 800109c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f001 b823 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 817d 	beq.w	80013ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010d0:	4bbc      	ldr	r3, [pc, #752]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4bb9      	ldr	r3, [pc, #740]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d15c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x10e>
 80010e8:	4bb6      	ldr	r3, [pc, #728]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d155      	bne.n	80011a2 <HAL_RCC_OscConfig+0x10e>
 80010f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800110a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <HAL_RCC_OscConfig+0x94>
 8001122:	4ba8      	ldr	r3, [pc, #672]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	e015      	b.n	8001154 <HAL_RCC_OscConfig+0xc0>
 8001128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800113c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001140:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001144:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001150:	4b9c      	ldr	r3, [pc, #624]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001158:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800115c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001160:	fa92 f2a2 	rbit	r2, r2
 8001164:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001168:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 811f 	beq.w	80013c8 <HAL_RCC_OscConfig+0x334>
 800118a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 8116 	bne.w	80013c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	f000 bfaf 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12e>
 80011b4:	4b83      	ldr	r3, [pc, #524]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a82      	ldr	r2, [pc, #520]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e036      	b.n	8001230 <HAL_RCC_OscConfig+0x19c>
 80011c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x158>
 80011d2:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7b      	ldr	r2, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a78      	ldr	r2, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80011e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e021      	b.n	8001230 <HAL_RCC_OscConfig+0x19c>
 80011ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x184>
 80011fe:	4b71      	ldr	r3, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a70      	ldr	r2, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6d      	ldr	r2, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0x19c>
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001230:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	f023 020f 	bic.w	r2, r3, #15
 8001238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	495f      	ldr	r1, [pc, #380]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001246:	4313      	orrs	r3, r2
 8001248:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d059      	beq.n	800130e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fb63 	bl	8000924 <HAL_GetTick>
 800125e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fb5e 	bl	8000924 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d902      	bls.n	800127a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	f000 bf43 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800128e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0x218>
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x244>
 80012ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012e4:	fa92 f2a2 	rbit	r2, r2
 80012e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012f0:	fab2 f282 	clz	r2, r2
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	f042 0220 	orr.w	r2, r2, #32
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f002 021f 	and.w	r2, r2, #31
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ab      	beq.n	8001264 <HAL_RCC_OscConfig+0x1d0>
 800130c:	e05d      	b.n	80013ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fb09 	bl	8000924 <HAL_GetTick>
 8001312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb04 	bl	8000924 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	; 0x64
 8001326:	d902      	bls.n	800132e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	f000 bee9 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 800132e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001332:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001342:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	095b      	lsrs	r3, r3, #5
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <HAL_RCC_OscConfig+0x2cc>
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x2f8>
 8001360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001364:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001378:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800137c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001390:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001394:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001398:	fa92 f2a2 	rbit	r2, r2
 800139c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013a4:	fab2 f282 	clz	r2, r2
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f042 0220 	orr.w	r2, r2, #32
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f002 021f 	and.w	r2, r2, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ab      	bne.n	8001318 <HAL_RCC_OscConfig+0x284>
 80013c0:	e003      	b.n	80013ca <HAL_RCC_OscConfig+0x336>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 817d 	beq.w	80016da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013e0:	4ba6      	ldr	r3, [pc, #664]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ec:	4ba3      	ldr	r3, [pc, #652]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d172      	bne.n	80014de <HAL_RCC_OscConfig+0x44a>
 80013f8:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d16c      	bne.n	80014de <HAL_RCC_OscConfig+0x44a>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001416:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0x3a0>
 800142e:	4b93      	ldr	r3, [pc, #588]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	e013      	b.n	800145c <HAL_RCC_OscConfig+0x3c8>
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800144c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2202      	movs	r2, #2
 800145e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001462:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001466:	fa92 f2a2 	rbit	r2, r2
 800146a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800146e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001472:	fab2 f282 	clz	r2, r2
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f002 021f 	and.w	r2, r2, #31
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_RCC_OscConfig+0x410>
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f000 be2e 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b75      	ldr	r3, [pc, #468]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	21f8      	movs	r1, #248	; 0xf8
 80014ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014c2:	fa91 f1a1 	rbit	r1, r1
 80014c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014ce:	fab1 f181 	clz	r1, r1
 80014d2:	b2c9      	uxtb	r1, r1
 80014d4:	408b      	lsls	r3, r1
 80014d6:	4969      	ldr	r1, [pc, #420]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014dc:	e0fd      	b.n	80016da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8088 	beq.w	8001600 <HAL_RCC_OscConfig+0x56c>
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001502:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	461a      	mov	r2, r3
 8001518:	2301      	movs	r3, #1
 800151a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa02 	bl	8000924 <HAL_GetTick>
 8001520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff f9fd 	bl	8000924 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d902      	bls.n	800153c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	f000 bde2 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800154e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x4d8>
 8001566:	4b45      	ldr	r3, [pc, #276]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e013      	b.n	8001594 <HAL_RCC_OscConfig+0x500>
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001584:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001590:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2202      	movs	r2, #2
 8001596:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800159a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015aa:	fab2 f282 	clz	r2, r2
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f002 021f 	and.w	r2, r2, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0af      	beq.n	8001526 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	21f8      	movs	r1, #248	; 0xf8
 80015dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015e4:	fa91 f1a1 	rbit	r1, r1
 80015e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015f0:	fab1 f181 	clz	r1, r1
 80015f4:	b2c9      	uxtb	r1, r1
 80015f6:	408b      	lsls	r3, r1
 80015f8:	4920      	ldr	r1, [pc, #128]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
 80015fe:	e06c      	b.n	80016da <HAL_RCC_OscConfig+0x646>
 8001600:	2301      	movs	r3, #1
 8001602:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001612:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff f97a 	bl	8000924 <HAL_GetTick>
 8001630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff f975 	bl	8000924 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d902      	bls.n	800164c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f000 bd5a 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800165e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d104      	bne.n	8001680 <HAL_RCC_OscConfig+0x5ec>
 8001676:	4b01      	ldr	r3, [pc, #4]	; (800167c <HAL_RCC_OscConfig+0x5e8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	e015      	b.n	80016a8 <HAL_RCC_OscConfig+0x614>
 800167c:	40021000 	.word	0x40021000
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016a4:	4bc8      	ldr	r3, [pc, #800]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2202      	movs	r2, #2
 80016aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016b2:	fa92 f2a2 	rbit	r2, r2
 80016b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016be:	fab2 f282 	clz	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f042 0220 	orr.w	r2, r2, #32
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f002 021f 	and.w	r2, r2, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ad      	bne.n	8001636 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8110 	beq.w	8001910 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d079      	beq.n	80017f4 <HAL_RCC_OscConfig+0x760>
 8001700:	2301      	movs	r3, #1
 8001702:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	4bab      	ldr	r3, [pc, #684]	; (80019cc <HAL_RCC_OscConfig+0x938>)
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff f8fb 	bl	8000924 <HAL_GetTick>
 800172e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff f8f6 	bl	8000924 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d902      	bls.n	800174a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	f000 bcdb 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017b0:	2102      	movs	r1, #2
 80017b2:	6019      	str	r1, [r3, #0]
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f1a3 	rbit	r1, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017ca:	6019      	str	r1, [r3, #0]
  return result;
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0a0      	beq.n	8001734 <HAL_RCC_OscConfig+0x6a0>
 80017f2:	e08d      	b.n	8001910 <HAL_RCC_OscConfig+0x87c>
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001816:	601a      	str	r2, [r3, #0]
  return result;
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001820:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x938>)
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	461a      	mov	r2, r3
 8001832:	2300      	movs	r3, #0
 8001834:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff f875 	bl	8000924 <HAL_GetTick>
 800183a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff f870 	bl	8000924 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d902      	bls.n	8001856 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	f000 bc55 	b.w	8002100 <HAL_RCC_OscConfig+0x106c>
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018a6:	2202      	movs	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 80018c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018ce:	2102      	movs	r1, #2
 80018d0:	6019      	str	r1, [r3, #0]
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f1a3 	rbit	r1, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018e8:	6019      	str	r1, [r3, #0]
  return result;
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d197      	bne.n	8001840 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 81a1 	beq.w	8001c68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	61d3      	str	r3, [r2, #28]
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800195e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_RCC_OscConfig+0x93c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_RCC_OscConfig+0x93c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <HAL_RCC_OscConfig+0x93c>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7fe ffd1 	bl	8000924 <HAL_GetTick>
 8001982:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	e009      	b.n	800199c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7fe ffcc 	bl	8000924 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	; 0x64
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e3b1      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x93c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ef      	beq.n	8001988 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10d      	bne.n	80019d4 <HAL_RCC_OscConfig+0x940>
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a02      	ldr	r2, [pc, #8]	; (80019c8 <HAL_RCC_OscConfig+0x934>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e03c      	b.n	8001a40 <HAL_RCC_OscConfig+0x9ac>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	10908120 	.word	0x10908120
 80019d0:	40007000 	.word	0x40007000
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x96a>
 80019e4:	4bc1      	ldr	r3, [pc, #772]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4ac0      	ldr	r2, [pc, #768]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4bbe      	ldr	r3, [pc, #760]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4abd      	ldr	r2, [pc, #756]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e020      	b.n	8001a40 <HAL_RCC_OscConfig+0x9ac>
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x994>
 8001a0e:	4bb7      	ldr	r3, [pc, #732]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4ab6      	ldr	r2, [pc, #728]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4bb4      	ldr	r3, [pc, #720]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4ab3      	ldr	r2, [pc, #716]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x9ac>
 8001a28:	4bb0      	ldr	r3, [pc, #704]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4aaf      	ldr	r2, [pc, #700]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4bad      	ldr	r3, [pc, #692]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4aac      	ldr	r2, [pc, #688]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	f023 0304 	bic.w	r3, r3, #4
 8001a3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8081 	beq.w	8001b54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7fe ff67 	bl	8000924 <HAL_GetTick>
 8001a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe ff62 	bl	8000924 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e345      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ac4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xa4c>
 8001ada:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0xa74>
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b10:	2102      	movs	r1, #2
 8001b12:	6011      	str	r1, [r2, #0]
 8001b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	fa92 f1a2 	rbit	r1, r2
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b2a:	6011      	str	r1, [r2, #0]
  return result;
 8001b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b30:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d084      	beq.n	8001a5c <HAL_RCC_OscConfig+0x9c8>
 8001b52:	e07f      	b.n	8001c54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7fe fee6 	bl	8000924 <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7fe fee1 	bl	8000924 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e2c4      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bbc:	601a      	str	r2, [r3, #0]
  return result;
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0xb4e>
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	e013      	b.n	8001c0a <HAL_RCC_OscConfig+0xb76>
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bea:	2202      	movs	r2, #2
 8001bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c12:	2102      	movs	r1, #2
 8001c14:	6011      	str	r1, [r2, #0]
 8001c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	fa92 f1a2 	rbit	r1, r2
 8001c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c2c:	6011      	str	r1, [r2, #0]
  return result;
 8001c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d184      	bne.n	8001b5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8242 	beq.w	80020fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_RCC_OscConfig+0xc58>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	f000 8213 	beq.w	80020ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f040 8162 	bne.w	8001f5e <HAL_RCC_OscConfig+0xeca>
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ca2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cbe:	601a      	str	r2, [r3, #0]
  return result;
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cc8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fe20 	bl	8000924 <HAL_GetTick>
 8001ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCC_OscConfig+0xc70>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe fe18 	bl	8000924 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1fd      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d28:	601a      	str	r2, [r3, #0]
  return result;
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0xcba>
 8001d48:	4bb0      	ldr	r3, [pc, #704]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e027      	b.n	8001d9e <HAL_RCC_OscConfig+0xd0a>
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	4b9c      	ldr	r3, [pc, #624]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001da6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001daa:	6011      	str	r1, [r2, #0]
 8001dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	fa92 f1a2 	rbit	r1, r2
 8001dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dc2:	6011      	str	r1, [r2, #0]
  return result;
 8001dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d182      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	497f      	ldr	r1, [pc, #508]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e36:	601a      	str	r2, [r3, #0]
  return result;
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2301      	movs	r3, #1
 8001e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fd64 	bl	8000924 <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fd5f 	bl	8000924 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e144      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ea4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xe2c>
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e027      	b.n	8001f10 <HAL_RCC_OscConfig+0xe7c>
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f34:	6011      	str	r1, [r2, #0]
  return result;
 8001f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d082      	beq.n	8001e62 <HAL_RCC_OscConfig+0xdce>
 8001f5c:	e0cf      	b.n	80020fe <HAL_RCC_OscConfig+0x106a>
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f82:	601a      	str	r2, [r3, #0]
  return result;
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fcbe 	bl	8000924 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe fcb9 	bl	8000924 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e09e      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fe6:	601a      	str	r2, [r3, #0]
  return result;
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <HAL_RCC_OscConfig+0xf7c>
 8002006:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCC_OscConfig+0xf78>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e029      	b.n	8002060 <HAL_RCC_OscConfig+0xfcc>
 800200c:	40021000 	.word	0x40021000
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800203e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_OscConfig+0x1078>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002064:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002068:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800206c:	6011      	str	r1, [r2, #0]
 800206e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002072:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	fa92 f1a2 	rbit	r1, r2
 800207c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002080:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002084:	6011      	str	r1, [r2, #0]
  return result;
 8002086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d180      	bne.n	8001fae <HAL_RCC_OscConfig+0xf1a>
 80020ac:	e027      	b.n	80020fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e01e      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_OscConfig+0x1078>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10b      	bne.n	80020fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09e      	sub	sp, #120	; 0x78
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e162      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b90      	ldr	r3, [pc, #576]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	498b      	ldr	r1, [pc, #556]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e14a      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b82      	ldr	r3, [pc, #520]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	497f      	ldr	r1, [pc, #508]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80dc 	beq.w	800233c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d13c      	bne.n	8002206 <HAL_RCC_ClockConfig+0xf6>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800219a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xa6>
 80021b0:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e00f      	b.n	80021d6 <HAL_RCC_ClockConfig+0xc6>
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	667b      	str	r3, [r7, #100]	; 0x64
 80021c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c8:	663b      	str	r3, [r7, #96]	; 0x60
 80021ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021da:	65ba      	str	r2, [r7, #88]	; 0x58
 80021dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d17b      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0f3      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d13c      	bne.n	8002288 <HAL_RCC_ClockConfig+0x178>
 800220e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800221c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_ClockConfig+0x128>
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e00f      	b.n	8002258 <HAL_RCC_ClockConfig+0x148>
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225c:	63ba      	str	r2, [r7, #56]	; 0x38
 800225e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d13a      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b2      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1a0>
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	e00d      	b.n	80022cc <HAL_RCC_ClockConfig+0x1bc>
 80022b0:	2302      	movs	r3, #2
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	61ba      	str	r2, [r7, #24]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	617a      	str	r2, [r7, #20]
  return result;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e079      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	491a      	ldr	r1, [pc, #104]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fb0a 	bl	8000924 <HAL_GetTick>
 8002310:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fb06 	bl	8000924 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e061      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d214      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4906      	ldr	r1, [pc, #24]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e040      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 800236c:	40022000 	.word	0x40022000
 8002370:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	491a      	ldr	r1, [pc, #104]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4912      	ldr	r1, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023b2:	f000 f829 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023b6:	4601      	mov	r1, r0
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c0:	22f0      	movs	r2, #240	; 0xf0
 80023c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	60fa      	str	r2, [r7, #12]
  return result;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	40d3      	lsrs	r3, r2
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x2ec>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	fa21 f303 	lsr.w	r3, r1, r3
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_RCC_ClockConfig+0x2f0>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x2f4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f9be 	bl	8000768 <HAL_InitTick>
  
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3778      	adds	r7, #120	; 0x78
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	0800569c 	.word	0x0800569c
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x30>
 8002432:	2b08      	cmp	r3, #8
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x36>
 8002436:	e03c      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800243a:	623b      	str	r3, [r7, #32]
      break;
 800243c:	e03c      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002444:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002448:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	607a      	str	r2, [r7, #4]
  return result;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	40d3      	lsrs	r3, r2
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	220f      	movs	r2, #15
 800246c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	60fa      	str	r2, [r7, #12]
  return result;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	40d3      	lsrs	r3, r2
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	fbb2 f2f3 	udiv	r2, r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	e004      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	623b      	str	r3, [r7, #32]
      break;
 80024b0:	e002      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b4:	623b      	str	r3, [r7, #32]
      break;
 80024b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	372c      	adds	r7, #44	; 0x2c
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	007a1200 	.word	0x007a1200
 80024d0:	080056b4 	.word	0x080056b4
 80024d4:	080056c4 	.word	0x080056c4
 80024d8:	003d0900 	.word	0x003d0900

080024dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024fa:	f7ff ffef 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002508:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800250c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	603a      	str	r2, [r7, #0]
  return result;
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	40d3      	lsrs	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080056ac 	.word	0x080056ac

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800253e:	f7ff ffcd 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 8002542:	4601      	mov	r1, r0
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800254c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	fa92 f2a2 	rbit	r2, r2
 8002558:	603a      	str	r2, [r7, #0]
  return result;
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	40d3      	lsrs	r3, r2
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	080056ac 	.word	0x080056ac

0800257c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	220f      	movs	r2, #15
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCC_GetClockConfig+0x60>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40022000 	.word	0x40022000

080025e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b092      	sub	sp, #72	; 0x48
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80d4 	beq.w	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002604:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10e      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	61d3      	str	r3, [r2, #28]
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7fe f96d 	bl	8000924 <HAL_GetTick>
 800264a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe f969 	bl	8000924 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e14b      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8084 	beq.w	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002688:	429a      	cmp	r2, r3
 800268a:	d07c      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	461a      	mov	r2, r3
 80026b6:	2301      	movs	r3, #1
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	2300      	movs	r3, #0
 80026dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d04b      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe f919 	bl	8000924 <HAL_GetTick>
 80026f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe f915 	bl	8000924 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0f5      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800270c:	2302      	movs	r3, #2
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
 8002718:	2302      	movs	r3, #2
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	61fb      	str	r3, [r7, #28]
  return result;
 8002724:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d108      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800273a:	4b01      	ldr	r3, [pc, #4]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	e00d      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	10908100 	.word	0x10908100
 800274c:	2302      	movs	r3, #2
 800274e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2202      	movs	r2, #2
 800275e:	613a      	str	r2, [r7, #16]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	fa92 f2a2 	rbit	r2, r2
 8002766:	60fa      	str	r2, [r7, #12]
  return result;
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f002 021f 	and.w	r2, r2, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0b7      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002786:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	495b      	ldr	r1, [pc, #364]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002794:	4313      	orrs	r3, r2
 8002796:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f023 0203 	bic.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494e      	ldr	r1, [pc, #312]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f023 0210 	bic.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4947      	ldr	r1, [pc, #284]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027f4:	4b42      	ldr	r3, [pc, #264]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	493f      	ldr	r1, [pc, #252]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f023 0220 	bic.w	r2, r3, #32
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	4938      	ldr	r1, [pc, #224]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002820:	4313      	orrs	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4930      	ldr	r1, [pc, #192]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800283e:	4313      	orrs	r3, r2
 8002840:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4929      	ldr	r1, [pc, #164]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4921      	ldr	r1, [pc, #132]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800287a:	4313      	orrs	r3, r2
 800287c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	491a      	ldr	r1, [pc, #104]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002898:	4313      	orrs	r3, r2
 800289a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	4912      	ldr	r1, [pc, #72]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	490b      	ldr	r1, [pc, #44]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3748      	adds	r7, #72	; 0x48
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e049      	b.n	80029aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f841 	bl	80029b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 f9dc 	bl	8002d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d001      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e03b      	b.n	8002a58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_TIM_Base_Start_IT+0x9c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0x4e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0x4e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d115      	bne.n	8002a42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_TIM_Base_Start_IT+0xa4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d015      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x8c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d011      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	e008      	b.n	8002a54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e000      	b.n	8002a56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	00010007 	.word	0x00010007

08002a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0202 	mvn.w	r2, #2
 8002a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f905 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8f7 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f908 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0204 	mvn.w	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8db 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8cd 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8de 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8b1 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8a3 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f8b4 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f887 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f879 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f88a 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fcf6 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8e8 	bl	8002df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f8db 	bl	8002e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f838 	bl	8002cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d10e      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d107      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0220 	mvn.w	r2, #32
 8002c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f89b 	bl	8002ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <TIM_Base_SetConfig+0xcc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0x20>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d108      	bne.n	8002d32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <TIM_Base_SetConfig+0xcc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0x5a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0x5a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <TIM_Base_SetConfig+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x5a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <TIM_Base_SetConfig+0xd4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x5a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <TIM_Base_SetConfig+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <TIM_Base_SetConfig+0xcc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <TIM_Base_SetConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <TIM_Base_SetConfig+0xd0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <TIM_Base_SetConfig+0xd4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <TIM_Base_SetConfig+0xd8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	615a      	str	r2, [r3, #20]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800

08002ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e040      	b.n	8002eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd fc50 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f980 	bl	800315c <UART_SetConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e022      	b.n	8002eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 faaa 	bl	80033c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb31 	bl	800350c <UART_CheckIdleState>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d178      	bne.n	8002fbe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Transmit+0x24>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e071      	b.n	8002fc0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2221      	movs	r2, #33	; 0x21
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eea:	f7fd fd1b 	bl	8000924 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	d108      	bne.n	8002f1c <HAL_UART_Transmit+0x68>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e003      	b.n	8002f24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f24:	e030      	b.n	8002f88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fb93 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e03c      	b.n	8002fc0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e008      	b.n	8002f76 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3301      	adds	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1c8      	bne.n	8002f26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fb5c 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e005      	b.n	8002fc0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
  }
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 80b6 	bne.w	8003150 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Receive+0x28>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ae      	b.n	8003152 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2222      	movs	r2, #34	; 0x22
 8003000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fd fc8b 	bl	8000924 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003028:	d10e      	bne.n	8003048 <HAL_UART_Receive+0x80>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_UART_Receive+0x76>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800303c:	e02d      	b.n	800309a <HAL_UART_Receive+0xd2>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003046:	e028      	b.n	800309a <HAL_UART_Receive+0xd2>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_UART_Receive+0xa4>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_UART_Receive+0x9a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003060:	e01b      	b.n	800309a <HAL_UART_Receive+0xd2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	227f      	movs	r2, #127	; 0x7f
 8003066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800306a:	e016      	b.n	800309a <HAL_UART_Receive+0xd2>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003074:	d10d      	bne.n	8003092 <HAL_UART_Receive+0xca>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Receive+0xc0>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	227f      	movs	r2, #127	; 0x7f
 8003082:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003086:	e008      	b.n	800309a <HAL_UART_Receive+0xd2>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	223f      	movs	r2, #63	; 0x3f
 800308c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003090:	e003      	b.n	800309a <HAL_UART_Receive+0xd2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	d108      	bne.n	80030be <HAL_UART_Receive+0xf6>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d104      	bne.n	80030be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e003      	b.n	80030c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030c6:	e037      	b.n	8003138 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2120      	movs	r1, #32
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fac2 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e033      	b.n	8003152 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	8a7b      	ldrh	r3, [r7, #18]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	3302      	adds	r3, #2
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e00d      	b.n	8003126 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003110:	b29b      	uxth	r3, r3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	8a7b      	ldrh	r3, [r7, #18]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4013      	ands	r3, r2
 800311a:	b2da      	uxtb	r2, r3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1c1      	bne.n	80030c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b8a      	ldr	r3, [pc, #552]	; (80033b0 <UART_SetConfig+0x254>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	430b      	orrs	r3, r1
 8003192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a78      	ldr	r2, [pc, #480]	; (80033b4 <UART_SetConfig+0x258>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d120      	bne.n	800321a <UART_SetConfig+0xbe>
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <UART_SetConfig+0x25c>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d817      	bhi.n	8003214 <UART_SetConfig+0xb8>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x90>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003209 	.word	0x08003209
 80031f4:	0800320f 	.word	0x0800320f
 80031f8:	08003203 	.word	0x08003203
 80031fc:	2300      	movs	r3, #0
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e01d      	b.n	800323e <UART_SetConfig+0xe2>
 8003202:	2302      	movs	r3, #2
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e01a      	b.n	800323e <UART_SetConfig+0xe2>
 8003208:	2304      	movs	r3, #4
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e017      	b.n	800323e <UART_SetConfig+0xe2>
 800320e:	2308      	movs	r3, #8
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e014      	b.n	800323e <UART_SetConfig+0xe2>
 8003214:	2310      	movs	r3, #16
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e011      	b.n	800323e <UART_SetConfig+0xe2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a67      	ldr	r2, [pc, #412]	; (80033bc <UART_SetConfig+0x260>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d102      	bne.n	800322a <UART_SetConfig+0xce>
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e009      	b.n	800323e <UART_SetConfig+0xe2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a64      	ldr	r2, [pc, #400]	; (80033c0 <UART_SetConfig+0x264>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d102      	bne.n	800323a <UART_SetConfig+0xde>
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e001      	b.n	800323e <UART_SetConfig+0xe2>
 800323a:	2310      	movs	r3, #16
 800323c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d15a      	bne.n	80032fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003248:	7ffb      	ldrb	r3, [r7, #31]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d827      	bhi.n	800329e <UART_SetConfig+0x142>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0xf8>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	0800329f 	.word	0x0800329f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800329f 	.word	0x0800329f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff f93c 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 800327c:	61b8      	str	r0, [r7, #24]
        break;
 800327e:	e013      	b.n	80032a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff f95a 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003284:	61b8      	str	r0, [r7, #24]
        break;
 8003286:	e00f      	b.n	80032a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <UART_SetConfig+0x268>)
 800328a:	61bb      	str	r3, [r7, #24]
        break;
 800328c:	e00c      	b.n	80032a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7ff f8bb 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8003292:	61b8      	str	r0, [r7, #24]
        break;
 8003294:	e008      	b.n	80032a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e004      	b.n	80032a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77bb      	strb	r3, [r7, #30]
        break;
 80032a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d074      	beq.n	8003398 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d916      	bls.n	80032f8 <UART_SetConfig+0x19c>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d212      	bcs.n	80032f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f023 030f 	bic.w	r3, r3, #15
 80032da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	89fb      	ldrh	r3, [r7, #14]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	89fa      	ldrh	r2, [r7, #14]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e04f      	b.n	8003398 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	77bb      	strb	r3, [r7, #30]
 80032fc:	e04c      	b.n	8003398 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d828      	bhi.n	8003356 <UART_SetConfig+0x1fa>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x1b0>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff f8e0 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f8fe 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 800333c:	61b8      	str	r0, [r7, #24]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <UART_SetConfig+0x268>)
 8003342:	61bb      	str	r3, [r7, #24]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7ff f85f 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 800334a:	61b8      	str	r0, [r7, #24]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	61bb      	str	r3, [r7, #24]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	77bb      	strb	r3, [r7, #30]
        break;
 800335e:	bf00      	nop
    }

    if (pclk != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d018      	beq.n	8003398 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	085a      	lsrs	r2, r3, #1
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b0f      	cmp	r3, #15
 800337e:	d909      	bls.n	8003394 <UART_SetConfig+0x238>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d205      	bcs.n	8003394 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e001      	b.n	8003398 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	efff69f3 	.word	0xefff69f3
 80033b4:	40013800 	.word	0x40013800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40004400 	.word	0x40004400
 80033c0:	40004800 	.word	0x40004800
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d10a      	bne.n	80034de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	; 0x60
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800351c:	f7fd fa02 	bl	8000924 <HAL_GetTick>
 8003520:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d12e      	bne.n	800358e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f88c 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d021      	beq.n	800358e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
 800356a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800356e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e6      	bne.n	800354a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e062      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d149      	bne.n	8003630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f856 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03c      	beq.n	8003630 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	623b      	str	r3, [r7, #32]
   return(result);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e6      	bne.n	80035b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e011      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3758      	adds	r7, #88	; 0x58
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e049      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d045      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fd f955 	bl	8000924 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e048      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d031      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d110      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f838 	bl	800372a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2208      	movs	r2, #8
 80036be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e029      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d111      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f81e 	bl	800372a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00f      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d0a6      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372a:	b480      	push	{r7}
 800372c:	b095      	sub	sp, #84	; 0x54
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e6      	bne.n	8003732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	61fb      	str	r3, [r7, #28]
   return(result);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379c:	2b01      	cmp	r3, #1
 800379e:	d118      	bne.n	80037d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f023 0310 	bic.w	r3, r3, #16
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	613b      	str	r3, [r7, #16]
   return(result);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e6      	bne.n	80037a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037e6:	bf00      	nop
 80037e8:	3754      	adds	r7, #84	; 0x54
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003804:	2b84      	cmp	r3, #132	; 0x84
 8003806:	d005      	beq.n	8003814 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003808:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	3303      	adds	r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003826:	f000 fe05 	bl	8004434 <vTaskStartScheduler>
  
  return osOK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}

08003830 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	b087      	sub	sp, #28
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685c      	ldr	r4, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003846:	b29e      	uxth	r6, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ffcf 	bl	80037f2 <makeFreeRtosPriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	9200      	str	r2, [sp, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4632      	mov	r2, r6
 8003862:	4629      	mov	r1, r5
 8003864:	4620      	mov	r0, r4
 8003866:	f000 fc83 	bl	8004170 <xTaskCreate>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d001      	beq.n	8003874 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003874:	68fb      	ldr	r3, [r7, #12]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800387e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <osDelay+0x16>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	e000      	b.n	8003896 <osDelay+0x18>
 8003894:	2301      	movs	r3, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fd98 	bl	80043cc <vTaskDelay>
  
  return osOK;
 800389c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 0208 	add.w	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f103 0208 	add.w	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f103 0208 	add.w	r2, r3, #8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d103      	bne.n	8003968 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e00c      	b.n	8003982 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3308      	adds	r3, #8
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e002      	b.n	8003976 <vListInsert+0x2e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d2f6      	bcs.n	8003970 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6852      	ldr	r2, [r2, #4]
 80039da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a3a:	f001 fb0b 	bl	8005054 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d114      	bne.n	8003aba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01a      	beq.n	8003ace <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ff01 	bl	80048a4 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <xQueueGenericReset+0xcc>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	e009      	b.n	8003ace <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3310      	adds	r3, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fef1 	bl	80038a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff feec 	bl	80038a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 faf1 	bl	80050b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	613b      	str	r3, [r7, #16]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e004      	b.n	8003b20 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3348      	adds	r3, #72	; 0x48
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fb77 	bl	8005218 <pvPortMalloc>
 8003b2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3348      	adds	r3, #72	; 0x48
 8003b36:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f805 	bl	8003b54 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e002      	b.n	8003b76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b82:	2101      	movs	r1, #1
 8003b84:	69b8      	ldr	r0, [r7, #24]
 8003b86:	f7ff ff43 	bl	8003a10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08e      	sub	sp, #56	; 0x38
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueGenericSend+0x32>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueGenericSend+0x40>
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueGenericSend+0x44>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueGenericSend+0x46>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xQueueGenericSend+0x60>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSend+0x6e>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericSend+0x72>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericSend+0x74>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	623b      	str	r3, [r7, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c22:	f000 ffe3 	bl	8004bec <xTaskGetSchedulerState>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <xQueueGenericSend+0x9e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <xQueueGenericSend+0xa2>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueGenericSend+0xa4>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61fb      	str	r3, [r7, #28]
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c52:	f001 f9ff 	bl	8005054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <xQueueGenericSend+0xd4>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d129      	bne.n	8003cbc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6e:	f000 f96f 	bl	8003f50 <prvCopyDataToQueue>
 8003c72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe0f 	bl	80048a4 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <xQueueGenericSend+0x1f8>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e00a      	b.n	8003cb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <xQueueGenericSend+0x1f8>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cb4:	f001 f9fe 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e063      	b.n	8003d84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc2:	f001 f9f7 	bl	80050b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e05c      	b.n	8003d84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fe47 	bl	8004968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cde:	f001 f9e9 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce2:	f000 fbef 	bl	80044c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ce6:	f001 f9b5 	bl	8005054 <vPortEnterCritical>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d103      	bne.n	8003d00 <xQueueGenericSend+0x16c>
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSend+0x182>
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d16:	f001 f9cd 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d1a:	1d3a      	adds	r2, r7, #4
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fe36 	bl	8004994 <xTaskCheckForTimeOut>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d124      	bne.n	8003d78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d30:	f000 fa06 	bl	8004140 <prvIsQueueFull>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fd8a 	bl	800485c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4a:	f000 f991 	bl	8004070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d4e:	f000 fbc7 	bl	80044e0 <xTaskResumeAll>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f47f af7c 	bne.w	8003c52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <xQueueGenericSend+0x1f8>)
 8003d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	e772      	b.n	8003c52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6e:	f000 f97f 	bl	8004070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d72:	f000 fbb5 	bl	80044e0 <xTaskResumeAll>
 8003d76:	e76c      	b.n	8003c52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7a:	f000 f979 	bl	8004070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d7e:	f000 fbaf 	bl	80044e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d82:	2300      	movs	r3, #0
		}
	}
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3738      	adds	r7, #56	; 0x38
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <xQueueReceive+0x30>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	623b      	str	r3, [r7, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueReceive+0x3e>
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xQueueReceive+0x42>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueReceive+0x44>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xQueueReceive+0x5e>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61fb      	str	r3, [r7, #28]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dee:	f000 fefd 	bl	8004bec <xTaskGetSchedulerState>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <xQueueReceive+0x6e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <xQueueReceive+0x72>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <xQueueReceive+0x74>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xQueueReceive+0x8e>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61bb      	str	r3, [r7, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e1e:	f001 f919 	bl	8005054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f000 f8f7 	bl	8004024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	3310      	adds	r3, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fd2a 	bl	80048a4 <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <xQueueReceive+0x1bc>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e66:	f001 f925 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e069      	b.n	8003f42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e74:	f001 f91e 	bl	80050b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e062      	b.n	8003f42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fd6e 	bl	8004968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e90:	f001 f910 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e94:	f000 fb16 	bl	80044c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e98:	f001 f8dc 	bl	8005054 <vPortEnterCritical>
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d103      	bne.n	8003eb2 <xQueueReceive+0x122>
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d103      	bne.n	8003ec8 <xQueueReceive+0x138>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec8:	f001 f8f4 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ecc:	1d3a      	adds	r2, r7, #4
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fd5d 	bl	8004994 <xTaskCheckForTimeOut>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d123      	bne.n	8003f28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f000 f917 	bl	8004114 <prvIsQueueEmpty>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	3324      	adds	r3, #36	; 0x24
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fcb1 	bl	800485c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efc:	f000 f8b8 	bl	8004070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f00:	f000 faee 	bl	80044e0 <xTaskResumeAll>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d189      	bne.n	8003e1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <xQueueReceive+0x1bc>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	e780      	b.n	8003e1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1e:	f000 f8a7 	bl	8004070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f22:	f000 fadd 	bl	80044e0 <xTaskResumeAll>
 8003f26:	e77a      	b.n	8003e1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f8a1 	bl	8004070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f2e:	f000 fad7 	bl	80044e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f34:	f000 f8ee 	bl	8004114 <prvIsQueueEmpty>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f43f af6f 	beq.w	8003e1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3730      	adds	r7, #48	; 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d14d      	bne.n	8004012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fe54 	bl	8004c28 <xTaskPriorityDisinherit>
 8003f80:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	e043      	b.n	8004012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d119      	bne.n	8003fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6898      	ldr	r0, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	f001 fb3a 	bl	8005614 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	441a      	add	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d32b      	bcc.n	8004012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e026      	b.n	8004012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68d8      	ldr	r0, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	f001 fb20 	bl	8005614 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	425b      	negs	r3, r3
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d207      	bcs.n	8004000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d105      	bne.n	8004012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	3b01      	subs	r3, #1
 8004010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800401a:	697b      	ldr	r3, [r7, #20]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d303      	bcc.n	8004058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	461a      	mov	r2, r3
 8004062:	6838      	ldr	r0, [r7, #0]
 8004064:	f001 fad6 	bl	8005614 <memcpy>
	}
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004078:	f000 ffec 	bl	8005054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004084:	e011      	b.n	80040aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3324      	adds	r3, #36	; 0x24
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fc06 	bl	80048a4 <xTaskRemoveFromEventList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800409e:	f000 fcdb 	bl	8004a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dce9      	bgt.n	8004086 <prvUnlockQueue+0x16>
 80040b2:	e000      	b.n	80040b6 <prvUnlockQueue+0x46>
					break;
 80040b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040be:	f000 fff9 	bl	80050b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040c2:	f000 ffc7 	bl	8005054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ce:	e011      	b.n	80040f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d012      	beq.n	80040fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3310      	adds	r3, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fbe1 	bl	80048a4 <xTaskRemoveFromEventList>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040e8:	f000 fcb6 	bl	8004a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dce9      	bgt.n	80040d0 <prvUnlockQueue+0x60>
 80040fc:	e000      	b.n	8004100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	22ff      	movs	r2, #255	; 0xff
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004108:	f000 ffd4 	bl	80050b4 <vPortExitCritical>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800411c:	f000 ff9a 	bl	8005054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e001      	b.n	8004132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004132:	f000 ffbf 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004148:	f000 ff84 	bl	8005054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	429a      	cmp	r2, r3
 8004156:	d102      	bne.n	800415e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e001      	b.n	8004162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004162:	f000 ffa7 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	; 0x30
 8004174:	af04      	add	r7, sp, #16
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f847 	bl	8005218 <pvPortMalloc>
 800418a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004192:	2058      	movs	r0, #88	; 0x58
 8004194:	f001 f840 	bl	8005218 <pvPortMalloc>
 8004198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
 80041a6:	e005      	b.n	80041b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f001 f8f9 	bl	80053a0 <vPortFree>
 80041ae:	e001      	b.n	80041b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	2300      	movs	r3, #0
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80e 	bl	80041f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d6:	69f8      	ldr	r0, [r7, #28]
 80041d8:	f000 f88e 	bl	80042f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041dc:	2301      	movs	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e002      	b.n	80041e8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041e8:	69bb      	ldr	r3, [r7, #24]
	}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b088      	sub	sp, #32
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800420a:	3b01      	subs	r3, #1
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	617b      	str	r3, [r7, #20]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <prvInitialiseNewTask+0x46>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e012      	b.n	800426c <prvInitialiseNewTask+0x7a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	7819      	ldrb	r1, [r3, #0]
 800424e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	3334      	adds	r3, #52	; 0x34
 8004256:	460a      	mov	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <prvInitialiseNewTask+0x82>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3301      	adds	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d9e9      	bls.n	8004246 <prvInitialiseNewTask+0x54>
 8004272:	e000      	b.n	8004276 <prvInitialiseNewTask+0x84>
		{
			break;
 8004274:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2b06      	cmp	r3, #6
 8004282:	d901      	bls.n	8004288 <prvInitialiseNewTask+0x96>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004284:	2306      	movs	r3, #6
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004292:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fb21 	bl	80038e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fb1c 	bl	80038e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	f1c3 0207 	rsb	r2, r3, #7
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f000 fd92 	bl	8004e00 <pxPortInitialiseStack>
 80042dc:	4602      	mov	r2, r0
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ee:	bf00      	nop
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004300:	f000 fea8 	bl	8005054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <prvAddNewTaskToReadyList+0xb8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <prvAddNewTaskToReadyList+0xb8>)
 800430c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <prvAddNewTaskToReadyList+0xbc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004316:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <prvAddNewTaskToReadyList+0xbc>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <prvAddNewTaskToReadyList+0xb8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d110      	bne.n	8004346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004324:	f000 fbbe 	bl	8004aa4 <prvInitialiseTaskLists>
 8004328:	e00d      	b.n	8004346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <prvAddNewTaskToReadyList+0xc0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <prvAddNewTaskToReadyList+0xbc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	429a      	cmp	r2, r3
 800433e:	d802      	bhi.n	8004346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <prvAddNewTaskToReadyList+0xbc>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <prvAddNewTaskToReadyList+0xc4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <prvAddNewTaskToReadyList+0xc4>)
 800434e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2201      	movs	r2, #1
 8004356:	409a      	lsls	r2, r3
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <prvAddNewTaskToReadyList+0xcc>)
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7ff fac1 	bl	8003900 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437e:	f000 fe99 	bl	80050b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <prvAddNewTaskToReadyList+0xc0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <prvAddNewTaskToReadyList+0xbc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <prvAddNewTaskToReadyList+0xd0>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000278 	.word	0x20000278
 80043b4:	20000178 	.word	0x20000178
 80043b8:	20000284 	.word	0x20000284
 80043bc:	20000294 	.word	0x20000294
 80043c0:	20000280 	.word	0x20000280
 80043c4:	2000017c 	.word	0x2000017c
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d017      	beq.n	800440e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <vTaskDelay+0x60>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <vTaskDelay+0x30>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60bb      	str	r3, [r7, #8]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043fc:	f000 f862 	bl	80044c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004400:	2100      	movs	r1, #0
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fc96 	bl	8004d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004408:	f000 f86a 	bl	80044e0 <xTaskResumeAll>
 800440c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <vTaskDelay+0x64>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200002a0 	.word	0x200002a0
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800443a:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <vTaskStartScheduler+0x78>)
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	2300      	movs	r3, #0
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	491a      	ldr	r1, [pc, #104]	; (80044b0 <vTaskStartScheduler+0x7c>)
 8004448:	481a      	ldr	r0, [pc, #104]	; (80044b4 <vTaskStartScheduler+0x80>)
 800444a:	f7ff fe91 	bl	8004170 <xTaskCreate>
 800444e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d116      	bne.n	8004484 <vTaskStartScheduler+0x50>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	60bb      	str	r3, [r7, #8]
}
 8004468:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <vTaskStartScheduler+0x84>)
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <vTaskStartScheduler+0x88>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <vTaskStartScheduler+0x8c>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800447e:	f000 fd47 	bl	8004f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004482:	e00e      	b.n	80044a2 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d10a      	bne.n	80044a2 <vTaskStartScheduler+0x6e>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	607b      	str	r3, [r7, #4]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <vTaskStartScheduler+0x6c>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	2000029c 	.word	0x2000029c
 80044b0:	08005694 	.word	0x08005694
 80044b4:	08004a71 	.word	0x08004a71
 80044b8:	20000298 	.word	0x20000298
 80044bc:	20000284 	.word	0x20000284
 80044c0:	2000027c 	.word	0x2000027c

080044c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <vTaskSuspendAll+0x18>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a03      	ldr	r2, [pc, #12]	; (80044dc <vTaskSuspendAll+0x18>)
 80044d0:	6013      	str	r3, [r2, #0]
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	200002a0 	.word	0x200002a0

080044e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ee:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <xTaskResumeAll+0x114>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <xTaskResumeAll+0x2c>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800450c:	f000 fda2 	bl	8005054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <xTaskResumeAll+0x114>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3b01      	subs	r3, #1
 8004516:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <xTaskResumeAll+0x114>)
 8004518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <xTaskResumeAll+0x114>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d161      	bne.n	80045e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004522:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <xTaskResumeAll+0x118>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05d      	beq.n	80045e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800452a:	e02e      	b.n	800458a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <xTaskResumeAll+0x11c>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3318      	adds	r3, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fa3e 	bl	80039ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fa39 	bl	80039ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <xTaskResumeAll+0x120>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <xTaskResumeAll+0x120>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a27      	ldr	r2, [pc, #156]	; (8004604 <xTaskResumeAll+0x124>)
 8004568:	441a      	add	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7ff f9c5 	bl	8003900 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <xTaskResumeAll+0x128>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <xTaskResumeAll+0x12c>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <xTaskResumeAll+0x11c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1cc      	bne.n	800452c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004598:	f000 fb02 	bl	8004ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <xTaskResumeAll+0x130>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045a8:	f000 f836 	bl	8004618 <xTaskIncrementTick>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <xTaskResumeAll+0x12c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f1      	bne.n	80045a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <xTaskResumeAll+0x130>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <xTaskResumeAll+0x12c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <xTaskResumeAll+0x134>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e6:	f000 fd65 	bl	80050b4 <vPortExitCritical>

	return xAlreadyYielded;
 80045ea:	68bb      	ldr	r3, [r7, #8]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	200002a0 	.word	0x200002a0
 80045f8:	20000278 	.word	0x20000278
 80045fc:	20000238 	.word	0x20000238
 8004600:	20000280 	.word	0x20000280
 8004604:	2000017c 	.word	0x2000017c
 8004608:	20000178 	.word	0x20000178
 800460c:	2000028c 	.word	0x2000028c
 8004610:	20000288 	.word	0x20000288
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004622:	4b55      	ldr	r3, [pc, #340]	; (8004778 <xTaskIncrementTick+0x160>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8093 	bne.w	8004752 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <xTaskIncrementTick+0x164>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004634:	4a51      	ldr	r2, [pc, #324]	; (800477c <xTaskIncrementTick+0x164>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d120      	bne.n	8004682 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <xTaskIncrementTick+0x168>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <xTaskIncrementTick+0x48>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <xTaskIncrementTick+0x46>
 8004660:	4b47      	ldr	r3, [pc, #284]	; (8004780 <xTaskIncrementTick+0x168>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <xTaskIncrementTick+0x16c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a45      	ldr	r2, [pc, #276]	; (8004780 <xTaskIncrementTick+0x168>)
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4a45      	ldr	r2, [pc, #276]	; (8004784 <xTaskIncrementTick+0x16c>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b44      	ldr	r3, [pc, #272]	; (8004788 <xTaskIncrementTick+0x170>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	4a43      	ldr	r2, [pc, #268]	; (8004788 <xTaskIncrementTick+0x170>)
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	f000 fa8f 	bl	8004ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004682:	4b42      	ldr	r3, [pc, #264]	; (800478c <xTaskIncrementTick+0x174>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d34d      	bcc.n	8004728 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468c:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <xTaskIncrementTick+0x168>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <xTaskIncrementTick+0x82>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xTaskIncrementTick+0x84>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a0:	4b3a      	ldr	r3, [pc, #232]	; (800478c <xTaskIncrementTick+0x174>)
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295
 80046a6:	601a      	str	r2, [r3, #0]
					break;
 80046a8:	e03e      	b.n	8004728 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046aa:	4b35      	ldr	r3, [pc, #212]	; (8004780 <xTaskIncrementTick+0x168>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d203      	bcs.n	80046ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046c2:	4a32      	ldr	r2, [pc, #200]	; (800478c <xTaskIncrementTick+0x174>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6013      	str	r3, [r2, #0]
						break;
 80046c8:	e02e      	b.n	8004728 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f973 	bl	80039ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3318      	adds	r3, #24
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f96a 	bl	80039ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	2201      	movs	r2, #1
 80046ec:	409a      	lsls	r2, r3
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <xTaskIncrementTick+0x178>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <xTaskIncrementTick+0x178>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <xTaskIncrementTick+0x17c>)
 8004706:	441a      	add	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7ff f8f6 	bl	8003900 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <xTaskIncrementTick+0x180>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	429a      	cmp	r2, r3
 8004720:	d3b4      	bcc.n	800468c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004722:	2301      	movs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004726:	e7b1      	b.n	800468c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <xTaskIncrementTick+0x180>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	4919      	ldr	r1, [pc, #100]	; (8004794 <xTaskIncrementTick+0x17c>)
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d901      	bls.n	8004744 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <xTaskIncrementTick+0x184>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 800474c:	f7fb ff30 	bl	80005b0 <vApplicationTickHook>
 8004750:	e006      	b.n	8004760 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <xTaskIncrementTick+0x184>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	4a10      	ldr	r2, [pc, #64]	; (800479c <xTaskIncrementTick+0x184>)
 800475a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800475c:	f7fb ff28 	bl	80005b0 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <xTaskIncrementTick+0x188>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200002a0 	.word	0x200002a0
 800477c:	2000027c 	.word	0x2000027c
 8004780:	20000230 	.word	0x20000230
 8004784:	20000234 	.word	0x20000234
 8004788:	20000290 	.word	0x20000290
 800478c:	20000298 	.word	0x20000298
 8004790:	20000280 	.word	0x20000280
 8004794:	2000017c 	.word	0x2000017c
 8004798:	20000178 	.word	0x20000178
 800479c:	20000288 	.word	0x20000288
 80047a0:	2000028c 	.word	0x2000028c

080047a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047aa:	4b27      	ldr	r3, [pc, #156]	; (8004848 <vTaskSwitchContext+0xa4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <vTaskSwitchContext+0xa8>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047b8:	e03f      	b.n	800483a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <vTaskSwitchContext+0xa8>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <vTaskSwitchContext+0xac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	f1c3 031f 	rsb	r3, r3, #31
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	491f      	ldr	r1, [pc, #124]	; (8004854 <vTaskSwitchContext+0xb0>)
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	607b      	str	r3, [r7, #4]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <vTaskSwitchContext+0x5a>
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <vTaskSwitchContext+0xb0>)
 800480c:	4413      	add	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3308      	adds	r3, #8
 8004822:	429a      	cmp	r2, r3
 8004824:	d104      	bne.n	8004830 <vTaskSwitchContext+0x8c>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <vTaskSwitchContext+0xb4>)
 8004838:	6013      	str	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	200002a0 	.word	0x200002a0
 800484c:	2000028c 	.word	0x2000028c
 8004850:	20000280 	.word	0x20000280
 8004854:	2000017c 	.word	0x2000017c
 8004858:	20000178 	.word	0x20000178

0800485c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60fb      	str	r3, [r7, #12]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <vTaskPlaceOnEventList+0x44>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3318      	adds	r3, #24
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff f85c 	bl	8003948 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004890:	2101      	movs	r1, #1
 8004892:	6838      	ldr	r0, [r7, #0]
 8004894:	f000 fa4e 	bl	8004d34 <prvAddCurrentTaskToDelayedList>
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000178 	.word	0x20000178

080048a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60fb      	str	r3, [r7, #12]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3318      	adds	r3, #24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff f870 	bl	80039ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <xTaskRemoveFromEventList+0xac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11c      	bne.n	800491c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f867 	bl	80039ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <xTaskRemoveFromEventList+0xb0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <xTaskRemoveFromEventList+0xb0>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a13      	ldr	r2, [pc, #76]	; (8004958 <xTaskRemoveFromEventList+0xb4>)
 800490c:	441a      	add	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe fff3 	bl	8003900 <vListInsertEnd>
 800491a:	e005      	b.n	8004928 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3318      	adds	r3, #24
 8004920:	4619      	mov	r1, r3
 8004922:	480e      	ldr	r0, [pc, #56]	; (800495c <xTaskRemoveFromEventList+0xb8>)
 8004924:	f7fe ffec 	bl	8003900 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <xTaskRemoveFromEventList+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	429a      	cmp	r2, r3
 8004934:	d905      	bls.n	8004942 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <xTaskRemoveFromEventList+0xc0>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e001      	b.n	8004946 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004946:	697b      	ldr	r3, [r7, #20]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200002a0 	.word	0x200002a0
 8004954:	20000280 	.word	0x20000280
 8004958:	2000017c 	.word	0x2000017c
 800495c:	20000238 	.word	0x20000238
 8004960:	20000178 	.word	0x20000178
 8004964:	2000028c 	.word	0x2000028c

08004968 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <vTaskInternalSetTimeOutState+0x24>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <vTaskInternalSetTimeOutState+0x28>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000290 	.word	0x20000290
 8004990:	2000027c 	.word	0x2000027c

08004994 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	613b      	str	r3, [r7, #16]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60fb      	str	r3, [r7, #12]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049d6:	f000 fb3d 	bl	8005054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <xTaskCheckForTimeOut+0xbc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d102      	bne.n	80049fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e023      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <xTaskCheckForTimeOut+0xc0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d007      	beq.n	8004a16 <xTaskCheckForTimeOut+0x82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e015      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d20b      	bcs.n	8004a38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff9b 	bl	8004968 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e004      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f000 fb37 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 8004a46:	69fb      	ldr	r3, [r7, #28]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	2000027c 	.word	0x2000027c
 8004a54:	20000290 	.word	0x20000290

08004a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <vTaskMissedYield+0x14>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	2000028c 	.word	0x2000028c

08004a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a78:	f000 f854 	bl	8004b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <prvIdleTask+0x2c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d907      	bls.n	8004a94 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <prvIdleTask+0x30>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004a94:	f7fb fd80 	bl	8000598 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004a98:	e7ee      	b.n	8004a78 <prvIdleTask+0x8>
 8004a9a:	bf00      	nop
 8004a9c:	2000017c 	.word	0x2000017c
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e00c      	b.n	8004aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <prvInitialiseTaskLists+0x60>)
 8004abc:	4413      	add	r3, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fef1 	bl	80038a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d9ef      	bls.n	8004ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ad0:	480d      	ldr	r0, [pc, #52]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004ad2:	f7fe fee8 	bl	80038a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ad6:	480d      	ldr	r0, [pc, #52]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004ad8:	f7fe fee5 	bl	80038a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <prvInitialiseTaskLists+0x6c>)
 8004ade:	f7fe fee2 	bl	80038a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <prvInitialiseTaskLists+0x70>)
 8004ae4:	f7fe fedf 	bl	80038a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <prvInitialiseTaskLists+0x74>)
 8004aea:	f7fe fedc 	bl	80038a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <prvInitialiseTaskLists+0x78>)
 8004af0:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <prvInitialiseTaskLists+0x7c>)
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000017c 	.word	0x2000017c
 8004b08:	20000208 	.word	0x20000208
 8004b0c:	2000021c 	.word	0x2000021c
 8004b10:	20000238 	.word	0x20000238
 8004b14:	2000024c 	.word	0x2000024c
 8004b18:	20000264 	.word	0x20000264
 8004b1c:	20000230 	.word	0x20000230
 8004b20:	20000234 	.word	0x20000234

08004b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2a:	e019      	b.n	8004b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b2c:	f000 fa92 	bl	8005054 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <prvCheckTasksWaitingTermination+0x50>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe ff3c 	bl	80039ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b56:	f000 faad 	bl	80050b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f810 	bl	8004b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e1      	bne.n	8004b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2000024c 	.word	0x2000024c
 8004b78:	20000278 	.word	0x20000278
 8004b7c:	20000260 	.word	0x20000260

08004b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fc07 	bl	80053a0 <vPortFree>
			vPortFree( pxTCB );
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fc04 	bl	80053a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <prvResetNextTaskUnblockTime+0x44>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <prvResetNextTaskUnblockTime+0x14>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <prvResetNextTaskUnblockTime+0x16>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvResetNextTaskUnblockTime+0x48>)
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc2:	e008      	b.n	8004bd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bc4:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <prvResetNextTaskUnblockTime+0x44>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <prvResetNextTaskUnblockTime+0x48>)
 8004bd4:	6013      	str	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000230 	.word	0x20000230
 8004be8:	20000298 	.word	0x20000298

08004bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <xTaskGetSchedulerState+0x34>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	e008      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <xTaskGetSchedulerState+0x38>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e001      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c12:	687b      	ldr	r3, [r7, #4]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000284 	.word	0x20000284
 8004c24:	200002a0 	.word	0x200002a0

08004c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d06e      	beq.n	8004d1c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c3e:	4b3a      	ldr	r3, [pc, #232]	; (8004d28 <xTaskPriorityDisinherit+0x100>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d00a      	beq.n	8004c5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60bb      	str	r3, [r7, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d044      	beq.n	8004d1c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d140      	bne.n	8004d1c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fe8b 	bl	80039ba <uxListRemove>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d115      	bne.n	8004cd6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	491f      	ldr	r1, [pc, #124]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xTaskPriorityDisinherit+0xae>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <xTaskPriorityDisinherit+0x108>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <xTaskPriorityDisinherit+0x108>)
 8004cd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f1c3 0207 	rsb	r2, r3, #7
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	2201      	movs	r2, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <xTaskPriorityDisinherit+0x108>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <xTaskPriorityDisinherit+0x108>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <xTaskPriorityDisinherit+0x104>)
 8004d0a:	441a      	add	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f7fe fdf4 	bl	8003900 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d1c:	697b      	ldr	r3, [r7, #20]
	}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000178 	.word	0x20000178
 8004d2c:	2000017c 	.word	0x2000017c
 8004d30:	20000280 	.word	0x20000280

08004d34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d3e:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d44:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fe35 	bl	80039ba <uxListRemove>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43da      	mvns	r2, r3
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d10a      	bne.n	8004d8c <prvAddCurrentTaskToDelayedList+0x58>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	481a      	ldr	r0, [pc, #104]	; (8004df0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d86:	f7fe fdbb 	bl	8003900 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d8a:	e026      	b.n	8004dda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d209      	bcs.n	8004db8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fe fdc9 	bl	8003948 <vListInsert>
}
 8004db6:	e010      	b.n	8004dda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fe fdbf 	bl	8003948 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d202      	bcs.n	8004dda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004dd4:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000027c 	.word	0x2000027c
 8004de8:	20000178 	.word	0x20000178
 8004dec:	20000280 	.word	0x20000280
 8004df0:	20000264 	.word	0x20000264
 8004df4:	20000234 	.word	0x20000234
 8004df8:	20000230 	.word	0x20000230
 8004dfc:	20000298 	.word	0x20000298

08004e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b04      	subs	r3, #4
 8004e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3b04      	subs	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e30:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <pxPortInitialiseStack+0x64>)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b14      	subs	r3, #20
 8004e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b04      	subs	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f06f 0202 	mvn.w	r2, #2
 8004e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b20      	subs	r3, #32
 8004e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	08004e69 	.word	0x08004e69

08004e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <prvTaskExitError+0x54>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d00a      	beq.n	8004e92 <prvTaskExitError+0x2a>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60fb      	str	r3, [r7, #12]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <prvTaskExitError+0x28>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60bb      	str	r3, [r7, #8]
}
 8004ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ea6:	bf00      	nop
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0fc      	beq.n	8004ea8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	2000000c 	.word	0x2000000c

08004ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <pxCurrentTCBConst2>)
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	6808      	ldr	r0, [r1, #0]
 8004ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	f380 8809 	msr	PSP, r0
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8811 	msr	BASEPRI, r0
 8004eda:	4770      	bx	lr
 8004edc:	f3af 8000 	nop.w

08004ee0 <pxCurrentTCBConst2>:
 8004ee0:	20000178 	.word	0x20000178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ee8:	4808      	ldr	r0, [pc, #32]	; (8004f0c <prvPortStartFirstTask+0x24>)
 8004eea:	6800      	ldr	r0, [r0, #0]
 8004eec:	6800      	ldr	r0, [r0, #0]
 8004eee:	f380 8808 	msr	MSP, r0
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8814 	msr	CONTROL, r0
 8004efa:	b662      	cpsie	i
 8004efc:	b661      	cpsie	f
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	df00      	svc	0
 8004f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f0a:	bf00      	nop
 8004f0c:	e000ed08 	.word	0xe000ed08

08004f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f16:	4b46      	ldr	r3, [pc, #280]	; (8005030 <xPortStartScheduler+0x120>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <xPortStartScheduler+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10a      	bne.n	8004f36 <xPortStartScheduler+0x26>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	613b      	str	r3, [r7, #16]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <xPortStartScheduler+0x120>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3f      	ldr	r2, [pc, #252]	; (8005038 <xPortStartScheduler+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10a      	bne.n	8004f56 <xPortStartScheduler+0x46>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f56:	4b39      	ldr	r3, [pc, #228]	; (800503c <xPortStartScheduler+0x12c>)
 8004f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <xPortStartScheduler+0x130>)
 8004f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <xPortStartScheduler+0x134>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f84:	e009      	b.n	8004f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <xPortStartScheduler+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <xPortStartScheduler+0x134>)
 8004f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d0ef      	beq.n	8004f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <xPortStartScheduler+0x134>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1c3 0307 	rsb	r3, r3, #7
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00a      	beq.n	8004fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60bb      	str	r3, [r7, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <xPortStartScheduler+0x134>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <xPortStartScheduler+0x134>)
 8004fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <xPortStartScheduler+0x134>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fda:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <xPortStartScheduler+0x134>)
 8004fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <xPortStartScheduler+0x138>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <xPortStartScheduler+0x138>)
 8004fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <xPortStartScheduler+0x138>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <xPortStartScheduler+0x138>)
 8004ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ffe:	f000 f8dd 	bl	80051bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <xPortStartScheduler+0x13c>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005008:	f000 f8fc 	bl	8005204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <xPortStartScheduler+0x140>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <xPortStartScheduler+0x140>)
 8005012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005018:	f7ff ff66 	bl	8004ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800501c:	f7ff fbc2 	bl	80047a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005020:	f7ff ff22 	bl	8004e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	e000ed00 	.word	0xe000ed00
 8005034:	410fc271 	.word	0x410fc271
 8005038:	410fc270 	.word	0x410fc270
 800503c:	e000e400 	.word	0xe000e400
 8005040:	200002a4 	.word	0x200002a4
 8005044:	200002a8 	.word	0x200002a8
 8005048:	e000ed20 	.word	0xe000ed20
 800504c:	2000000c 	.word	0x2000000c
 8005050:	e000ef34 	.word	0xe000ef34

08005054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	607b      	str	r3, [r7, #4]
}
 800506c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <vPortEnterCritical+0x58>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <vPortEnterCritical+0x58>)
 8005076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <vPortEnterCritical+0x58>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10f      	bne.n	80050a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vPortEnterCritical+0x5c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	603b      	str	r3, [r7, #0]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vPortEnterCritical+0x4a>
	}
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <vPortExitCritical+0x50>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <vPortExitCritical+0x24>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	607b      	str	r3, [r7, #4]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <vPortExitCritical+0x50>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3b01      	subs	r3, #1
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <vPortExitCritical+0x50>)
 80050e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <vPortExitCritical+0x50>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <vPortExitCritical+0x42>
 80050ea:	2300      	movs	r3, #0
 80050ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	2000000c 	.word	0x2000000c
	...

08005110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005110:	f3ef 8009 	mrs	r0, PSP
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	4b15      	ldr	r3, [pc, #84]	; (8005170 <pxCurrentTCBConst>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f01e 0f10 	tst.w	lr, #16
 8005120:	bf08      	it	eq
 8005122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	6010      	str	r0, [r2, #0]
 800512c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005134:	f380 8811 	msr	BASEPRI, r0
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f7ff fb30 	bl	80047a4 <vTaskSwitchContext>
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f380 8811 	msr	BASEPRI, r0
 800514c:	bc09      	pop	{r0, r3}
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	6808      	ldr	r0, [r1, #0]
 8005152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005156:	f01e 0f10 	tst.w	lr, #16
 800515a:	bf08      	it	eq
 800515c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005160:	f380 8809 	msr	PSP, r0
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst>:
 8005170:	20000178 	.word	0x20000178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005192:	f7ff fa41 	bl	8004618 <xTaskIncrementTick>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <SysTick_Handler+0x40>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f383 8811 	msr	BASEPRI, r3
}
 80051ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <vPortSetupTimerInterrupt+0x34>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <vPortSetupTimerInterrupt+0x38>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <vPortSetupTimerInterrupt+0x3c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <vPortSetupTimerInterrupt+0x40>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	099b      	lsrs	r3, r3, #6
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <vPortSetupTimerInterrupt+0x44>)
 80051da:	3b01      	subs	r3, #1
 80051dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051de:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <vPortSetupTimerInterrupt+0x34>)
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	e000e010 	.word	0xe000e010
 80051f4:	e000e018 	.word	0xe000e018
 80051f8:	20000000 	.word	0x20000000
 80051fc:	10624dd3 	.word	0x10624dd3
 8005200:	e000e014 	.word	0xe000e014

08005204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005214 <vPortEnableVFP+0x10>
 8005208:	6801      	ldr	r1, [r0, #0]
 800520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800520e:	6001      	str	r1, [r0, #0]
 8005210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005212:	bf00      	nop
 8005214:	e000ed88 	.word	0xe000ed88

08005218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005224:	f7ff f94e 	bl	80044c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005228:	4b58      	ldr	r3, [pc, #352]	; (800538c <pvPortMalloc+0x174>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005230:	f000 f910 	bl	8005454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005234:	4b56      	ldr	r3, [pc, #344]	; (8005390 <pvPortMalloc+0x178>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 808e 	bne.w	800535e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01d      	beq.n	8005284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005248:	2208      	movs	r2, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f023 0307 	bic.w	r3, r3, #7
 8005260:	3308      	adds	r3, #8
 8005262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <pvPortMalloc+0x6c>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	617b      	str	r3, [r7, #20]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d069      	beq.n	800535e <pvPortMalloc+0x146>
 800528a:	4b42      	ldr	r3, [pc, #264]	; (8005394 <pvPortMalloc+0x17c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d864      	bhi.n	800535e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005294:	4b40      	ldr	r3, [pc, #256]	; (8005398 <pvPortMalloc+0x180>)
 8005296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005298:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <pvPortMalloc+0x180>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800529e:	e004      	b.n	80052aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d903      	bls.n	80052bc <pvPortMalloc+0xa4>
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f1      	bne.n	80052a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052bc:	4b33      	ldr	r3, [pc, #204]	; (800538c <pvPortMalloc+0x174>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d04b      	beq.n	800535e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2208      	movs	r2, #8
 80052cc:	4413      	add	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	2308      	movs	r3, #8
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d91f      	bls.n	8005328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <pvPortMalloc+0xf8>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	613b      	str	r3, [r7, #16]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005322:	69b8      	ldr	r0, [r7, #24]
 8005324:	f000 f8f8 	bl	8005518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <pvPortMalloc+0x17c>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <pvPortMalloc+0x17c>)
 8005334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <pvPortMalloc+0x17c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <pvPortMalloc+0x184>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d203      	bcs.n	800534a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <pvPortMalloc+0x17c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <pvPortMalloc+0x184>)
 8005348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	4b10      	ldr	r3, [pc, #64]	; (8005390 <pvPortMalloc+0x178>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	431a      	orrs	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800535e:	f7ff f8bf 	bl	80044e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <pvPortMalloc+0x16a>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <pvPortMalloc+0x168>
	return pvReturn;
 8005382:	69fb      	ldr	r3, [r7, #28]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3728      	adds	r7, #40	; 0x28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000eb4 	.word	0x20000eb4
 8005390:	20000ec0 	.word	0x20000ec0
 8005394:	20000eb8 	.word	0x20000eb8
 8005398:	20000eac 	.word	0x20000eac
 800539c:	20000ebc 	.word	0x20000ebc

080053a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d048      	beq.n	8005444 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053b2:	2308      	movs	r3, #8
 80053b4:	425b      	negs	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	4b21      	ldr	r3, [pc, #132]	; (800544c <vPortFree+0xac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <vPortFree+0x44>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <vPortFree+0x62>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60bb      	str	r3, [r7, #8]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <vPortFree+0xac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d019      	beq.n	8005444 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d115      	bne.n	8005444 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <vPortFree+0xac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005428:	f7ff f84c 	bl	80044c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <vPortFree+0xb0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4413      	add	r3, r2
 8005436:	4a06      	ldr	r2, [pc, #24]	; (8005450 <vPortFree+0xb0>)
 8005438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800543a:	6938      	ldr	r0, [r7, #16]
 800543c:	f000 f86c 	bl	8005518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005440:	f7ff f84e 	bl	80044e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000ec0 	.word	0x20000ec0
 8005450:	20000eb8 	.word	0x20000eb8

08005454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800545a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800545e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <prvHeapInit+0xac>)
 8005462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3307      	adds	r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <prvHeapInit+0xac>)
 8005484:	4413      	add	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <prvHeapInit+0xb0>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <prvHeapInit+0xb0>)
 8005494:	2200      	movs	r2, #0
 8005496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054a0:	2208      	movs	r2, #8
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a15      	ldr	r2, [pc, #84]	; (8005508 <prvHeapInit+0xb4>)
 80054b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <prvHeapInit+0xb4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2200      	movs	r2, #0
 80054bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <prvHeapInit+0xb4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvHeapInit+0xb4>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a0a      	ldr	r2, [pc, #40]	; (800550c <prvHeapInit+0xb8>)
 80054e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <prvHeapInit+0xbc>)
 80054ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <prvHeapInit+0xc0>)
 80054ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054f2:	601a      	str	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	200002ac 	.word	0x200002ac
 8005504:	20000eac 	.word	0x20000eac
 8005508:	20000eb4 	.word	0x20000eb4
 800550c:	20000ebc 	.word	0x20000ebc
 8005510:	20000eb8 	.word	0x20000eb8
 8005514:	20000ec0 	.word	0x20000ec0

08005518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <prvInsertBlockIntoFreeList+0xac>)
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e002      	b.n	800552c <prvInsertBlockIntoFreeList+0x14>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d8f7      	bhi.n	8005526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4413      	add	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d108      	bne.n	800555a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	441a      	add	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	441a      	add	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d118      	bne.n	80055a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d00d      	beq.n	8005596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	441a      	add	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e008      	b.n	80055a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	e003      	b.n	80055a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d002      	beq.n	80055b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	20000eac 	.word	0x20000eac
 80055c8:	20000eb4 	.word	0x20000eb4

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4d0d      	ldr	r5, [pc, #52]	; (8005604 <__libc_init_array+0x38>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	2600      	movs	r6, #0
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	4d0b      	ldr	r5, [pc, #44]	; (800560c <__libc_init_array+0x40>)
 80055de:	4c0c      	ldr	r4, [pc, #48]	; (8005610 <__libc_init_array+0x44>)
 80055e0:	f000 f82e 	bl	8005640 <_init>
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	2600      	movs	r6, #0
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	080056d4 	.word	0x080056d4
 8005608:	080056d4 	.word	0x080056d4
 800560c:	080056d4 	.word	0x080056d4
 8005610:	080056d8 	.word	0x080056d8

08005614 <memcpy>:
 8005614:	440a      	add	r2, r1
 8005616:	4291      	cmp	r1, r2
 8005618:	f100 33ff 	add.w	r3, r0, #4294967295
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	4770      	bx	lr
 8005620:	b510      	push	{r4, lr}
 8005622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562a:	4291      	cmp	r1, r2
 800562c:	d1f9      	bne.n	8005622 <memcpy+0xe>
 800562e:	bd10      	pop	{r4, pc}

08005630 <memset>:
 8005630:	4402      	add	r2, r0
 8005632:	4603      	mov	r3, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
