
freeRTOS_tasks1_F302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800731c  0800731c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800731c  0800731c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000173c  20000010  08007334  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  08007334  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192eb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362c  00000000  00000000  0003932b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e096  00000000  00000000  0003f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b89e  00000000  00000000  0005d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd9f  00000000  00000000  00078dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  00128bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071f0 	.word	0x080071f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080071f0 	.word	0x080071f0

080001d0 <vPortSuppressTicksAndSleep>:
}
/* USER CODE END 3 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5b0      	push	{r4, r5, r7, lr}
 80001e6:	b08a      	sub	sp, #40	; 0x28
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	memset(buffer.tx_buffer, 65, sizeof(buffer.tx_buffer));
 80001ea:	220a      	movs	r2, #10
 80001ec:	2141      	movs	r1, #65	; 0x41
 80001ee:	4852      	ldr	r0, [pc, #328]	; (8000338 <main+0x154>)
 80001f0:	f006 fff6 	bl	80071e0 <memset>
	memset(buffer.rx_buffer, 66, sizeof(buffer.rx_buffer));
 80001f4:	220a      	movs	r2, #10
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4850      	ldr	r0, [pc, #320]	; (800033c <main+0x158>)
 80001fa:	f006 fff1 	bl	80071e0 <memset>
	buffer.rx = 0;
 80001fe:	4b4e      	ldr	r3, [pc, #312]	; (8000338 <main+0x154>)
 8000200:	2200      	movs	r2, #0
 8000202:	765a      	strb	r2, [r3, #25]
	buffer.tx = 0;
 8000204:	4b4c      	ldr	r3, [pc, #304]	; (8000338 <main+0x154>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fe31 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8c1 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f987 	bl	8000524 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f915 	bl	8000444 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800021a:	f000 f953 	bl	80004c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CreatedEventGroup1 = xEventGroupCreate();
 800021e:	f003 fe2a 	bl	8003e76 <xEventGroupCreate>
 8000222:	4603      	mov	r3, r0
 8000224:	4a46      	ldr	r2, [pc, #280]	; (8000340 <main+0x15c>)
 8000226:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Semaphore1 = xSemaphoreCreateBinary();
 8000228:	2203      	movs	r2, #3
 800022a:	2100      	movs	r1, #0
 800022c:	2001      	movs	r0, #1
 800022e:	f004 f8dd 	bl	80043ec <xQueueGenericCreate>
 8000232:	4603      	mov	r3, r0
 8000234:	4a43      	ldr	r2, [pc, #268]	; (8000344 <main+0x160>)
 8000236:	6013      	str	r3, [r2, #0]
  Semaphore2 = xSemaphoreCreateCounting(3, 0);
 8000238:	2100      	movs	r1, #0
 800023a:	2003      	movs	r0, #3
 800023c:	f004 f92f 	bl	800449e <xQueueCreateCountingSemaphore>
 8000240:	4603      	mov	r3, r0
 8000242:	4a41      	ldr	r2, [pc, #260]	; (8000348 <main+0x164>)
 8000244:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  uint32_t pvTimerID_1 = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
  TimerHandle_t Timer1;
  Timer1 = xTimerCreate("Timer1", 500, pdTRUE, (void* const)&pvTimerID_1, Timer1Callback);
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	4a3f      	ldr	r2, [pc, #252]	; (800034c <main+0x168>)
 8000250:	9200      	str	r2, [sp, #0]
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000258:	483d      	ldr	r0, [pc, #244]	; (8000350 <main+0x16c>)
 800025a:	f005 fff9 	bl	8006250 <xTimerCreate>
 800025e:	61f8      	str	r0, [r7, #28]
  xTimerStart(Timer1, 1);
 8000260:	f005 f97a 	bl	8005558 <xTaskGetTickCount>
 8000264:	4602      	mov	r2, r0
 8000266:	2301      	movs	r3, #1
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2300      	movs	r3, #0
 800026c:	2101      	movs	r1, #1
 800026e:	69f8      	ldr	r0, [r7, #28]
 8000270:	f006 f83e 	bl	80062f0 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(40, sizeof(char));
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	2028      	movs	r0, #40	; 0x28
 800027a:	f004 f8b7 	bl	80043ec <xQueueGenericCreate>
 800027e:	61b8      	str	r0, [r7, #24]
  buffer.queueh = myQueue1;
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <main+0x154>)
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	6153      	str	r3, [r2, #20]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000286:	4b33      	ldr	r3, [pc, #204]	; (8000354 <main+0x170>)
 8000288:	463c      	mov	r4, r7
 800028a:	461d      	mov	r5, r3
 800028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000290:	682b      	ldr	r3, [r5, #0]
 8000292:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000294:	463b      	mov	r3, r7
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f003 fdb1 	bl	8003e00 <osThreadCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a2d      	ldr	r2, [pc, #180]	; (8000358 <main+0x174>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //TaskHandle_t sendUSART1_handle;
  xTaskCreate(sendUSART1, "send data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 80002a4:	2300      	movs	r3, #0
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	2305      	movs	r3, #5
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <main+0x154>)
 80002ae:	2240      	movs	r2, #64	; 0x40
 80002b0:	492a      	ldr	r1, [pc, #168]	; (800035c <main+0x178>)
 80002b2:	482b      	ldr	r0, [pc, #172]	; (8000360 <main+0x17c>)
 80002b4:	f004 febc 	bl	8005030 <xTaskCreate>
  //TaskHandle_t receiveUSART1_handle;
  xTaskCreate(receiveUSART1, "receive data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 80002b8:	2300      	movs	r3, #0
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	2305      	movs	r3, #5
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <main+0x154>)
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	4927      	ldr	r1, [pc, #156]	; (8000364 <main+0x180>)
 80002c6:	4828      	ldr	r0, [pc, #160]	; (8000368 <main+0x184>)
 80002c8:	f004 feb2 	bl	8005030 <xTaskCreate>
  xTaskCreate(announcement, "announcement", 64, NULL, 6, NULL);
 80002cc:	2300      	movs	r3, #0
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2306      	movs	r3, #6
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	2240      	movs	r2, #64	; 0x40
 80002d8:	4924      	ldr	r1, [pc, #144]	; (800036c <main+0x188>)
 80002da:	4825      	ldr	r0, [pc, #148]	; (8000370 <main+0x18c>)
 80002dc:	f004 fea8 	bl	8005030 <xTaskCreate>
  xTaskCreate(announcement2, "announcement2", 64, NULL, 6, NULL);
 80002e0:	2300      	movs	r3, #0
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	2306      	movs	r3, #6
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	4921      	ldr	r1, [pc, #132]	; (8000374 <main+0x190>)
 80002ee:	4822      	ldr	r0, [pc, #136]	; (8000378 <main+0x194>)
 80002f0:	f004 fe9e 	bl	8005030 <xTaskCreate>
  xTaskCreate(taskPC0, "taskPC0", 64, NULL, 6, NULL);
 80002f4:	2300      	movs	r3, #0
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	2306      	movs	r3, #6
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	491e      	ldr	r1, [pc, #120]	; (800037c <main+0x198>)
 8000302:	481f      	ldr	r0, [pc, #124]	; (8000380 <main+0x19c>)
 8000304:	f004 fe94 	bl	8005030 <xTaskCreate>
  xTaskCreate(taskPC1, "taskPC1", 64, NULL, 6, NULL);
 8000308:	2300      	movs	r3, #0
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	2306      	movs	r3, #6
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2300      	movs	r3, #0
 8000312:	2240      	movs	r2, #64	; 0x40
 8000314:	491b      	ldr	r1, [pc, #108]	; (8000384 <main+0x1a0>)
 8000316:	481c      	ldr	r0, [pc, #112]	; (8000388 <main+0x1a4>)
 8000318:	f004 fe8a 	bl	8005030 <xTaskCreate>
  xTaskCreate(taskPC3, "taskPC3", 64, NULL, 6, NULL);
 800031c:	2300      	movs	r3, #0
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	2306      	movs	r3, #6
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2300      	movs	r3, #0
 8000326:	2240      	movs	r2, #64	; 0x40
 8000328:	4918      	ldr	r1, [pc, #96]	; (800038c <main+0x1a8>)
 800032a:	4819      	ldr	r0, [pc, #100]	; (8000390 <main+0x1ac>)
 800032c:	f004 fe80 	bl	8005030 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000330:	f003 fd5f 	bl	8003df2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	e7fe      	b.n	8000334 <main+0x150>
 8000336:	bf00      	nop
 8000338:	2000010c 	.word	0x2000010c
 800033c:	20000116 	.word	0x20000116
 8000340:	20000130 	.word	0x20000130
 8000344:	20000128 	.word	0x20000128
 8000348:	2000012c 	.word	0x2000012c
 800034c:	08000789 	.word	0x08000789
 8000350:	08007214 	.word	0x08007214
 8000354:	08007270 	.word	0x08007270
 8000358:	20000108 	.word	0x20000108
 800035c:	0800721c 	.word	0x0800721c
 8000360:	0800069d 	.word	0x0800069d
 8000364:	08007228 	.word	0x08007228
 8000368:	080006f1 	.word	0x080006f1
 800036c:	08007238 	.word	0x08007238
 8000370:	080008e1 	.word	0x080008e1
 8000374:	08007248 	.word	0x08007248
 8000378:	08000961 	.word	0x08000961
 800037c:	08007258 	.word	0x08007258
 8000380:	080009d9 	.word	0x080009d9
 8000384:	08007260 	.word	0x08007260
 8000388:	08000a4d 	.word	0x08000a4d
 800038c:	08007268 	.word	0x08007268
 8000390:	08000ac1 	.word	0x08000ac1

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b09c      	sub	sp, #112	; 0x70
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f006 ff1c 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2234      	movs	r2, #52	; 0x34
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f006 ff0e 	bl	80071e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	2302      	movs	r3, #2
 80003c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003cc:	2310      	movs	r3, #16
 80003ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003d8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f93e 	bl	8001664 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003ee:	f000 fbb8 	bl	8000b62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2302      	movs	r3, #2
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 f966 	bl	80026e0 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800041a:	f000 fba2 	bl	8000b62 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800041e:	2321      	movs	r3, #33	; 0x21
 8000420:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	463b      	mov	r3, r7
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fbbf 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000438:	f000 fb93 	bl	8000b62 <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3770      	adds	r7, #112	; 0x70
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_I2C1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <MX_I2C1_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_I2C1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000480:	f000 ffca 	bl	8001418 <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800048a:	f000 fb6a 	bl	8000b62 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000492:	f001 f850 	bl	8001536 <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800049c:	f000 fb61 	bl	8000b62 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_I2C1_Init+0x74>)
 80004a4:	f001 f892 	bl	80015cc <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 fb58 	bl	8000b62 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000002c 	.word	0x2000002c
 80004bc:	40005400 	.word	0x40005400
 80004c0:	2000090e 	.word	0x2000090e

080004c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004ca:	4a15      	ldr	r2, [pc, #84]	; (8000520 <MX_USART1_UART_Init+0x5c>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_USART1_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_USART1_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_USART1_UART_Init+0x58>)
 8000508:	f002 ff6e 	bl	80033e8 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000512:	f000 fb26 	bl	8000b62 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000080 	.word	0x20000080
 8000520:	40013800 	.word	0x40013800

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b55      	ldr	r3, [pc, #340]	; (8000690 <MX_GPIO_Init+0x16c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a54      	ldr	r2, [pc, #336]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b52      	ldr	r3, [pc, #328]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a4e      	ldr	r2, [pc, #312]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b49      	ldr	r3, [pc, #292]	; (8000690 <MX_GPIO_Init+0x16c>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a48      	ldr	r2, [pc, #288]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <MX_GPIO_Init+0x16c>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f641 4104 	movw	r1, #7172	; 0x1c04
 8000588:	4842      	ldr	r0, [pc, #264]	; (8000694 <MX_GPIO_Init+0x170>)
 800058a:	f000 fefb 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4840      	ldr	r0, [pc, #256]	; (8000698 <MX_GPIO_Init+0x174>)
 8000596:	f000 fef5 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800059a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	4838      	ldr	r0, [pc, #224]	; (8000694 <MX_GPIO_Init+0x170>)
 80005b2:	f000 fd75 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80005b6:	230b      	movs	r3, #11
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c0:	2302      	movs	r3, #2
 80005c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4619      	mov	r1, r3
 80005ca:	4832      	ldr	r0, [pc, #200]	; (8000694 <MX_GPIO_Init+0x170>)
 80005cc:	f000 fd68 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80005d0:	f240 4304 	movw	r3, #1028	; 0x404
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	482a      	ldr	r0, [pc, #168]	; (8000694 <MX_GPIO_Init+0x170>)
 80005ea:	f000 fd59 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4824      	ldr	r0, [pc, #144]	; (8000698 <MX_GPIO_Init+0x174>)
 8000608:	f000 fd4a 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800060c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <MX_GPIO_Init+0x170>)
 8000626:	f000 fd3b 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_GPIO_Init+0x170>)
 8000644:	f000 fd2c 	bl	80010a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2105      	movs	r1, #5
 800064c:	2006      	movs	r0, #6
 800064e:	f000 fcfd 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000652:	2006      	movs	r0, #6
 8000654:	f000 fd16 	bl	8001084 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2105      	movs	r1, #5
 800065c:	2007      	movs	r0, #7
 800065e:	f000 fcf5 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000662:	2007      	movs	r0, #7
 8000664:	f000 fd0e 	bl	8001084 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2105      	movs	r1, #5
 800066c:	2009      	movs	r0, #9
 800066e:	f000 fced 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fd06 	bl	8001084 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2105      	movs	r1, #5
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fce5 	bl	800104c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f000 fcfe 	bl	8001084 <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <sendUSART1>:

/* USER CODE BEGIN 4 */
void sendUSART1( void* buffer_p)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <sendUSART1+0x4c>)
 80006aa:	f000 fe83 	bl	80013b4 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60fb      	str	r3, [r7, #12]
		xQueueReceive(buffer_pp->queueh, &buffer_pp->tx, portMAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6958      	ldr	r0, [r3, #20]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3318      	adds	r3, #24
 80006ba:	f04f 32ff 	mov.w	r2, #4294967295
 80006be:	4619      	mov	r1, r3
 80006c0:	f004 f944 	bl	800494c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*) &buffer_pp->tx, sizeof(buffer_pp->tx), 100);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f103 0118 	add.w	r1, r3, #24
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	2201      	movs	r2, #1
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <sendUSART1+0x50>)
 80006d0:	f002 fed8 	bl	8003484 <HAL_UART_Transmit>
		vTaskDelay(200);
 80006d4:	20c8      	movs	r0, #200	; 0xc8
 80006d6:	f004 fdd9 	bl	800528c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	4802      	ldr	r0, [pc, #8]	; (80006e8 <sendUSART1+0x4c>)
 80006e0:	f000 fe68 	bl	80013b4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80006e4:	e7de      	b.n	80006a4 <sendUSART1+0x8>
 80006e6:	bf00      	nop
 80006e8:	48000800 	.word	0x48000800
 80006ec:	20000080 	.word	0x20000080

080006f0 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data"));
}

void receiveUSART1( void * buffer_p)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80006f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <receiveUSART1+0x50>)
 80006fe:	f000 fe59 	bl	80013b4 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]
		if( HAL_UART_Receive(&huart1, &buffer_pp->rx, 1, 1) == HAL_OK)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f103 0119 	add.w	r1, r3, #25
 800070c:	2301      	movs	r3, #1
 800070e:	2201      	movs	r2, #1
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <receiveUSART1+0x54>)
 8000712:	f002 ff41 	bl	8003598 <HAL_UART_Receive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d108      	bne.n	800072e <receiveUSART1+0x3e>
		{
			xQueueSend(buffer_pp->queueh, &buffer_pp->rx, 1);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6958      	ldr	r0, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f103 0119 	add.w	r1, r3, #25
 8000726:	2300      	movs	r3, #0
 8000728:	2201      	movs	r2, #1
 800072a:	f003 feeb 	bl	8004504 <xQueueGenericSend>
		}
		vTaskDelay(40);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f004 fdac 	bl	800528c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <receiveUSART1+0x50>)
 800073a:	f000 fe3b 	bl	80013b4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800073e:	e7db      	b.n	80006f8 <receiveUSART1+0x8>
 8000740:	48000800 	.word	0x48000800
 8000744:	20000080 	.word	0x20000080

08000748 <vApplicationIdleHook>:
	}
	 vTaskDelete(xTaskGetHandle("receive data"));
}

void vApplicationIdleHook( void )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <vApplicationIdleHook+0x1c>)
 8000752:	f000 fe2f 	bl	80013b4 <HAL_GPIO_TogglePin>
	//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <vApplicationIdleHook+0x1c>)
 800075c:	f000 fe2a 	bl	80013b4 <HAL_GPIO_TogglePin>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	48000800 	.word	0x48000800

08000768 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2104      	movs	r1, #4
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <vApplicationTickHook+0x1c>)
 8000772:	f000 fe07 	bl	8001384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2104      	movs	r1, #4
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <vApplicationTickHook+0x1c>)
 800077c:	f000 fe02 	bl	8001384 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	48000800 	.word	0x48000800

08000788 <Timer1Callback>:


void Timer1Callback( TimerHandle_t xTimer )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <Timer1Callback+0x80>)
 8000796:	f000 fe0d 	bl	80013b4 <HAL_GPIO_TogglePin>
	const uint32_t maxCount = 10;
 800079a:	230a      	movs	r3, #10
 800079c:	617b      	str	r3, [r7, #20]
	uint32_t count;
	count = (uint32_t) pvTimerGetTimerID(xTimer);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f006 f862 	bl	8006868 <pvTimerGetTimerID>
 80007a4:	4603      	mov	r3, r0
 80007a6:	61fb      	str	r3, [r7, #28]
	count++;
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	3301      	adds	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
	if(count >= maxCount)
 80007ae:	69fa      	ldr	r2, [r7, #28]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d31a      	bcc.n	80007ec <Timer1Callback+0x64>
	{
		count = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
		char message[] = {"Timer1\r\n"};
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <Timer1Callback+0x84>)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c2:	c303      	stmia	r3!, {r0, r1}
 80007c4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<sizeof(message); i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00c      	b.n	80007e6 <Timer1Callback+0x5e>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <Timer1Callback+0x88>)
 80007ce:	6958      	ldr	r0, [r3, #20]
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	18d1      	adds	r1, r2, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	2201      	movs	r2, #1
 80007dc:	f003 fe92 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	3301      	adds	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d9ef      	bls.n	80007cc <Timer1Callback+0x44>
		}
	}
	vTimerSetTimerID(xTimer, (void*) count);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f006 f859 	bl	80068a8 <vTimerSetTimerID>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <Timer1Callback+0x80>)
 80007fc:	f000 fdda 	bl	80013b4 <HAL_GPIO_TogglePin>
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000400 	.word	0x48000400
 800080c:	08007284 	.word	0x08007284
 8000810:	2000010c 	.word	0x2000010c

08000814 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000824:	d10b      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		xSemaphoreGiveFromISR( Semaphore1, NULL );
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f003 ffff 	bl	8004830 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR( Semaphore2, NULL );
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fff9 	bl	8004830 <xQueueGiveFromISR>
	}
	if(GPIO_Pin == GPIO_PIN_0)
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d112      	bne.n	800086a <HAL_GPIO_EXTI_Callback+0x56>
	{
		BaseType_t HigherPriorityTaskWoken;
		xEventGroupSetBitsFromISR(CreatedEventGroup1, 0x1, &HigherPriorityTaskWoken);
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2201      	movs	r2, #1
 800084e:	4822      	ldr	r0, [pc, #136]	; (80008d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000850:	f006 f84a 	bl	80068e8 <xTimerPendFunctionCallFromISR>
		portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d007      	beq.n	800086a <HAL_GPIO_EXTI_Callback+0x56>
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_GPIO_EXTI_Callback+0xc8>)
 800085c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	f3bf 8f4f 	dsb	sy
 8000866:	f3bf 8f6f 	isb	sy

	}
	if(GPIO_Pin == GPIO_PIN_1)
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d112      	bne.n	8000896 <HAL_GPIO_EXTI_Callback+0x82>
	{
		BaseType_t HigherPriorityTaskWoken;
		xEventGroupSetBitsFromISR(CreatedEventGroup1, 0x2, &HigherPriorityTaskWoken);
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2202      	movs	r2, #2
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800087c:	f006 f834 	bl	80068e8 <xTimerPendFunctionCallFromISR>
		portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d007      	beq.n	8000896 <HAL_GPIO_EXTI_Callback+0x82>
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_GPIO_EXTI_Callback+0xc8>)
 8000888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	f3bf 8f6f 	isb	sy
	}
	if(GPIO_Pin == GPIO_PIN_3)
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	2b08      	cmp	r3, #8
 800089a:	d112      	bne.n	80008c2 <HAL_GPIO_EXTI_Callback+0xae>
	{
		BaseType_t HigherPriorityTaskWoken;
		xEventGroupSetBitsFromISR(CreatedEventGroup1, 0x3, &HigherPriorityTaskWoken);
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2203      	movs	r2, #3
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80008a8:	f006 f81e 	bl	80068e8 <xTimerPendFunctionCallFromISR>
		portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <HAL_GPIO_EXTI_Callback+0xae>
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_GPIO_EXTI_Callback+0xc8>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
	}
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000128 	.word	0x20000128
 80008d0:	2000012c 	.word	0x2000012c
 80008d4:	20000130 	.word	0x20000130
 80008d8:	08004157 	.word	0x08004157
 80008dc:	e000ed04 	.word	0xe000ed04

080008e0 <announcement>:

void announcement(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
	for( ;; )
	{
		xSemaphoreTake(Semaphore1, portMAX_DELAY);
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <announcement+0x70>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f04f 31ff 	mov.w	r1, #4294967295
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f90c 	bl	8004b0c <xQueueSemaphoreTake>
		char message[] = {"ANNOUNCEMENT\r\n"};
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <announcement+0x74>)
 80008f6:	1d3c      	adds	r4, r7, #4
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	c407      	stmia	r4!, {r0, r1, r2}
 80008fc:	8023      	strh	r3, [r4, #0]
 80008fe:	3402      	adds	r4, #2
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	7023      	strb	r3, [r4, #0]
		vTaskDelay(pdMS_TO_TICKS(800));
 8000904:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000908:	f004 fcc0 	bl	800528c <vTaskDelay>
		xSemaphoreTake(Semaphore1, 1); // Takes a Semaphore1 because the button on PC13 may have noise
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <announcement+0x70>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f8fa 	bl	8004b0c <xQueueSemaphoreTake>
		for(int i = 0; i<sizeof(message); i++)
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e00b      	b.n	8000936 <announcement+0x56>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <announcement+0x78>)
 8000920:	6958      	ldr	r0, [r3, #20]
 8000922:	1d3a      	adds	r2, r7, #4
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	2300      	movs	r3, #0
 800092a:	2201      	movs	r2, #1
 800092c:	f003 fdea 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	2b0e      	cmp	r3, #14
 800093a:	d9f0      	bls.n	800091e <announcement+0x3e>
		}
		taskYIELD();
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <announcement+0x7c>)
 800093e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	f3bf 8f6f 	isb	sy
	{
 800094c:	e7cb      	b.n	80008e6 <announcement+0x6>
 800094e:	bf00      	nop
 8000950:	20000128 	.word	0x20000128
 8000954:	08007290 	.word	0x08007290
 8000958:	2000010c 	.word	0x2000010c
 800095c:	e000ed04 	.word	0xe000ed04

08000960 <announcement2>:
	}
}

void announcement2(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
	for( ;; )
	{
		xSemaphoreTake(Semaphore2, portMAX_DELAY);
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <announcement2+0x68>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f04f 31ff 	mov.w	r1, #4294967295
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f8cc 	bl	8004b0c <xQueueSemaphoreTake>
		char message[] = {"sem2\r\n"};
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <announcement2+0x6c>)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	6018      	str	r0, [r3, #0]
 800097e:	3304      	adds	r3, #4
 8000980:	8019      	strh	r1, [r3, #0]
 8000982:	3302      	adds	r3, #2
 8000984:	0c0a      	lsrs	r2, r1, #16
 8000986:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(1500));
 8000988:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800098c:	f004 fc7e 	bl	800528c <vTaskDelay>
		for(int i = 0; i<sizeof(message); i++)
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e00b      	b.n	80009ae <announcement2+0x4e>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <announcement2+0x70>)
 8000998:	6958      	ldr	r0, [r3, #20]
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	18d1      	adds	r1, r2, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	2201      	movs	r2, #1
 80009a4:	f003 fdae 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2b06      	cmp	r3, #6
 80009b2:	d9f0      	bls.n	8000996 <announcement2+0x36>
		}
		taskYIELD();
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <announcement2+0x74>)
 80009b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	f3bf 8f4f 	dsb	sy
 80009c0:	f3bf 8f6f 	isb	sy
	{
 80009c4:	e7cf      	b.n	8000966 <announcement2+0x6>
 80009c6:	bf00      	nop
 80009c8:	2000012c 	.word	0x2000012c
 80009cc:	080072a0 	.word	0x080072a0
 80009d0:	2000010c 	.word	0x2000010c
 80009d4:	e000ed04 	.word	0xe000ed04

080009d8 <taskPC0>:
	}
}

void taskPC0(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xEventGroupWaitBits(CreatedEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <taskPC0+0x64>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	2201      	movs	r2, #1
 80009ec:	2101      	movs	r1, #1
 80009ee:	f003 fa59 	bl	8003ea4 <xEventGroupWaitBits>
		char message[] = {"taskPC0\r\n"};
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <taskPC0+0x68>)
 80009f4:	463b      	mov	r3, r7
 80009f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f8:	c303      	stmia	r3!, {r0, r1}
 80009fa:	801a      	strh	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(500));
 80009fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a00:	f004 fc44 	bl	800528c <vTaskDelay>
		for(int i = 0; i<sizeof(message); i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e00b      	b.n	8000a22 <taskPC0+0x4a>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <taskPC0+0x6c>)
 8000a0c:	6958      	ldr	r0, [r3, #20]
 8000a0e:	463a      	mov	r2, r7
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	18d1      	adds	r1, r2, r3
 8000a14:	2300      	movs	r3, #0
 8000a16:	2201      	movs	r2, #1
 8000a18:	f003 fd74 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b09      	cmp	r3, #9
 8000a26:	d9f0      	bls.n	8000a0a <taskPC0+0x32>
		}
		taskYIELD();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <taskPC0+0x70>)
 8000a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	f3bf 8f4f 	dsb	sy
 8000a34:	f3bf 8f6f 	isb	sy
	{
 8000a38:	e7d1      	b.n	80009de <taskPC0+0x6>
 8000a3a:	bf00      	nop
 8000a3c:	20000130 	.word	0x20000130
 8000a40:	080072a8 	.word	0x080072a8
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	e000ed04 	.word	0xe000ed04

08000a4c <taskPC1>:
	}
}
void taskPC1(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xEventGroupWaitBits(CreatedEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <taskPC1+0x64>)
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2102      	movs	r1, #2
 8000a62:	f003 fa1f 	bl	8003ea4 <xEventGroupWaitBits>
		char message[] = {"taskPC1\r\n"};
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <taskPC1+0x68>)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6c:	c303      	stmia	r3!, {r0, r1}
 8000a6e:	801a      	strh	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(500));
 8000a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a74:	f004 fc0a 	bl	800528c <vTaskDelay>
		for(int i = 0; i<sizeof(message); i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e00b      	b.n	8000a96 <taskPC1+0x4a>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <taskPC1+0x6c>)
 8000a80:	6958      	ldr	r0, [r3, #20]
 8000a82:	463a      	mov	r2, r7
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	18d1      	adds	r1, r2, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f003 fd3a 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d9f0      	bls.n	8000a7e <taskPC1+0x32>
		}
		taskYIELD();
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <taskPC1+0x70>)
 8000a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	f3bf 8f6f 	isb	sy
	{
 8000aac:	e7d1      	b.n	8000a52 <taskPC1+0x6>
 8000aae:	bf00      	nop
 8000ab0:	20000130 	.word	0x20000130
 8000ab4:	080072b4 	.word	0x080072b4
 8000ab8:	2000010c 	.word	0x2000010c
 8000abc:	e000ed04 	.word	0xe000ed04

08000ac0 <taskPC3>:
	}
}
void taskPC3(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
	for( ;; )
	{
		xEventGroupWaitBits(CreatedEventGroup1, 0x3, pdTRUE, pdTRUE, portMAX_DELAY);
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <taskPC3+0x64>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	f003 f9e5 	bl	8003ea4 <xEventGroupWaitBits>
		char message[] = {"taskPC3\r\n"};
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <taskPC3+0x68>)
 8000adc:	463b      	mov	r3, r7
 8000ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae0:	c303      	stmia	r3!, {r0, r1}
 8000ae2:	801a      	strh	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(500));
 8000ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae8:	f004 fbd0 	bl	800528c <vTaskDelay>
		for(int i = 0; i<sizeof(message); i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00b      	b.n	8000b0a <taskPC3+0x4a>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <taskPC3+0x6c>)
 8000af4:	6958      	ldr	r0, [r3, #20]
 8000af6:	463a      	mov	r2, r7
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	18d1      	adds	r1, r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	2201      	movs	r2, #1
 8000b00:	f003 fd00 	bl	8004504 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b09      	cmp	r3, #9
 8000b0e:	d9f0      	bls.n	8000af2 <taskPC3+0x32>
		}
		taskYIELD();
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <taskPC3+0x70>)
 8000b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	f3bf 8f4f 	dsb	sy
 8000b1c:	f3bf 8f6f 	isb	sy
	{
 8000b20:	e7d1      	b.n	8000ac6 <taskPC3+0x6>
 8000b22:	bf00      	nop
 8000b24:	20000130 	.word	0x20000130
 8000b28:	080072c0 	.word	0x080072c0
 8000b2c:	2000010c 	.word	0x2000010c
 8000b30:	e000ed04 	.word	0xe000ed04

08000b34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f003 f986 	bl	8003e4e <osDelay>
 8000b42:	e7fb      	b.n	8000b3c <StartDefaultTask+0x8>

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 f9a1 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b66:	b672      	cpsid	i
}
 8000b68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 fa4f 	bl	800104c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d128      	bne.n	8000c30 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfc:	2312      	movs	r3, #18
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000c14:	f000 fa44 	bl	80010a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	61d3      	str	r3, [r2, #28]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_I2C_MspInit+0x80>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d127      	bne.n	8000cb6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c96:	2330      	movs	r3, #48	; 0x30
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x84>)
 8000cb2:	f000 f9f5 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	201c      	movs	r0, #28
 8000ce2:	f000 f9b3 	bl	800104c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 f9cc 	bl	8001084 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_InitTick+0xa4>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_InitTick+0xa4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	61d3      	str	r3, [r2, #28]
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_InitTick+0xa4>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d04:	f107 0210 	add.w	r2, r7, #16
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ff1c 	bl	8002b4c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d14:	f001 fed6 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_InitTick+0xa8>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0xac>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_InitTick+0xac>)
 8000d36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_InitTick+0xac>)
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d40:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_InitTick+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_InitTick+0xac>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000d4e:	480a      	ldr	r0, [pc, #40]	; (8000d78 <HAL_InitTick+0xac>)
 8000d50:	f002 f8c0 	bl	8002ed4 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d104      	bne.n	8000d64 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <HAL_InitTick+0xac>)
 8000d5c:	f002 f91c 	bl	8002f98 <HAL_TIM_Base_Start_IT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	e000      	b.n	8000d66 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	20000134 	.word	0x20000134

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 fb1b 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f000 fb14 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f000 fb0d 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM2_IRQHandler+0x10>)
 8000dda:	f002 f931 	bl	8003040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000134 	.word	0x20000134

08000de8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df0:	f000 fafa 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 f997 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff f9c9 	bl	80001e4 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e54:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e60:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8000e64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e68:	2000174c 	.word	0x2000174c

08000e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8d8 	bl	8001036 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff ff20 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe6e 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000180 	.word	0x20000180

08000ec4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000180 	.word	0x20000180

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff4c 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105e:	f7ff ff61 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 8001062:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f7ff ffb1 	bl	8000fd0 <NVIC_EncodePriority>
 800106e:	4602      	mov	r2, r0
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff80 	bl	8000f7c <__NVIC_SetPriority>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff54 	bl	8000f40 <__NVIC_EnableIRQ>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e14e      	b.n	800134e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8140 	beq.w	8001348 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <HAL_GPIO_Init+0x40>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b03      	cmp	r3, #3
 800114c:	d017      	beq.n	800117e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	6939      	ldr	r1, [r7, #16]
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0203 	and.w	r2, r3, #3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 809a 	beq.w	8001348 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b55      	ldr	r3, [pc, #340]	; (800136c <HAL_GPIO_Init+0x2cc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a54      	ldr	r2, [pc, #336]	; (800136c <HAL_GPIO_Init+0x2cc>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b52      	ldr	r3, [pc, #328]	; (800136c <HAL_GPIO_Init+0x2cc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1e0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2d4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1dc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a45      	ldr	r2, [pc, #276]	; (8001378 <HAL_GPIO_Init+0x2d8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1d8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a44      	ldr	r2, [pc, #272]	; (800137c <HAL_GPIO_Init+0x2dc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1d4>
 8001270:	2303      	movs	r3, #3
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001274:	2305      	movs	r3, #5
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001280:	2300      	movs	r3, #0
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001292:	4937      	ldr	r1, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ee:	4a24      	ldr	r2, [pc, #144]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f aea9 	bne.w	80010b0 <HAL_GPIO_Init+0x10>
  }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000
 8001374:	48000400 	.word	0x48000400
 8001378:	48000800 	.word	0x48000800
 800137c:	48000c00 	.word	0x48000c00
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43d9      	mvns	r1, r3
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	400b      	ands	r3, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fa04 	bl	8000814 <HAL_GPIO_EXTI_Callback>
  }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e081      	b.n	800152e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fbbc 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	e006      	b.n	80014a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800149e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d104      	bne.n	80014b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69d9      	ldr	r1, [r3, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b20      	cmp	r3, #32
 800154a:	d138      	bne.n	80015be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001556:	2302      	movs	r3, #2
 8001558:	e032      	b.n	80015c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2224      	movs	r2, #36	; 0x24
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001588:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015be:	2302      	movs	r3, #2
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d139      	bne.n	8001656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e033      	b.n	8001658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	; 0x24
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
  }
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800166a:	af00      	add	r7, sp, #0
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001674:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f001 b823 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 817d 	beq.w	800199a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016a0:	4bbc      	ldr	r3, [pc, #752]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4bb9      	ldr	r3, [pc, #740]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d15c      	bne.n	8001772 <HAL_RCC_OscConfig+0x10e>
 80016b8:	4bb6      	ldr	r3, [pc, #728]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d155      	bne.n	8001772 <HAL_RCC_OscConfig+0x10e>
 80016c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x94>
 80016f2:	4ba8      	ldr	r3, [pc, #672]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e015      	b.n	8001724 <HAL_RCC_OscConfig+0xc0>
 80016f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800170c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001710:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001714:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001720:	4b9c      	ldr	r3, [pc, #624]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001728:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800172c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001738:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 811f 	beq.w	8001998 <HAL_RCC_OscConfig+0x334>
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8116 	bne.w	8001998 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f000 bfaf 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x12e>
 8001784:	4b83      	ldr	r3, [pc, #524]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a82      	ldr	r2, [pc, #520]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e036      	b.n	8001800 <HAL_RCC_OscConfig+0x19c>
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x158>
 80017a2:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7b      	ldr	r2, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a78      	ldr	r2, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e021      	b.n	8001800 <HAL_RCC_OscConfig+0x19c>
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x184>
 80017ce:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a70      	ldr	r2, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6d      	ldr	r2, [pc, #436]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x19c>
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a69      	ldr	r2, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a66      	ldr	r2, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001800:	4b64      	ldr	r3, [pc, #400]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	f023 020f 	bic.w	r2, r3, #15
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	495f      	ldr	r1, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 8001816:	4313      	orrs	r3, r2
 8001818:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d059      	beq.n	80018de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb4b 	bl	8000ec4 <HAL_GetTick>
 800182e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fb46 	bl	8000ec4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d902      	bls.n	800184a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	f000 bf43 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 800184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800185e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <HAL_RCC_OscConfig+0x218>
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	e015      	b.n	80018a8 <HAL_RCC_OscConfig+0x244>
 800187c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001880:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001894:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001898:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018b4:	fa92 f2a2 	rbit	r2, r2
 80018b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0220 	orr.w	r2, r2, #32
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ab      	beq.n	8001834 <HAL_RCC_OscConfig+0x1d0>
 80018dc:	e05d      	b.n	800199a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff faf1 	bl	8000ec4 <HAL_GetTick>
 80018e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff faec 	bl	8000ec4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d902      	bls.n	80018fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f000 bee9 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001912:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x2cc>
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0x2f8>
 8001930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001934:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001948:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800194c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_RCC_OscConfig+0x330>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001960:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001964:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001970:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ab      	bne.n	80018e8 <HAL_RCC_OscConfig+0x284>
 8001990:	e003      	b.n	800199a <HAL_RCC_OscConfig+0x336>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 817d 	beq.w	8001caa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019b0:	4ba6      	ldr	r3, [pc, #664]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019bc:	4ba3      	ldr	r3, [pc, #652]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d172      	bne.n	8001aae <HAL_RCC_OscConfig+0x44a>
 80019c8:	4ba0      	ldr	r3, [pc, #640]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d16c      	bne.n	8001aae <HAL_RCC_OscConfig+0x44a>
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3a0>
 80019fe:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e013      	b.n	8001a2c <HAL_RCC_OscConfig+0x3c8>
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a28:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a36:	fa92 f2a2 	rbit	r2, r2
 8001a3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0220 	orr.w	r2, r2, #32
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x410>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f000 be2e 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	21f8      	movs	r1, #248	; 0xf8
 8001a8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a92:	fa91 f1a1 	rbit	r1, r1
 8001a96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a9e:	fab1 f181 	clz	r1, r1
 8001aa2:	b2c9      	uxtb	r1, r1
 8001aa4:	408b      	lsls	r3, r1
 8001aa6:	4969      	ldr	r1, [pc, #420]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	e0fd      	b.n	8001caa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8088 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x56c>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ad2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2301      	movs	r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f9ea 	bl	8000ec4 <HAL_GetTick>
 8001af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f9e5 	bl	8000ec4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d902      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	f000 bde2 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e013      	b.n	8001b64 <HAL_RCC_OscConfig+0x500>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0af      	beq.n	8001af6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	21f8      	movs	r1, #248	; 0xf8
 8001bac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bb4:	fa91 f1a1 	rbit	r1, r1
 8001bb8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bbc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bc0:	fab1 f181 	clz	r1, r1
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	408b      	lsls	r3, r1
 8001bc8:	4920      	ldr	r1, [pc, #128]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	e06c      	b.n	8001caa <HAL_RCC_OscConfig+0x646>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f962 	bl	8000ec4 <HAL_GetTick>
 8001c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff f95d 	bl	8000ec4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d902      	bls.n	8001c1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f000 bd5a 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d104      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5ec>
 8001c46:	4b01      	ldr	r3, [pc, #4]	; (8001c4c <HAL_RCC_OscConfig+0x5e8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e015      	b.n	8001c78 <HAL_RCC_OscConfig+0x614>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c74:	4bc8      	ldr	r3, [pc, #800]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c82:	fa92 f2a2 	rbit	r2, r2
 8001c86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f042 0220 	orr.w	r2, r2, #32
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f002 021f 	and.w	r2, r2, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ad      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8110 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d079      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x760>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	4bab      	ldr	r3, [pc, #684]	; (8001f9c <HAL_RCC_OscConfig+0x938>)
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f8e3 	bl	8000ec4 <HAL_GetTick>
 8001cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff f8de 	bl	8000ec4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d902      	bls.n	8001d1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f000 bcdb 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d34:	2202      	movs	r2, #2
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d58:	2202      	movs	r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d80:	2102      	movs	r1, #2
 8001d82:	6019      	str	r1, [r3, #0]
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f1a3 	rbit	r1, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d9a:	6019      	str	r1, [r3, #0]
  return result;
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0a0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x6a0>
 8001dc2:	e08d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x87c>
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001de6:	601a      	str	r2, [r3, #0]
  return result;
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001df0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCC_OscConfig+0x938>)
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	461a      	mov	r2, r3
 8001e02:	2300      	movs	r3, #0
 8001e04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f85d 	bl	8000ec4 <HAL_GetTick>
 8001e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff f858 	bl	8000ec4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d902      	bls.n	8001e26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f000 bc55 	b.w	80026d0 <HAL_RCC_OscConfig+0x106c>
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e2e:	2202      	movs	r2, #2
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e52:	2202      	movs	r2, #2
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	6019      	str	r1, [r3, #0]
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f1a3 	rbit	r1, r3
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eb8:	6019      	str	r1, [r3, #0]
  return result;
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d197      	bne.n	8001e10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 81a1 	beq.w	8002238 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d116      	bne.n	8001f36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	61d3      	str	r3, [r2, #28]
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_OscConfig+0x93c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x93c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_RCC_OscConfig+0x93c>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe ffb9 	bl	8000ec4 <HAL_GetTick>
 8001f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	e009      	b.n	8001f6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe ffb4 	bl	8000ec4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e3b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_OscConfig+0x93c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10d      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x940>
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a02      	ldr	r2, [pc, #8]	; (8001f98 <HAL_RCC_OscConfig+0x934>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e03c      	b.n	8002010 <HAL_RCC_OscConfig+0x9ac>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	10908120 	.word	0x10908120
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x96a>
 8001fb4:	4bc1      	ldr	r3, [pc, #772]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4ac0      	ldr	r2, [pc, #768]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	4bbe      	ldr	r3, [pc, #760]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4abd      	ldr	r2, [pc, #756]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_OscConfig+0x9ac>
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x994>
 8001fde:	4bb7      	ldr	r3, [pc, #732]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4ab6      	ldr	r2, [pc, #728]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4bb4      	ldr	r3, [pc, #720]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4ab3      	ldr	r2, [pc, #716]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x9ac>
 8001ff8:	4bb0      	ldr	r3, [pc, #704]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4aaf      	ldr	r2, [pc, #700]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	4bad      	ldr	r3, [pc, #692]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4aac      	ldr	r2, [pc, #688]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8081 	beq.w	8002124 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe ff4f 	bl	8000ec4 <HAL_GetTick>
 8002026:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe ff4a 	bl	8000ec4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e345      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800204c:	2202      	movs	r2, #2
 800204e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800208a:	601a      	str	r2, [r3, #0]
  return result;
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002094:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0xa4c>
 80020aa:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0xa74>
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b79      	ldr	r3, [pc, #484]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020e0:	2102      	movs	r1, #2
 80020e2:	6011      	str	r1, [r2, #0]
 80020e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	fa92 f1a2 	rbit	r1, r2
 80020f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020fa:	6011      	str	r1, [r2, #0]
  return result;
 80020fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002100:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f002 021f 	and.w	r2, r2, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d084      	beq.n	800202c <HAL_RCC_OscConfig+0x9c8>
 8002122:	e07f      	b.n	8002224 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe fece 	bl	8000ec4 <HAL_GetTick>
 8002128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	e00b      	b.n	8002146 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fec9 	bl	8000ec4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e2c4      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800218c:	601a      	str	r2, [r3, #0]
  return result;
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002196:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0xb4e>
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0xb76>
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021e2:	2102      	movs	r1, #2
 80021e4:	6011      	str	r1, [r2, #0]
 80021e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fa92 f1a2 	rbit	r1, r2
 80021f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021fc:	6011      	str	r1, [r2, #0]
  return result;
 80021fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002202:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d184      	bne.n	800212e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002224:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8242 	beq.w	80026ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_RCC_OscConfig+0xc58>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	f000 8213 	beq.w	800267e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b02      	cmp	r3, #2
 8002266:	f040 8162 	bne.w	800252e <HAL_RCC_OscConfig+0xeca>
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800228e:	601a      	str	r2, [r3, #0]
  return result;
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002298:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	461a      	mov	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe08 	bl	8000ec4 <HAL_GetTick>
 80022b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e00c      	b.n	80022d4 <HAL_RCC_OscConfig+0xc70>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fe00 	bl	8000ec4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1fd      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0xcba>
 8002318:	4bb0      	ldr	r3, [pc, #704]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e027      	b.n	800236e <HAL_RCC_OscConfig+0xd0a>
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4b9c      	ldr	r3, [pc, #624]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002372:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002376:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237a:	6011      	str	r1, [r2, #0]
 800237c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002380:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	fa92 f1a2 	rbit	r1, r2
 800238a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002392:	6011      	str	r1, [r2, #0]
  return result;
 8002394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002398:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d182      	bne.n	80022c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	430b      	orrs	r3, r1
 80023dc:	497f      	ldr	r1, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002406:	601a      	str	r2, [r3, #0]
  return result;
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002410:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fd4c 	bl	8000ec4 <HAL_GetTick>
 800242c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e009      	b.n	8002446 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fd47 	bl	8000ec4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e144      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800244e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002474:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0xe2c>
 800248a:	4b54      	ldr	r3, [pc, #336]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	e027      	b.n	80024e0 <HAL_RCC_OscConfig+0xe7c>
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fa92 f1a2 	rbit	r1, r2
 80024fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002500:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002504:	6011      	str	r1, [r2, #0]
  return result;
 8002506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d082      	beq.n	8002432 <HAL_RCC_OscConfig+0xdce>
 800252c:	e0cf      	b.n	80026ce <HAL_RCC_OscConfig+0x106a>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002552:	601a      	str	r2, [r3, #0]
  return result;
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800255c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	461a      	mov	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fca6 	bl	8000ec4 <HAL_GetTick>
 8002578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	e009      	b.n	8002592 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fca1 	bl	8000ec4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e09e      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800259a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025b6:	601a      	str	r2, [r3, #0]
  return result;
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d104      	bne.n	80025e0 <HAL_RCC_OscConfig+0xf7c>
 80025d6:	4b01      	ldr	r3, [pc, #4]	; (80025dc <HAL_RCC_OscConfig+0xf78>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e029      	b.n	8002630 <HAL_RCC_OscConfig+0xfcc>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800260e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x1078>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002634:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800263c:	6011      	str	r1, [r2, #0]
 800263e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002642:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fa92 f1a2 	rbit	r1, r2
 800264c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002650:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002654:	6011      	str	r1, [r2, #0]
  return result;
 8002656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d180      	bne.n	800257e <HAL_RCC_OscConfig+0xf1a>
 800267c:	e027      	b.n	80026ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01e      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_OscConfig+0x1078>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800269a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800269e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b09e      	sub	sp, #120	; 0x78
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e162      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b90      	ldr	r3, [pc, #576]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d910      	bls.n	8002728 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b8d      	ldr	r3, [pc, #564]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0207 	bic.w	r2, r3, #7
 800270e:	498b      	ldr	r1, [pc, #556]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b89      	ldr	r3, [pc, #548]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e14a      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	497f      	ldr	r1, [pc, #508]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80dc 	beq.w	800290c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d13c      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xf6>
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_ClockConfig+0xa6>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e00f      	b.n	80027a6 <HAL_RCC_ClockConfig+0xc6>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	667b      	str	r3, [r7, #100]	; 0x64
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
 800279a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f002 021f 	and.w	r2, r2, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d17b      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0f3      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d13c      	bne.n	8002858 <HAL_RCC_ClockConfig+0x178>
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_RCC_ClockConfig+0x128>
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e00f      	b.n	8002828 <HAL_RCC_ClockConfig+0x148>
 8002808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	647b      	str	r3, [r7, #68]	; 0x44
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
 800281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	63ba      	str	r2, [r7, #56]	; 0x38
 800282e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d13a      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b2      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
 8002858:	2302      	movs	r3, #2
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1a0>
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e00d      	b.n	800289c <HAL_RCC_ClockConfig+0x1bc>
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	2302      	movs	r3, #2
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	61ba      	str	r2, [r7, #24]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	617a      	str	r2, [r7, #20]
  return result;
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e079      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	491a      	ldr	r1, [pc, #104]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe faf2 	bl	8000ec4 <HAL_GetTick>
 80028e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe faee 	bl	8000ec4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e061      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d214      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4906      	ldr	r1, [pc, #24]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e040      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	491a      	ldr	r1, [pc, #104]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4912      	ldr	r1, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002982:	f000 f829 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	22f0      	movs	r2, #240	; 0xf0
 8002992:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	60fa      	str	r2, [r7, #12]
  return result;
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	40d3      	lsrs	r3, r2
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x2ec>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	fa21 f303 	lsr.w	r3, r1, r3
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_RCC_ClockConfig+0x2f0>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x2f4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f988 	bl	8000ccc <HAL_InitTick>
  
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3778      	adds	r7, #120	; 0x78
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080072e4 	.word	0x080072e4
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	; 0x2c
 80029dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x30>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x36>
 8002a06:	e03c      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0a:	623b      	str	r3, [r7, #32]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	fa92 f2a2 	rbit	r2, r2
 8002a20:	607a      	str	r2, [r7, #4]
  return result;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	40d3      	lsrs	r3, r2
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	fa92 f2a2 	rbit	r2, r2
 8002a44:	60fa      	str	r2, [r7, #12]
  return result;
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	40d3      	lsrs	r3, r2
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e004      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	623b      	str	r3, [r7, #32]
      break;
 8002a80:	e002      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a84:	623b      	str	r3, [r7, #32]
      break;
 8002a86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	372c      	adds	r7, #44	; 0x2c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	080072fc 	.word	0x080072fc
 8002aa4:	0800730c 	.word	0x0800730c
 8002aa8:	003d0900 	.word	0x003d0900

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002aca:	f7ff ffef 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	603a      	str	r2, [r7, #0]
  return result;
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	40d3      	lsrs	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	080072f4 	.word	0x080072f4

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0e:	f7ff ffcd 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002b12:	4601      	mov	r1, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	603a      	str	r2, [r7, #0]
  return result;
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	40d3      	lsrs	r3, r2
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	080072f4 	.word	0x080072f4

08002b4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	220f      	movs	r2, #15
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetClockConfig+0x60>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b092      	sub	sp, #72	; 0x48
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d4 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
 8002bec:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe f955 	bl	8000ec4 <HAL_GetTick>
 8002c1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe f951 	bl	8000ec4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e14b      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8084 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d07c      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04b      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f901 	bl	8000ec4 <HAL_GetTick>
 8002cc2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f8fd 	bl	8000ec4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0f5      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	2302      	movs	r3, #2
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d108      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d0a:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	e00d      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	10908100 	.word	0x10908100
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b69      	ldr	r3, [pc, #420]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	613a      	str	r2, [r7, #16]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	fa92 f2a2 	rbit	r2, r2
 8002d36:	60fa      	str	r2, [r7, #12]
  return result;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0b7      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d56:	4b5e      	ldr	r3, [pc, #376]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	495b      	ldr	r1, [pc, #364]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a56      	ldr	r2, [pc, #344]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d88:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494e      	ldr	r1, [pc, #312]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da6:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f023 0210 	bic.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4947      	ldr	r1, [pc, #284]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dc4:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	493f      	ldr	r1, [pc, #252]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f023 0220 	bic.w	r2, r3, #32
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	4938      	ldr	r1, [pc, #224]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4930      	ldr	r1, [pc, #192]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4929      	ldr	r1, [pc, #164]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4921      	ldr	r1, [pc, #132]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	4912      	ldr	r1, [pc, #72]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	490b      	ldr	r1, [pc, #44]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3748      	adds	r7, #72	; 0x48
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e049      	b.n	8002f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f841 	bl	8002f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 f9dc 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d001      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e03b      	b.n	8003028 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x4e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x4e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d115      	bne.n	8003012 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_TIM_Base_Start_IT+0xa4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d015      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x8c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d011      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	e008      	b.n	8003024 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e000      	b.n	8003026 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	00010007 	.word	0x00010007

08003040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0202 	mvn.w	r2, #2
 800306c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f905 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8f7 	bl	800327e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f908 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0204 	mvn.w	r2, #4
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8db 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8cd 	bl	800327e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8de 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b08      	cmp	r3, #8
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0208 	mvn.w	r2, #8
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2204      	movs	r2, #4
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8b1 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8a3 	bl	800327e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8b4 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b10      	cmp	r3, #16
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b10      	cmp	r3, #16
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0210 	mvn.w	r2, #16
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2208      	movs	r2, #8
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f887 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f879 	bl	800327e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f88a 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0201 	mvn.w	r2, #1
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fcc0 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8e8 	bl	80033c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d10e      	bne.n	800321e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d107      	bne.n	800321e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f8db 	bl	80033d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d10e      	bne.n	800324a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d107      	bne.n	800324a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f838 	bl	80032ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d10e      	bne.n	8003276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b20      	cmp	r3, #32
 8003264:	d107      	bne.n	8003276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f06f 0220 	mvn.w	r2, #32
 800326e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f89b 	bl	80033ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	; (800339c <TIM_Base_SetConfig+0xcc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0x20>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d108      	bne.n	8003302 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0xcc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <TIM_Base_SetConfig+0x5a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d00b      	beq.n	800332a <TIM_Base_SetConfig+0x5a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <TIM_Base_SetConfig+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_Base_SetConfig+0x5a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <TIM_Base_SetConfig+0xd4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0x5a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <TIM_Base_SetConfig+0xd8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0e      	ldr	r2, [pc, #56]	; (800339c <TIM_Base_SetConfig+0xcc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <TIM_Base_SetConfig+0xd0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <TIM_Base_SetConfig+0xd4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <TIM_Base_SetConfig+0xd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800

080033ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fc1a 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f980 	bl	800372c <UART_SetConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 faaa 	bl	8003998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb31 	bl	8003adc <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	2b20      	cmp	r3, #32
 800349a:	d178      	bne.n	800358e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e071      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fd03 	bl	8000ec4 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x68>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f4:	e030      	b.n	8003558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fb93 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03c      	b.n	8003590 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	b292      	uxth	r2, r2
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3302      	adds	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e008      	b.n	8003546 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b292      	uxth	r2, r2
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c8      	bne.n	80034f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb5c 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e005      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	f040 80b6 	bne.w	8003720 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Receive+0x28>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0ae      	b.n	8003722 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2222      	movs	r2, #34	; 0x22
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035da:	f7fd fc73 	bl	8000ec4 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d10e      	bne.n	8003618 <HAL_UART_Receive+0x80>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_UART_Receive+0x76>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800360c:	e02d      	b.n	800366a <HAL_UART_Receive+0xd2>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003616:	e028      	b.n	800366a <HAL_UART_Receive+0xd2>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_UART_Receive+0xa4>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_UART_Receive+0x9a>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003630:	e01b      	b.n	800366a <HAL_UART_Receive+0xd2>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	227f      	movs	r2, #127	; 0x7f
 8003636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800363a:	e016      	b.n	800366a <HAL_UART_Receive+0xd2>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003644:	d10d      	bne.n	8003662 <HAL_UART_Receive+0xca>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Receive+0xc0>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	227f      	movs	r2, #127	; 0x7f
 8003652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003656:	e008      	b.n	800366a <HAL_UART_Receive+0xd2>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	223f      	movs	r2, #63	; 0x3f
 800365c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003660:	e003      	b.n	800366a <HAL_UART_Receive+0xd2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003670:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d108      	bne.n	800368e <HAL_UART_Receive+0xf6>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e003      	b.n	8003696 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003696:	e037      	b.n	8003708 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	2120      	movs	r1, #32
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fac2 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e033      	b.n	8003722 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10c      	bne.n	80036da <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	8a7b      	ldrh	r3, [r7, #18]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3302      	adds	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e00d      	b.n	80036f6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4013      	ands	r3, r2
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1c1      	bne.n	8003698 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b8a      	ldr	r3, [pc, #552]	; (8003980 <UART_SetConfig+0x254>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a78      	ldr	r2, [pc, #480]	; (8003984 <UART_SetConfig+0x258>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <UART_SetConfig+0xbe>
 80037a8:	4b77      	ldr	r3, [pc, #476]	; (8003988 <UART_SetConfig+0x25c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d817      	bhi.n	80037e4 <UART_SetConfig+0xb8>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x90>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037df 	.word	0x080037df
 80037c8:	080037d3 	.word	0x080037d3
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e01d      	b.n	800380e <UART_SetConfig+0xe2>
 80037d2:	2302      	movs	r3, #2
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e01a      	b.n	800380e <UART_SetConfig+0xe2>
 80037d8:	2304      	movs	r3, #4
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e017      	b.n	800380e <UART_SetConfig+0xe2>
 80037de:	2308      	movs	r3, #8
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e014      	b.n	800380e <UART_SetConfig+0xe2>
 80037e4:	2310      	movs	r3, #16
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e011      	b.n	800380e <UART_SetConfig+0xe2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a67      	ldr	r2, [pc, #412]	; (800398c <UART_SetConfig+0x260>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d102      	bne.n	80037fa <UART_SetConfig+0xce>
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e009      	b.n	800380e <UART_SetConfig+0xe2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a64      	ldr	r2, [pc, #400]	; (8003990 <UART_SetConfig+0x264>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d102      	bne.n	800380a <UART_SetConfig+0xde>
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e001      	b.n	800380e <UART_SetConfig+0xe2>
 800380a:	2310      	movs	r3, #16
 800380c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003816:	d15a      	bne.n	80038ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	2b08      	cmp	r3, #8
 800381c:	d827      	bhi.n	800386e <UART_SetConfig+0x142>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <UART_SetConfig+0xf8>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003849 	.word	0x08003849
 8003828:	08003851 	.word	0x08003851
 800382c:	08003859 	.word	0x08003859
 8003830:	0800386f 	.word	0x0800386f
 8003834:	0800385f 	.word	0x0800385f
 8003838:	0800386f 	.word	0x0800386f
 800383c:	0800386f 	.word	0x0800386f
 8003840:	0800386f 	.word	0x0800386f
 8003844:	08003867 	.word	0x08003867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003848:	f7ff f93c 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800384c:	61b8      	str	r0, [r7, #24]
        break;
 800384e:	e013      	b.n	8003878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003850:	f7ff f95a 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003854:	61b8      	str	r0, [r7, #24]
        break;
 8003856:	e00f      	b.n	8003878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003858:	4b4e      	ldr	r3, [pc, #312]	; (8003994 <UART_SetConfig+0x268>)
 800385a:	61bb      	str	r3, [r7, #24]
        break;
 800385c:	e00c      	b.n	8003878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385e:	f7ff f8bb 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003862:	61b8      	str	r0, [r7, #24]
        break;
 8003864:	e008      	b.n	8003878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386a:	61bb      	str	r3, [r7, #24]
        break;
 800386c:	e004      	b.n	8003878 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	77bb      	strb	r3, [r7, #30]
        break;
 8003876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d074      	beq.n	8003968 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	005a      	lsls	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	d916      	bls.n	80038c8 <UART_SetConfig+0x19c>
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d212      	bcs.n	80038c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f023 030f 	bic.w	r3, r3, #15
 80038aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	89fa      	ldrh	r2, [r7, #14]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	e04f      	b.n	8003968 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77bb      	strb	r3, [r7, #30]
 80038cc:	e04c      	b.n	8003968 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d828      	bhi.n	8003926 <UART_SetConfig+0x1fa>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_SetConfig+0x1b0>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003909 	.word	0x08003909
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003927 	.word	0x08003927
 80038ec:	08003917 	.word	0x08003917
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003927 	.word	0x08003927
 80038f8:	08003927 	.word	0x08003927
 80038fc:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7ff f8e0 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003904:	61b8      	str	r0, [r7, #24]
        break;
 8003906:	e013      	b.n	8003930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7ff f8fe 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 800390c:	61b8      	str	r0, [r7, #24]
        break;
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <UART_SetConfig+0x268>)
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e00c      	b.n	8003930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7ff f85f 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 800391a:	61b8      	str	r0, [r7, #24]
        break;
 800391c:	e008      	b.n	8003930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	61bb      	str	r3, [r7, #24]
        break;
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77bb      	strb	r3, [r7, #30]
        break;
 800392e:	bf00      	nop
    }

    if (pclk != 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d018      	beq.n	8003968 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085a      	lsrs	r2, r3, #1
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d909      	bls.n	8003964 <UART_SetConfig+0x238>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d205      	bcs.n	8003964 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e001      	b.n	8003968 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003974:	7fbb      	ldrb	r3, [r7, #30]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	efff69f3 	.word	0xefff69f3
 8003984:	40013800 	.word	0x40013800
 8003988:	40021000 	.word	0x40021000
 800398c:	40004400 	.word	0x40004400
 8003990:	40004800 	.word	0x40004800
 8003994:	007a1200 	.word	0x007a1200

08003998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01a      	beq.n	8003aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a96:	d10a      	bne.n	8003aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b098      	sub	sp, #96	; 0x60
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aec:	f7fd f9ea 	bl	8000ec4 <HAL_GetTick>
 8003af0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d12e      	bne.n	8003b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f88c 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d021      	beq.n	8003b5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e6      	bne.n	8003b1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e062      	b.n	8003c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d149      	bne.n	8003c00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f856 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d03c      	beq.n	8003c00 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	623b      	str	r3, [r7, #32]
   return(result);
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd8:	61fa      	str	r2, [r7, #28]
 8003bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	617b      	str	r3, [r7, #20]
   return(result);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e011      	b.n	8003c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3758      	adds	r7, #88	; 0x58
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3c:	e049      	b.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d045      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7fd f93d 	bl	8000ec4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e048      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d031      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d110      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2208      	movs	r2, #8
 8003c82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f838 	bl	8003cfa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e029      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cac:	d111      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f81e 	bl	8003cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e00f      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d0a6      	beq.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b095      	sub	sp, #84	; 0x54
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d20:	643b      	str	r3, [r7, #64]	; 0x40
 8003d22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d118      	bne.n	8003da2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f023 0310 	bic.w	r3, r3, #16
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6979      	ldr	r1, [r7, #20]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003db6:	bf00      	nop
 8003db8:	3754      	adds	r7, #84	; 0x54
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd4:	2b84      	cmp	r3, #132	; 0x84
 8003dd6:	d005      	beq.n	8003de4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003dd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	3303      	adds	r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003de4:	68fb      	ldr	r3, [r7, #12]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003df6:	f001 fa7d 	bl	80052f4 <vTaskStartScheduler>
  
  return osOK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685c      	ldr	r4, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e16:	b29e      	uxth	r6, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ffcf 	bl	8003dc2 <makeFreeRtosPriority>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	9200      	str	r2, [sp, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4632      	mov	r2, r6
 8003e32:	4629      	mov	r1, r5
 8003e34:	4620      	mov	r0, r4
 8003e36:	f001 f8fb 	bl	8005030 <xTaskCreate>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <osDelay+0x16>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e000      	b.n	8003e66 <osDelay+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fa10 	bl	800528c <vTaskDelay>
  
  return osOK;
 8003e6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003e7c:	2018      	movs	r0, #24
 8003e7e:	f002 ffa3 	bl	8006dc8 <pvPortMalloc>
 8003e82:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f98d 	bl	80041b4 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003e9a:	687b      	ldr	r3, [r7, #4]
	}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b090      	sub	sp, #64	; 0x40
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <xEventGroupWaitBits+0x56>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	61fb      	str	r3, [r7, #28]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	61bb      	str	r3, [r7, #24]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f16:	f001 ff0d 	bl	8005d34 <xTaskGetSchedulerState>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <xEventGroupWaitBits+0x82>
 8003f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <xEventGroupWaitBits+0x86>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <xEventGroupWaitBits+0x88>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	617b      	str	r3, [r7, #20]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003f46:	f001 fa23 	bl	8005390 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f56:	f000 f90b 	bl	8004170 <prvTestWaitCondition>
 8003f5a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00e      	beq.n	8003f80 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d028      	beq.n	8003fc2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	401a      	ands	r2, r3
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e020      	b.n	8003fc2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	e018      	b.n	8003fc2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	1d18      	adds	r0, r3, #4
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f001 fc23 	bl	8005804 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003fc2:	f001 fa2d 	bl	8005420 <xTaskResumeAll>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d031      	beq.n	8004032 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <xEventGroupWaitBits+0x198>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003fe4:	f002 f870 	bl	80060c8 <uxTaskResetEventItemValue>
 8003fe8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11a      	bne.n	800402a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003ff4:	f002 fdc6 	bl	8006b84 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004004:	f000 f8b4 	bl	8004170 <prvTestWaitCondition>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	43db      	mvns	r3, r3
 800401c:	401a      	ands	r2, r3
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004026:	f002 fddd 	bl	8006be4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004034:	4618      	mov	r0, r3
 8004036:	3740      	adds	r7, #64	; 0x40
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <xEventGroupSetBits+0x32>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <xEventGroupSetBits+0x52>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	60fb      	str	r3, [r7, #12]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	3304      	adds	r3, #4
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	3308      	adds	r3, #8
 800409c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800409e:	f001 f977 	bl	8005390 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80040b4:	e03c      	b.n	8004130 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80040d4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d108      	bne.n	80040f2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f0:	e008      	b.n	8004104 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d101      	bne.n	8004104 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004124:	4619      	mov	r1, r3
 8004126:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004128:	f001 fc38 	bl	800599c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	429a      	cmp	r2, r3
 8004136:	d1be      	bne.n	80040b6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	43db      	mvns	r3, r3
 8004140:	401a      	ands	r2, r3
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004146:	f001 f96b 	bl	8005420 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	681b      	ldr	r3, [r3, #0]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3738      	adds	r7, #56	; 0x38
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff6c 	bl	8004040 <xEventGroupSetBits>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e007      	b.n	80041a6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d101      	bne.n	80041a6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80041a6:	697b      	ldr	r3, [r7, #20]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 0208 	add.w	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d103      	bne.n	8004276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00c      	b.n	8004290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3308      	adds	r3, #8
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e002      	b.n	8004284 <vListInsert+0x2e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d2f6      	bcs.n	800427e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d103      	bne.n	80042fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xQueueGenericReset+0x2a>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60bb      	str	r3, [r7, #8]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004346:	f002 fc1d 	bl	8006b84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	3b01      	subs	r3, #1
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d114      	bne.n	80043c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01a      	beq.n	80043da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3310      	adds	r3, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fa93 	bl	80058d4 <xTaskRemoveFromEventList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xQueueGenericReset+0xcc>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	e009      	b.n	80043da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3310      	adds	r3, #16
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fef2 	bl	80041b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff feed 	bl	80041b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043da:	f002 fc03 	bl	8006be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e004      	b.n	800442c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3348      	adds	r3, #72	; 0x48
 8004430:	4618      	mov	r0, r3
 8004432:	f002 fcc9 	bl	8006dc8 <pvPortMalloc>
 8004436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3348      	adds	r3, #72	; 0x48
 8004442:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004444:	79fa      	ldrb	r2, [r7, #7]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f805 	bl	8004460 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004456:	69bb      	ldr	r3, [r7, #24]
	}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e002      	b.n	8004482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800448e:	2101      	movs	r1, #1
 8004490:	69b8      	ldr	r0, [r7, #24]
 8004492:	f7ff ff43 	bl	800431c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	613b      	str	r3, [r7, #16]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d90a      	bls.n	80044e2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	60fb      	str	r3, [r7, #12]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80044e2:	2202      	movs	r2, #2
 80044e4:	2100      	movs	r1, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff80 	bl	80043ec <xQueueGenericCreate>
 80044ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80044fa:	697b      	ldr	r3, [r7, #20]
	}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	; 0x38
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueGenericSend+0x32>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <xQueueGenericSend+0x40>
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xQueueGenericSend+0x44>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xQueueGenericSend+0x46>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <xQueueGenericSend+0x60>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d103      	bne.n	8004572 <xQueueGenericSend+0x6e>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <xQueueGenericSend+0x72>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <xQueueGenericSend+0x74>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericSend+0x8e>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	623b      	str	r3, [r7, #32]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004592:	f001 fbcf 	bl	8005d34 <xTaskGetSchedulerState>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <xQueueGenericSend+0x9e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <xQueueGenericSend+0xa2>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueGenericSend+0xa4>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61fb      	str	r3, [r7, #28]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c2:	f002 fadf 	bl	8006b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <xQueueGenericSend+0xd4>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d129      	bne.n	800462c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045de:	f000 fbb9 	bl	8004d54 <prvCopyDataToQueue>
 80045e2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f96f 	bl	80058d4 <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045fc:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <xQueueGenericSend+0x1f8>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	e00a      	b.n	8004624 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <xQueueGenericSend+0x1f8>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004624:	f002 fade 	bl	8006be4 <vPortExitCritical>
				return pdPASS;
 8004628:	2301      	movs	r3, #1
 800462a:	e063      	b.n	80046f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004632:	f002 fad7 	bl	8006be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004636:	2300      	movs	r3, #0
 8004638:	e05c      	b.n	80046f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004640:	f107 0314 	add.w	r3, r7, #20
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fa0b 	bl	8005a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800464e:	f002 fac9 	bl	8006be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004652:	f000 fe9d 	bl	8005390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004656:	f002 fa95 	bl	8006b84 <vPortEnterCritical>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004660:	b25b      	sxtb	r3, r3
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d103      	bne.n	8004670 <xQueueGenericSend+0x16c>
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004676:	b25b      	sxtb	r3, r3
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d103      	bne.n	8004686 <xQueueGenericSend+0x182>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004686:	f002 faad 	bl	8006be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800468a:	1d3a      	adds	r2, r7, #4
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f9fa 	bl	8005a8c <xTaskCheckForTimeOut>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d124      	bne.n	80046e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800469e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a0:	f000 fc50 	bl	8004f44 <prvIsQueueFull>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	3310      	adds	r3, #16
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f882 	bl	80057bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ba:	f000 fbdb 	bl	8004e74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046be:	f000 feaf 	bl	8005420 <xTaskResumeAll>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f af7c 	bne.w	80045c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <xQueueGenericSend+0x1f8>)
 80046cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	e772      	b.n	80045c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 fbc9 	bl	8004e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e2:	f000 fe9d 	bl	8005420 <xTaskResumeAll>
 80046e6:	e76c      	b.n	80045c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ea:	f000 fbc3 	bl	8004e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ee:	f000 fe97 	bl	8005420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046f2:	2300      	movs	r3, #0
		}
	}
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3738      	adds	r7, #56	; 0x38
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <xQueueGenericSendFromISR+0x3c>
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <xQueueGenericSendFromISR+0x40>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <xQueueGenericSendFromISR+0x42>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	623b      	str	r3, [r7, #32]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d103      	bne.n	800476a <xQueueGenericSendFromISR+0x6a>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <xQueueGenericSendFromISR+0x6e>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericSendFromISR+0x70>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	61fb      	str	r3, [r7, #28]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800478a:	f002 fadd 	bl	8006d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800478e:	f3ef 8211 	mrs	r2, BASEPRI
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61ba      	str	r2, [r7, #24]
 80047a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <xQueueGenericSendFromISR+0xbc>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d12c      	bne.n	8004816 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047cc:	f000 fac2 	bl	8004d54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d112      	bne.n	8004800 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	3324      	adds	r3, #36	; 0x24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f874 	bl	80058d4 <xTaskRemoveFromEventList>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e007      	b.n	8004810 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004804:	3301      	adds	r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	b25a      	sxtb	r2, r3
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004810:	2301      	movs	r3, #1
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004814:	e001      	b.n	800481a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004816:	2300      	movs	r3, #0
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004828:	4618      	mov	r0, r3
 800482a:	3738      	adds	r7, #56	; 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61fb      	str	r3, [r7, #28]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <xQueueGiveFromISR+0x58>
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <xQueueGiveFromISR+0x5c>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <xQueueGiveFromISR+0x5e>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61bb      	str	r3, [r7, #24]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048a8:	f002 fa4e 	bl	8006d48 <vPortValidateInterruptPriority>
	__asm volatile
 80048ac:	f3ef 8211 	mrs	r2, BASEPRI
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	617a      	str	r2, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d22b      	bcs.n	8004930 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d112      	bne.n	800491a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ffe7 	bl	80058d4 <xTaskRemoveFromEventList>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e007      	b.n	800492a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800491a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491e:	3301      	adds	r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	b25a      	sxtb	r2, r3
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800492a:	2301      	movs	r3, #1
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
 800492e:	e001      	b.n	8004934 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004930:	2300      	movs	r3, #0
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f383 8811 	msr	BASEPRI, r3
}
 800493e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004942:	4618      	mov	r0, r3
 8004944:	3738      	adds	r7, #56	; 0x38
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <xQueueReceive+0x30>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	623b      	str	r3, [r7, #32]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <xQueueReceive+0x3e>
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <xQueueReceive+0x42>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <xQueueReceive+0x44>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xQueueReceive+0x5e>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61fb      	str	r3, [r7, #28]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049aa:	f001 f9c3 	bl	8005d34 <xTaskGetSchedulerState>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <xQueueReceive+0x6e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <xQueueReceive+0x72>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueReceive+0x74>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueReceive+0x8e>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61bb      	str	r3, [r7, #24]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049da:	f002 f8d3 	bl	8006b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01f      	beq.n	8004a2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ee:	f000 fa1b 	bl	8004e28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00f      	beq.n	8004a22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	3310      	adds	r3, #16
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff64 	bl	80058d4 <xTaskRemoveFromEventList>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a12:	4b3d      	ldr	r3, [pc, #244]	; (8004b08 <xQueueReceive+0x1bc>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a22:	f002 f8df 	bl	8006be4 <vPortExitCritical>
				return pdPASS;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e069      	b.n	8004afe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a30:	f002 f8d8 	bl	8006be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e062      	b.n	8004afe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a3e:	f107 0310 	add.w	r3, r7, #16
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f80c 	bl	8005a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a4c:	f002 f8ca 	bl	8006be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a50:	f000 fc9e 	bl	8005390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a54:	f002 f896 	bl	8006b84 <vPortEnterCritical>
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d103      	bne.n	8004a6e <xQueueReceive+0x122>
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d103      	bne.n	8004a84 <xQueueReceive+0x138>
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	f002 f8ae 	bl	8006be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a88:	1d3a      	adds	r2, r7, #4
 8004a8a:	f107 0310 	add.w	r3, r7, #16
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fffb 	bl	8005a8c <xTaskCheckForTimeOut>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d123      	bne.n	8004ae4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9e:	f000 fa3b 	bl	8004f18 <prvIsQueueEmpty>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d017      	beq.n	8004ad8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fe83 	bl	80057bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab8:	f000 f9dc 	bl	8004e74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004abc:	f000 fcb0 	bl	8005420 <xTaskResumeAll>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d189      	bne.n	80049da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <xQueueReceive+0x1bc>)
 8004ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	e780      	b.n	80049da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ada:	f000 f9cb 	bl	8004e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ade:	f000 fc9f 	bl	8005420 <xTaskResumeAll>
 8004ae2:	e77a      	b.n	80049da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae6:	f000 f9c5 	bl	8004e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aea:	f000 fc99 	bl	8005420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af0:	f000 fa12 	bl	8004f18 <prvIsQueueEmpty>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f43f af6f 	beq.w	80049da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004afc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3730      	adds	r7, #48	; 0x30
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08e      	sub	sp, #56	; 0x38
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	623b      	str	r3, [r7, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5c:	f001 f8ea 	bl	8005d34 <xTaskGetSchedulerState>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <xQueueSemaphoreTake+0x60>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueSemaphoreTake+0x64>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <xQueueSemaphoreTake+0x66>
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	61bb      	str	r3, [r7, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8c:	f001 fffa 	bl	8006b84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d024      	beq.n	8004be6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004bac:	f001 faa4 	bl	80060f8 <pvTaskIncrementMutexHeldCount>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00f      	beq.n	8004bde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe86 	bl	80058d4 <xTaskRemoveFromEventList>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bce:	4b54      	ldr	r3, [pc, #336]	; (8004d20 <xQueueSemaphoreTake+0x214>)
 8004bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bde:	f002 f801 	bl	8006be4 <vPortExitCritical>
				return pdPASS;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e097      	b.n	8004d16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d111      	bne.n	8004c10 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	617b      	str	r3, [r7, #20]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c08:	f001 ffec 	bl	8006be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e082      	b.n	8004d16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c16:	f107 030c 	add.w	r3, r7, #12
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 ff20 	bl	8005a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c24:	f001 ffde 	bl	8006be4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c28:	f000 fbb2 	bl	8005390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c2c:	f001 ffaa 	bl	8006b84 <vPortEnterCritical>
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c36:	b25b      	sxtb	r3, r3
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d103      	bne.n	8004c46 <xQueueSemaphoreTake+0x13a>
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d103      	bne.n	8004c5c <xQueueSemaphoreTake+0x150>
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5c:	f001 ffc2 	bl	8006be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c60:	463a      	mov	r2, r7
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 ff0f 	bl	8005a8c <xTaskCheckForTimeOut>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d132      	bne.n	8004cda <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c76:	f000 f94f 	bl	8004f18 <prvIsQueueEmpty>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d026      	beq.n	8004cce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004c88:	f001 ff7c 	bl	8006b84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 f86d 	bl	8005d70 <xTaskPriorityInherit>
 8004c96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c98:	f001 ffa4 	bl	8006be4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd89 	bl	80057bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cac:	f000 f8e2 	bl	8004e74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cb0:	f000 fbb6 	bl	8005420 <xTaskResumeAll>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f47f af68 	bne.w	8004b8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <xQueueSemaphoreTake+0x214>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	e75e      	b.n	8004b8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cd0:	f000 f8d0 	bl	8004e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd4:	f000 fba4 	bl	8005420 <xTaskResumeAll>
 8004cd8:	e758      	b.n	8004b8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cdc:	f000 f8ca 	bl	8004e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce0:	f000 fb9e 	bl	8005420 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ce6:	f000 f917 	bl	8004f18 <prvIsQueueEmpty>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f43f af4d 	beq.w	8004b8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004cf8:	f001 ff44 	bl	8006b84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cfe:	f000 f811 	bl	8004d24 <prvGetDisinheritPriorityAfterTimeout>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 f93c 	bl	8005f88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d10:	f001 ff68 	bl	8006be4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3738      	adds	r7, #56	; 0x38
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1c3 0307 	rsb	r3, r3, #7
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e001      	b.n	8004d46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d46:	68fb      	ldr	r3, [r7, #12]
	}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d14d      	bne.n	8004e16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f87c 	bl	8005e7c <xTaskPriorityDisinherit>
 8004d84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	e043      	b.n	8004e16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d119      	bne.n	8004dc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6898      	ldr	r0, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	f002 fa10 	bl	80071c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	441a      	add	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d32b      	bcc.n	8004e16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	e026      	b.n	8004e16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68d8      	ldr	r0, [r3, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	f002 f9f6 	bl	80071c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	425b      	negs	r3, r3
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d207      	bcs.n	8004e04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d105      	bne.n	8004e16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e1e:	697b      	ldr	r3, [r7, #20]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	441a      	add	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d303      	bcc.n	8004e5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68d9      	ldr	r1, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	461a      	mov	r2, r3
 8004e66:	6838      	ldr	r0, [r7, #0]
 8004e68:	f002 f9ac 	bl	80071c4 <memcpy>
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e7c:	f001 fe82 	bl	8006b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e88:	e011      	b.n	8004eae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3324      	adds	r3, #36	; 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fd1c 	bl	80058d4 <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ea2:	f000 fe55 	bl	8005b50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	dce9      	bgt.n	8004e8a <prvUnlockQueue+0x16>
 8004eb6:	e000      	b.n	8004eba <prvUnlockQueue+0x46>
					break;
 8004eb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	22ff      	movs	r2, #255	; 0xff
 8004ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 fe8f 	bl	8006be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ec6:	f001 fe5d 	bl	8006b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	e011      	b.n	8004ef8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3310      	adds	r3, #16
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fcf7 	bl	80058d4 <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004eec:	f000 fe30 	bl	8005b50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dce9      	bgt.n	8004ed4 <prvUnlockQueue+0x60>
 8004f00:	e000      	b.n	8004f04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f0c:	f001 fe6a 	bl	8006be4 <vPortExitCritical>
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f20:	f001 fe30 	bl	8006b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e001      	b.n	8004f36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f36:	f001 fe55 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f4c:	f001 fe1a 	bl	8006b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d102      	bne.n	8004f62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e001      	b.n	8004f66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f66:	f001 fe3d 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e014      	b.n	8004fae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f84:	4a0f      	ldr	r2, [pc, #60]	; (8004fc4 <vQueueAddToRegistry+0x50>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <vQueueAddToRegistry+0x50>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <vQueueAddToRegistry+0x50>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fa6:	e006      	b.n	8004fb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	d9e7      	bls.n	8004f84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000184 	.word	0x20000184

08004fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fd8:	f001 fdd4 	bl	8006b84 <vPortEnterCritical>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <vQueueWaitForMessageRestricted+0x2a>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d103      	bne.n	8005008 <vQueueWaitForMessageRestricted+0x40>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005008:	f001 fdec 	bl	8006be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3324      	adds	r3, #36	; 0x24
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fc2d 	bl	800587c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff ff26 	bl	8004e74 <prvUnlockQueue>
	}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	; 0x30
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4618      	mov	r0, r3
 8005046:	f001 febf 	bl	8006dc8 <pvPortMalloc>
 800504a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00e      	beq.n	8005070 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005052:	2058      	movs	r0, #88	; 0x58
 8005054:	f001 feb8 	bl	8006dc8 <pvPortMalloc>
 8005058:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
 8005066:	e005      	b.n	8005074 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005068:	6978      	ldr	r0, [r7, #20]
 800506a:	f001 ff71 	bl	8006f50 <vPortFree>
 800506e:	e001      	b.n	8005074 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d013      	beq.n	80050a2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	2300      	movs	r3, #0
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f80e 	bl	80050b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005096:	69f8      	ldr	r0, [r7, #28]
 8005098:	f000 f88e 	bl	80051b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800509c:	2301      	movs	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e002      	b.n	80050a8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050a8:	69bb      	ldr	r3, [r7, #24]
	}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050ca:	3b01      	subs	r3, #1
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <prvInitialiseNewTask+0x48>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	617b      	str	r3, [r7, #20]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <prvInitialiseNewTask+0x46>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e012      	b.n	800512c <prvInitialiseNewTask+0x7a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	3334      	adds	r3, #52	; 0x34
 8005116:	460a      	mov	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <prvInitialiseNewTask+0x82>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3301      	adds	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	d9e9      	bls.n	8005106 <prvInitialiseNewTask+0x54>
 8005132:	e000      	b.n	8005136 <prvInitialiseNewTask+0x84>
		{
			break;
 8005134:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	2b06      	cmp	r3, #6
 8005142:	d901      	bls.n	8005148 <prvInitialiseNewTask+0x96>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005144:	2306      	movs	r3, #6
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005152:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	2200      	movs	r2, #0
 8005158:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	3304      	adds	r3, #4
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f848 	bl	80041f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	3318      	adds	r3, #24
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff f843 	bl	80041f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	f1c3 0207 	rsb	r2, r3, #7
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	69b8      	ldr	r0, [r7, #24]
 8005198:	f001 fbc6 	bl	8006928 <pxPortInitialiseStack>
 800519c:	4602      	mov	r2, r0
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ae:	bf00      	nop
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051c0:	f001 fce0 	bl	8006b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051c4:	4b2a      	ldr	r3, [pc, #168]	; (8005270 <prvAddNewTaskToReadyList+0xb8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	4a29      	ldr	r2, [pc, #164]	; (8005270 <prvAddNewTaskToReadyList+0xb8>)
 80051cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <prvAddNewTaskToReadyList+0xbc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051d6:	4a27      	ldr	r2, [pc, #156]	; (8005274 <prvAddNewTaskToReadyList+0xbc>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051dc:	4b24      	ldr	r3, [pc, #144]	; (8005270 <prvAddNewTaskToReadyList+0xb8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d110      	bne.n	8005206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051e4:	f000 fd02 	bl	8005bec <prvInitialiseTaskLists>
 80051e8:	e00d      	b.n	8005206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <prvAddNewTaskToReadyList+0xc0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <prvAddNewTaskToReadyList+0xbc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d802      	bhi.n	8005206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <prvAddNewTaskToReadyList+0xbc>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <prvAddNewTaskToReadyList+0xc4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <prvAddNewTaskToReadyList+0xc4>)
 800520e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <prvAddNewTaskToReadyList+0xcc>)
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe ffe8 	bl	800420e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800523e:	f001 fcd1 	bl	8006be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <prvAddNewTaskToReadyList+0xc0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <prvAddNewTaskToReadyList+0xbc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	429a      	cmp	r2, r3
 8005256:	d207      	bcs.n	8005268 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <prvAddNewTaskToReadyList+0xd0>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	200002c4 	.word	0x200002c4
 8005274:	200001c4 	.word	0x200001c4
 8005278:	200002d0 	.word	0x200002d0
 800527c:	200002e0 	.word	0x200002e0
 8005280:	200002cc 	.word	0x200002cc
 8005284:	200001c8 	.word	0x200001c8
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <vTaskDelay+0x60>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <vTaskDelay+0x30>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60bb      	str	r3, [r7, #8]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052bc:	f000 f868 	bl	8005390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 ff2c 	bl	8006120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052c8:	f000 f8aa 	bl	8005420 <xTaskResumeAll>
 80052cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <vTaskDelay+0x64>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200002ec 	.word	0x200002ec
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <vTaskStartScheduler+0x84>)
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	2300      	movs	r3, #0
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	491d      	ldr	r1, [pc, #116]	; (800537c <vTaskStartScheduler+0x88>)
 8005308:	481d      	ldr	r0, [pc, #116]	; (8005380 <vTaskStartScheduler+0x8c>)
 800530a:	f7ff fe91 	bl	8005030 <xTaskCreate>
 800530e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8005316:	f000 ff69 	bl	80061ec <xTimerCreateTimerTask>
 800531a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d116      	bne.n	8005350 <vTaskStartScheduler+0x5c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60bb      	str	r3, [r7, #8]
}
 8005334:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <vTaskStartScheduler+0x90>)
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <vTaskStartScheduler+0x94>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <vTaskStartScheduler+0x98>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800534a:	f001 fb79 	bl	8006a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800534e:	e00e      	b.n	800536e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d10a      	bne.n	800536e <vTaskStartScheduler+0x7a>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	607b      	str	r3, [r7, #4]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <vTaskStartScheduler+0x78>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200002e8 	.word	0x200002e8
 800537c:	080072cc 	.word	0x080072cc
 8005380:	08005b69 	.word	0x08005b69
 8005384:	200002e4 	.word	0x200002e4
 8005388:	200002d0 	.word	0x200002d0
 800538c:	200002c8 	.word	0x200002c8

08005390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <vTaskSuspendAll+0x18>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <vTaskSuspendAll+0x18>)
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	200002ec 	.word	0x200002ec

080053ac <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 80053b6:	2301      	movs	r3, #1
 80053b8:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <prvGetExpectedIdleTime+0x60>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d201      	bcs.n	80053c8 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <prvGetExpectedIdleTime+0x64>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e012      	b.n	80053fe <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <prvGetExpectedIdleTime+0x68>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d902      	bls.n	80053e6 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e00b      	b.n	80053fe <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e005      	b.n	80053fe <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <prvGetExpectedIdleTime+0x6c>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <prvGetExpectedIdleTime+0x70>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 80053fe:	68fb      	ldr	r3, [r7, #12]
	}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	200002cc 	.word	0x200002cc
 8005410:	200001c4 	.word	0x200001c4
 8005414:	200001c8 	.word	0x200001c8
 8005418:	200002e4 	.word	0x200002e4
 800541c:	200002c8 	.word	0x200002c8

08005420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800542e:	4b41      	ldr	r3, [pc, #260]	; (8005534 <xTaskResumeAll+0x114>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <xTaskResumeAll+0x2c>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	603b      	str	r3, [r7, #0]
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800544c:	f001 fb9a 	bl	8006b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <xTaskResumeAll+0x114>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3b01      	subs	r3, #1
 8005456:	4a37      	ldr	r2, [pc, #220]	; (8005534 <xTaskResumeAll+0x114>)
 8005458:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <xTaskResumeAll+0x114>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d161      	bne.n	8005526 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005462:	4b35      	ldr	r3, [pc, #212]	; (8005538 <xTaskResumeAll+0x118>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d05d      	beq.n	8005526 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800546a:	e02e      	b.n	80054ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800546c:	4b33      	ldr	r3, [pc, #204]	; (800553c <xTaskResumeAll+0x11c>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3318      	adds	r3, #24
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe ff25 	bl	80042c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe ff20 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	2201      	movs	r2, #1
 800548e:	409a      	lsls	r2, r3
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <xTaskResumeAll+0x120>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <xTaskResumeAll+0x120>)
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4a27      	ldr	r2, [pc, #156]	; (8005544 <xTaskResumeAll+0x124>)
 80054a8:	441a      	add	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fe feac 	bl	800420e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <xTaskResumeAll+0x128>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <xTaskResumeAll+0x12c>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ca:	4b1c      	ldr	r3, [pc, #112]	; (800553c <xTaskResumeAll+0x11c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1cc      	bne.n	800546c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054d8:	f000 fc06 	bl	8005ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <xTaskResumeAll+0x130>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d010      	beq.n	800550a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054e8:	f000 f846 	bl	8005578 <xTaskIncrementTick>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <xTaskResumeAll+0x12c>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f1      	bne.n	80054e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <xTaskResumeAll+0x130>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <xTaskResumeAll+0x12c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005512:	2301      	movs	r3, #1
 8005514:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005516:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <xTaskResumeAll+0x134>)
 8005518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005526:	f001 fb5d 	bl	8006be4 <vPortExitCritical>

	return xAlreadyYielded;
 800552a:	68bb      	ldr	r3, [r7, #8]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200002ec 	.word	0x200002ec
 8005538:	200002c4 	.word	0x200002c4
 800553c:	20000284 	.word	0x20000284
 8005540:	200002cc 	.word	0x200002cc
 8005544:	200001c8 	.word	0x200001c8
 8005548:	200001c4 	.word	0x200001c4
 800554c:	200002d8 	.word	0x200002d8
 8005550:	200002d4 	.word	0x200002d4
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <xTaskGetTickCount+0x1c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005564:	687b      	ldr	r3, [r7, #4]
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200002c8 	.word	0x200002c8

08005578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005582:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <xTaskIncrementTick+0x160>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 8093 	bne.w	80056b2 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800558c:	4b53      	ldr	r3, [pc, #332]	; (80056dc <xTaskIncrementTick+0x164>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005594:	4a51      	ldr	r2, [pc, #324]	; (80056dc <xTaskIncrementTick+0x164>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d120      	bne.n	80055e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <xTaskIncrementTick+0x168>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xTaskIncrementTick+0x46>
 80055c0:	4b47      	ldr	r3, [pc, #284]	; (80056e0 <xTaskIncrementTick+0x168>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <xTaskIncrementTick+0x16c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a45      	ldr	r2, [pc, #276]	; (80056e0 <xTaskIncrementTick+0x168>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4a45      	ldr	r2, [pc, #276]	; (80056e4 <xTaskIncrementTick+0x16c>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b44      	ldr	r3, [pc, #272]	; (80056e8 <xTaskIncrementTick+0x170>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <xTaskIncrementTick+0x170>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	f000 fb83 	bl	8005ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055e2:	4b42      	ldr	r3, [pc, #264]	; (80056ec <xTaskIncrementTick+0x174>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d34d      	bcc.n	8005688 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ec:	4b3c      	ldr	r3, [pc, #240]	; (80056e0 <xTaskIncrementTick+0x168>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <xTaskIncrementTick+0x82>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <xTaskIncrementTick+0x84>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005600:	4b3a      	ldr	r3, [pc, #232]	; (80056ec <xTaskIncrementTick+0x174>)
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	601a      	str	r2, [r3, #0]
					break;
 8005608:	e03e      	b.n	8005688 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800560a:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <xTaskIncrementTick+0x168>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	429a      	cmp	r2, r3
 8005620:	d203      	bcs.n	800562a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005622:	4a32      	ldr	r2, [pc, #200]	; (80056ec <xTaskIncrementTick+0x174>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6013      	str	r3, [r2, #0]
						break;
 8005628:	e02e      	b.n	8005688 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe fe4a 	bl	80042c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	3318      	adds	r3, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fe41 	bl	80042c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	2201      	movs	r2, #1
 800564c:	409a      	lsls	r2, r3
 800564e:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <xTaskIncrementTick+0x178>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <xTaskIncrementTick+0x178>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <xTaskIncrementTick+0x17c>)
 8005666:	441a      	add	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7fe fdcd 	bl	800420e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <xTaskIncrementTick+0x180>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	429a      	cmp	r2, r3
 8005680:	d3b4      	bcc.n	80055ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005686:	e7b1      	b.n	80055ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <xTaskIncrementTick+0x180>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	4919      	ldr	r1, [pc, #100]	; (80056f4 <xTaskIncrementTick+0x17c>)
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d901      	bls.n	80056a4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80056a4:	4b15      	ldr	r3, [pc, #84]	; (80056fc <xTaskIncrementTick+0x184>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80056ac:	f7fb f85c 	bl	8000768 <vApplicationTickHook>
 80056b0:	e006      	b.n	80056c0 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <xTaskIncrementTick+0x184>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <xTaskIncrementTick+0x184>)
 80056ba:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80056bc:	f7fb f854 	bl	8000768 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <xTaskIncrementTick+0x188>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056cc:	697b      	ldr	r3, [r7, #20]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200002ec 	.word	0x200002ec
 80056dc:	200002c8 	.word	0x200002c8
 80056e0:	2000027c 	.word	0x2000027c
 80056e4:	20000280 	.word	0x20000280
 80056e8:	200002dc 	.word	0x200002dc
 80056ec:	200002e4 	.word	0x200002e4
 80056f0:	200002cc 	.word	0x200002cc
 80056f4:	200001c8 	.word	0x200001c8
 80056f8:	200001c4 	.word	0x200001c4
 80056fc:	200002d4 	.word	0x200002d4
 8005700:	200002d8 	.word	0x200002d8

08005704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800570a:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <vTaskSwitchContext+0xa4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <vTaskSwitchContext+0xa8>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005718:	e03f      	b.n	800579a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <vTaskSwitchContext+0xa8>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005720:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <vTaskSwitchContext+0xac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	fab3 f383 	clz	r3, r3
 800572c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	f1c3 031f 	rsb	r3, r3, #31
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	491f      	ldr	r1, [pc, #124]	; (80057b4 <vTaskSwitchContext+0xb0>)
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <vTaskSwitchContext+0x5c>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	607b      	str	r3, [r7, #4]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <vTaskSwitchContext+0x5a>
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <vTaskSwitchContext+0xb0>)
 800576c:	4413      	add	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3308      	adds	r3, #8
 8005782:	429a      	cmp	r2, r3
 8005784:	d104      	bne.n	8005790 <vTaskSwitchContext+0x8c>
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <vTaskSwitchContext+0xb4>)
 8005798:	6013      	str	r3, [r2, #0]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200002ec 	.word	0x200002ec
 80057ac:	200002d8 	.word	0x200002d8
 80057b0:	200002cc 	.word	0x200002cc
 80057b4:	200001c8 	.word	0x200001c8
 80057b8:	200001c4 	.word	0x200001c4

080057bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	60fb      	str	r3, [r7, #12]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <vTaskPlaceOnEventList+0x44>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fe fd33 	bl	8004256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057f0:	2101      	movs	r1, #1
 80057f2:	6838      	ldr	r0, [r7, #0]
 80057f4:	f000 fc94 	bl	8006120 <prvAddCurrentTaskToDelayedList>
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200001c4 	.word	0x200001c4

08005804 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	617b      	str	r3, [r7, #20]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <vTaskPlaceOnUnorderedEventList+0x70>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	613b      	str	r3, [r7, #16]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <vTaskPlaceOnUnorderedEventList+0x74>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005854:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3318      	adds	r3, #24
 800585c:	4619      	mov	r1, r3
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7fe fcd5 	bl	800420e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005864:	2101      	movs	r1, #1
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fc5a 	bl	8006120 <prvAddCurrentTaskToDelayedList>
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200002ec 	.word	0x200002ec
 8005878:	200001c4 	.word	0x200001c4

0800587c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3318      	adds	r3, #24
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7fe fcae 	bl	800420e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68b8      	ldr	r0, [r7, #8]
 80058c2:	f000 fc2d 	bl	8006120 <prvAddCurrentTaskToDelayedList>
	}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200001c4 	.word	0x200001c4

080058d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3318      	adds	r3, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fcdf 	bl	80042c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590a:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <xTaskRemoveFromEventList+0xb0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11c      	bne.n	800594c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fcd6 	bl	80042c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	2201      	movs	r2, #1
 8005922:	409a      	lsls	r2, r3
 8005924:	4b18      	ldr	r3, [pc, #96]	; (8005988 <xTaskRemoveFromEventList+0xb4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4313      	orrs	r3, r2
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <xTaskRemoveFromEventList+0xb4>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a14      	ldr	r2, [pc, #80]	; (800598c <xTaskRemoveFromEventList+0xb8>)
 800593c:	441a      	add	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fe fc62 	bl	800420e <vListInsertEnd>
 800594a:	e005      	b.n	8005958 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3318      	adds	r3, #24
 8005950:	4619      	mov	r1, r3
 8005952:	480f      	ldr	r0, [pc, #60]	; (8005990 <xTaskRemoveFromEventList+0xbc>)
 8005954:	f7fe fc5b 	bl	800420e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <xTaskRemoveFromEventList+0xc0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d905      	bls.n	8005972 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <xTaskRemoveFromEventList+0xc4>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e001      	b.n	8005976 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8005976:	f000 f9b7 	bl	8005ce8 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 800597a:	697b      	ldr	r3, [r7, #20]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	200002ec 	.word	0x200002ec
 8005988:	200002cc 	.word	0x200002cc
 800598c:	200001c8 	.word	0x200001c8
 8005990:	20000284 	.word	0x20000284
 8005994:	200001c4 	.word	0x200001c4
 8005998:	200002d8 	.word	0x200002d8

0800599c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80059a6:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	613b      	str	r3, [r7, #16]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60fb      	str	r3, [r7, #12]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fe fc69 	bl	80042c8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fc64 	bl	80042c8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	2201      	movs	r2, #1
 8005a06:	409a      	lsls	r2, r3
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fe fbf0 	bl	800420e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d902      	bls.n	8005a42 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
	}
}
 8005a42:	bf00      	nop
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200002ec 	.word	0x200002ec
 8005a50:	200002cc 	.word	0x200002cc
 8005a54:	200001c8 	.word	0x200001c8
 8005a58:	200001c4 	.word	0x200001c4
 8005a5c:	200002d8 	.word	0x200002d8

08005a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <vTaskInternalSetTimeOutState+0x24>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <vTaskInternalSetTimeOutState+0x28>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	605a      	str	r2, [r3, #4]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	200002dc 	.word	0x200002dc
 8005a88:	200002c8 	.word	0x200002c8

08005a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	613b      	str	r3, [r7, #16]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60fb      	str	r3, [r7, #12]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ace:	f001 f859 	bl	8006b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <xTaskCheckForTimeOut+0xbc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d102      	bne.n	8005af2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e023      	b.n	8005b3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <xTaskCheckForTimeOut+0xc0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d007      	beq.n	8005b0e <xTaskCheckForTimeOut+0x82>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	e015      	b.n	8005b3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d20b      	bcs.n	8005b30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ff9b 	bl	8005a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	e004      	b.n	8005b3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b3a:	f001 f853 	bl	8006be4 <vPortExitCritical>

	return xReturn;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200002c8 	.word	0x200002c8
 8005b4c:	200002dc 	.word	0x200002dc

08005b50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <vTaskMissedYield+0x14>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	200002d8 	.word	0x200002d8

08005b68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b70:	f000 f87c 	bl	8005c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <prvIdleTask+0x74>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d907      	bls.n	8005b8c <prvIdleTask+0x24>
			{
				taskYIELD();
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <prvIdleTask+0x78>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005b8c:	f7fa fddc 	bl	8000748 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8005b90:	f7ff fc0c 	bl	80053ac <prvGetExpectedIdleTime>
 8005b94:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d9e9      	bls.n	8005b70 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005b9c:	f7ff fbf8 	bl	8005390 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8005ba0:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <prvIdleTask+0x7c>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <prvIdleTask+0x80>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d20a      	bcs.n	8005bc2 <prvIdleTask+0x5a>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60bb      	str	r3, [r7, #8]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8005bc2:	f7ff fbf3 	bl	80053ac <prvGetExpectedIdleTime>
 8005bc6:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d902      	bls.n	8005bd4 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7fa fafe 	bl	80001d0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8005bd4:	f7ff fc24 	bl	8005420 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8005bd8:	e7ca      	b.n	8005b70 <prvIdleTask+0x8>
 8005bda:	bf00      	nop
 8005bdc:	200001c8 	.word	0x200001c8
 8005be0:	e000ed04 	.word	0xe000ed04
 8005be4:	200002e4 	.word	0x200002e4
 8005be8:	200002c8 	.word	0x200002c8

08005bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	e00c      	b.n	8005c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <prvInitialiseTaskLists+0x60>)
 8005c04:	4413      	add	r3, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fad4 	bl	80041b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b06      	cmp	r3, #6
 8005c16:	d9ef      	bls.n	8005bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c18:	480d      	ldr	r0, [pc, #52]	; (8005c50 <prvInitialiseTaskLists+0x64>)
 8005c1a:	f7fe facb 	bl	80041b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c1e:	480d      	ldr	r0, [pc, #52]	; (8005c54 <prvInitialiseTaskLists+0x68>)
 8005c20:	f7fe fac8 	bl	80041b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c24:	480c      	ldr	r0, [pc, #48]	; (8005c58 <prvInitialiseTaskLists+0x6c>)
 8005c26:	f7fe fac5 	bl	80041b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c2a:	480c      	ldr	r0, [pc, #48]	; (8005c5c <prvInitialiseTaskLists+0x70>)
 8005c2c:	f7fe fac2 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c30:	480b      	ldr	r0, [pc, #44]	; (8005c60 <prvInitialiseTaskLists+0x74>)
 8005c32:	f7fe fabf 	bl	80041b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <prvInitialiseTaskLists+0x78>)
 8005c38:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <prvInitialiseTaskLists+0x64>)
 8005c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <prvInitialiseTaskLists+0x7c>)
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <prvInitialiseTaskLists+0x68>)
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200001c8 	.word	0x200001c8
 8005c50:	20000254 	.word	0x20000254
 8005c54:	20000268 	.word	0x20000268
 8005c58:	20000284 	.word	0x20000284
 8005c5c:	20000298 	.word	0x20000298
 8005c60:	200002b0 	.word	0x200002b0
 8005c64:	2000027c 	.word	0x2000027c
 8005c68:	20000280 	.word	0x20000280

08005c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c72:	e019      	b.n	8005ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c74:	f000 ff86 	bl	8006b84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c78:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <prvCheckTasksWaitingTermination+0x50>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fb1f 	bl	80042c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <prvCheckTasksWaitingTermination+0x54>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <prvCheckTasksWaitingTermination+0x54>)
 8005c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c9e:	f000 ffa1 	bl	8006be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f810 	bl	8005cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e1      	bne.n	8005c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000298 	.word	0x20000298
 8005cc0:	200002c4 	.word	0x200002c4
 8005cc4:	200002ac 	.word	0x200002ac

08005cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 f93b 	bl	8006f50 <vPortFree>
			vPortFree( pxTCB );
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f938 	bl	8006f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <prvResetNextTaskUnblockTime+0x44>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <prvResetNextTaskUnblockTime+0x14>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <prvResetNextTaskUnblockTime+0x16>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <prvResetNextTaskUnblockTime+0x48>)
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d0a:	e008      	b.n	8005d1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <prvResetNextTaskUnblockTime+0x44>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <prvResetNextTaskUnblockTime+0x48>)
 8005d1c:	6013      	str	r3, [r2, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2000027c 	.word	0x2000027c
 8005d30:	200002e4 	.word	0x200002e4

08005d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <xTaskGetSchedulerState+0x34>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d42:	2301      	movs	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	e008      	b.n	8005d5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <xTaskGetSchedulerState+0x38>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d50:	2302      	movs	r3, #2
 8005d52:	607b      	str	r3, [r7, #4]
 8005d54:	e001      	b.n	8005d5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d5a:	687b      	ldr	r3, [r7, #4]
	}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	200002d0 	.word	0x200002d0
 8005d6c:	200002ec 	.word	0x200002ec

08005d70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06e      	beq.n	8005e64 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <xTaskPriorityInherit+0x100>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d25e      	bcs.n	8005e52 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db06      	blt.n	8005daa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9c:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <xTaskPriorityInherit+0x100>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	f1c3 0207 	rsb	r2, r3, #7
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <xTaskPriorityInherit+0x104>)
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4299      	cmp	r1, r3
 8005dc0:	d101      	bne.n	8005dc6 <xTaskPriorityInherit+0x56>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xTaskPriorityInherit+0x58>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d03a      	beq.n	8005e42 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fa79 	bl	80042c8 <uxListRemove>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d115      	bne.n	8005e08 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4924      	ldr	r1, [pc, #144]	; (8005e74 <xTaskPriorityInherit+0x104>)
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <xTaskPriorityInherit+0x98>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43da      	mvns	r2, r3
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <xTaskPriorityInherit+0x108>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4013      	ands	r3, r2
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <xTaskPriorityInherit+0x108>)
 8005e06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <xTaskPriorityInherit+0x100>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	2201      	movs	r2, #1
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <xTaskPriorityInherit+0x108>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <xTaskPriorityInherit+0x108>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a10      	ldr	r2, [pc, #64]	; (8005e74 <xTaskPriorityInherit+0x104>)
 8005e32:	441a      	add	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe f9e7 	bl	800420e <vListInsertEnd>
 8005e40:	e004      	b.n	8005e4c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <xTaskPriorityInherit+0x100>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e008      	b.n	8005e64 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <xTaskPriorityInherit+0x100>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d201      	bcs.n	8005e64 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e60:	2301      	movs	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e64:	68fb      	ldr	r3, [r7, #12]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200001c4 	.word	0x200001c4
 8005e74:	200001c8 	.word	0x200001c8
 8005e78:	200002cc 	.word	0x200002cc

08005e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06e      	beq.n	8005f70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e92:	4b3a      	ldr	r3, [pc, #232]	; (8005f7c <xTaskPriorityDisinherit+0x100>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d00a      	beq.n	8005eb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed4:	1e5a      	subs	r2, r3, #1
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d044      	beq.n	8005f70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d140      	bne.n	8005f70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe f9e8 	bl	80042c8 <uxListRemove>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d115      	bne.n	8005f2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	491f      	ldr	r1, [pc, #124]	; (8005f80 <xTaskPriorityDisinherit+0x104>)
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xTaskPriorityDisinherit+0xae>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2201      	movs	r2, #1
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43da      	mvns	r2, r3
 8005f20:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <xTaskPriorityDisinherit+0x108>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4013      	ands	r3, r2
 8005f26:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <xTaskPriorityDisinherit+0x108>)
 8005f28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	f1c3 0207 	rsb	r2, r3, #7
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	2201      	movs	r2, #1
 8005f44:	409a      	lsls	r2, r3
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <xTaskPriorityDisinherit+0x108>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <xTaskPriorityDisinherit+0x108>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <xTaskPriorityDisinherit+0x104>)
 8005f5e:	441a      	add	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe f951 	bl	800420e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f70:	697b      	ldr	r3, [r7, #20]
	}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200001c4 	.word	0x200001c4
 8005f80:	200001c8 	.word	0x200001c8
 8005f84:	200002cc 	.word	0x200002cc

08005f88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8088 	beq.w	80060b2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60fb      	str	r3, [r7, #12]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d902      	bls.n	8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e002      	b.n	8005fd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d068      	beq.n	80060b2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d163      	bne.n	80060b2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fea:	4b34      	ldr	r3, [pc, #208]	; (80060bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d10a      	bne.n	800600a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	db04      	blt.n	8006028 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f1c3 0207 	rsb	r2, r3, #7
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	6959      	ldr	r1, [r3, #20]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006038:	4413      	add	r3, r2
 800603a:	4299      	cmp	r1, r3
 800603c:	d101      	bne.n	8006042 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d034      	beq.n	80060b2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	3304      	adds	r3, #4
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe f93b 	bl	80042c8 <uxListRemove>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4918      	ldr	r1, [pc, #96]	; (80060c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	2201      	movs	r2, #1
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43da      	mvns	r2, r3
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4013      	ands	r3, r2
 8006080:	4a10      	ldr	r2, [pc, #64]	; (80060c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006082:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80060a4:	441a      	add	r2, r3
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe f8ae 	bl	800420e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200001c4 	.word	0x200001c4
 80060c0:	200001c8 	.word	0x200001c8
 80060c4:	200002cc 	.word	0x200002cc

080060c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <uxTaskResetEventItemValue+0x2c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <uxTaskResetEventItemValue+0x2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <uxTaskResetEventItemValue+0x2c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1c2 0207 	rsb	r2, r2, #7
 80060e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80060e6:	687b      	ldr	r3, [r7, #4]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	200001c4 	.word	0x200001c4

080060f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <pvTaskIncrementMutexHeldCount+0x24>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <pvTaskIncrementMutexHeldCount+0x24>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800610a:	3201      	adds	r2, #1
 800610c:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800610e:	4b03      	ldr	r3, [pc, #12]	; (800611c <pvTaskIncrementMutexHeldCount+0x24>)
 8006110:	681b      	ldr	r3, [r3, #0]
	}
 8006112:	4618      	mov	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	200001c4 	.word	0x200001c4

08006120 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3304      	adds	r3, #4
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe f8c6 	bl	80042c8 <uxListRemove>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	2201      	movs	r2, #1
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43da      	mvns	r2, r3
 8006150:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4013      	ands	r3, r2
 8006156:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006158:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d10a      	bne.n	8006178 <prvAddCurrentTaskToDelayedList+0x58>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006168:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	481a      	ldr	r0, [pc, #104]	; (80061dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006172:	f7fe f84c 	bl	800420e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006176:	e026      	b.n	80061c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006180:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d209      	bcs.n	80061a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006190:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe f85a 	bl	8004256 <vListInsert>
}
 80061a2:	e010      	b.n	80061c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fe f850 	bl	8004256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d202      	bcs.n	80061c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6013      	str	r3, [r2, #0]
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200002c8 	.word	0x200002c8
 80061d4:	200001c4 	.word	0x200001c4
 80061d8:	200002cc 	.word	0x200002cc
 80061dc:	200002b0 	.word	0x200002b0
 80061e0:	20000280 	.word	0x20000280
 80061e4:	2000027c 	.word	0x2000027c
 80061e8:	200002e4 	.word	0x200002e4

080061ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061f6:	f000 fb01 	bl	80067fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <xTimerCreateTimerTask+0x54>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <xTimerCreateTimerTask+0x58>)
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	2302      	movs	r3, #2
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	490e      	ldr	r1, [pc, #56]	; (8006248 <xTimerCreateTimerTask+0x5c>)
 8006210:	480e      	ldr	r0, [pc, #56]	; (800624c <xTimerCreateTimerTask+0x60>)
 8006212:	f7fe ff0d 	bl	8005030 <xTaskCreate>
 8006216:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	603b      	str	r3, [r7, #0]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8006234:	687b      	ldr	r3, [r7, #4]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000320 	.word	0x20000320
 8006244:	20000324 	.word	0x20000324
 8006248:	080072d4 	.word	0x080072d4
 800624c:	0800640d 	.word	0x0800640d

08006250 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800625e:	2028      	movs	r0, #40	; 0x28
 8006260:	f000 fdb2 	bl	8006dc8 <pvPortMalloc>
 8006264:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f805 	bl	800628a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006280:	697b      	ldr	r3, [r7, #20]
	}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	617b      	str	r3, [r7, #20]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d015      	beq.n	80062e6 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80062ba:	f000 fa9f 	bl	80067fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd ff87 	bl	80041f4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80062e6:	bf00      	nop
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	623b      	str	r3, [r7, #32]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <xTimerGenericCommand+0x98>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02a      	beq.n	800637c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b05      	cmp	r3, #5
 8006336:	dc18      	bgt.n	800636a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006338:	f7ff fcfc 	bl	8005d34 <xTaskGetSchedulerState>
 800633c:	4603      	mov	r3, r0
 800633e:	2b02      	cmp	r3, #2
 8006340:	d109      	bne.n	8006356 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <xTimerGenericCommand+0x98>)
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	f107 0110 	add.w	r1, r7, #16
 800634a:	2300      	movs	r3, #0
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	f7fe f8d9 	bl	8004504 <xQueueGenericSend>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24
 8006354:	e012      	b.n	800637c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <xTimerGenericCommand+0x98>)
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f107 0110 	add.w	r1, r7, #16
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	f7fe f8cf 	bl	8004504 <xQueueGenericSend>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
 8006368:	e008      	b.n	800637c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <xTimerGenericCommand+0x98>)
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f107 0110 	add.w	r1, r7, #16
 8006372:	2300      	movs	r3, #0
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	f7fe f9c3 	bl	8004700 <xQueueGenericSendFromISR>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800637e:	4618      	mov	r0, r3
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000320 	.word	0x20000320

0800638c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006396:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <prvProcessExpiredTimer+0x7c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fd ff8f 	bl	80042c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d122      	bne.n	80063f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	18d1      	adds	r1, r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f000 f8c8 	bl	8006554 <prvInsertTimerInActiveList>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063ca:	2300      	movs	r3, #0
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	2100      	movs	r1, #0
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f7ff ff8b 	bl	80062f0 <xTimerGenericCommand>
 80063da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60fb      	str	r3, [r7, #12]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	4798      	blx	r3
}
 8006400:	bf00      	nop
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000318 	.word	0x20000318

0800640c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f857 	bl	80064cc <prvGetNextExpireTime>
 800641e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f803 	bl	8006430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800642a:	f000 f8d5 	bl	80065d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800642e:	e7f1      	b.n	8006414 <prvTimerTask+0x8>

08006430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800643a:	f7fe ffa9 	bl	8005390 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f866 	bl	8006514 <prvSampleTimeNow>
 8006448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d130      	bne.n	80064b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <prvProcessTimerOrBlockTask+0x3c>
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d806      	bhi.n	800646c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800645e:	f7fe ffdf 	bl	8005420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ff91 	bl	800638c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800646a:	e024      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <prvProcessTimerOrBlockTask+0x90>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <prvProcessTimerOrBlockTask+0x94>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f7fe fd99 	bl	8004fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006496:	f7fe ffc3 	bl	8005420 <xTaskResumeAll>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <prvProcessTimerOrBlockTask+0x98>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
}
 80064b0:	e001      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064b2:	f7fe ffb5 	bl	8005420 <xTaskResumeAll>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2000031c 	.word	0x2000031c
 80064c4:	20000320 	.word	0x20000320
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064d4:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e001      	b.n	8006502 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006502:	68fb      	ldr	r3, [r7, #12]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000318 	.word	0x20000318

08006514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800651c:	f7ff f81c 	bl	8005558 <xTaskGetTickCount>
 8006520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	429a      	cmp	r2, r3
 800652a:	d205      	bcs.n	8006538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800652c:	f000 f904 	bl	8006738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800653e:	4a04      	ldr	r2, [pc, #16]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000328 	.word	0x20000328

08006554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d812      	bhi.n	80065a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e01b      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <prvInsertTimerInActiveList+0x7c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fd fe5c 	bl	8004256 <vListInsert>
 800659e:	e012      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d206      	bcs.n	80065b6 <prvInsertTimerInActiveList+0x62>
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e007      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvInsertTimerInActiveList+0x80>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fd fe48 	bl	8004256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065c6:	697b      	ldr	r3, [r7, #20]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2000031c 	.word	0x2000031c
 80065d4:	20000318 	.word	0x20000318

080065d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065de:	e098      	b.n	8006712 <prvProcessReceivedCommands+0x13a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da18      	bge.n	8006618 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	3304      	adds	r3, #4
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	61fb      	str	r3, [r7, #28]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800660e:	6850      	ldr	r0, [r2, #4]
 8006610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006612:	6892      	ldr	r2, [r2, #8]
 8006614:	4611      	mov	r1, r2
 8006616:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	db78      	blt.n	8006710 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7fd fe4a 	bl	80042c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006634:	463b      	mov	r3, r7
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ff6c 	bl	8006514 <prvSampleTimeNow>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b09      	cmp	r3, #9
 8006642:	d866      	bhi.n	8006712 <prvProcessReceivedCommands+0x13a>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <prvProcessReceivedCommands+0x74>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006675 	.word	0x08006675
 8006650:	08006675 	.word	0x08006675
 8006654:	08006675 	.word	0x08006675
 8006658:	08006713 	.word	0x08006713
 800665c:	080066d1 	.word	0x080066d1
 8006660:	08006709 	.word	0x08006709
 8006664:	08006675 	.word	0x08006675
 8006668:	08006675 	.word	0x08006675
 800666c:	08006713 	.word	0x08006713
 8006670:	080066d1 	.word	0x080066d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	18d1      	adds	r1, r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006682:	f7ff ff67 	bl	8006554 <prvInsertTimerInActiveList>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d042      	beq.n	8006712 <prvProcessReceivedCommands+0x13a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d13a      	bne.n	8006712 <prvProcessReceivedCommands+0x13a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	441a      	add	r2, r3
 80066a4:	2300      	movs	r3, #0
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	2300      	movs	r3, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f7ff fe1f 	bl	80062f0 <xTimerGenericCommand>
 80066b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d12b      	bne.n	8006712 <prvProcessReceivedCommands+0x13a>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	61bb      	str	r3, [r7, #24]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	18d1      	adds	r1, r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f7ff ff27 	bl	8006554 <prvInsertTimerInActiveList>
					break;
 8006706:	e004      	b.n	8006712 <prvProcessReceivedCommands+0x13a>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8006708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800670a:	f000 fc21 	bl	8006f50 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800670e:	e000      	b.n	8006712 <prvProcessReceivedCommands+0x13a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006712:	4b08      	ldr	r3, [pc, #32]	; (8006734 <prvProcessReceivedCommands+0x15c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	1d39      	adds	r1, r7, #4
 8006718:	2200      	movs	r2, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe f916 	bl	800494c <xQueueReceive>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	f47f af5c 	bne.w	80065e0 <prvProcessReceivedCommands+0x8>
	}
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	3730      	adds	r7, #48	; 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000320 	.word	0x20000320

08006738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800673e:	e045      	b.n	80067cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006740:	4b2c      	ldr	r3, [pc, #176]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800674a:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3304      	adds	r3, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f7fd fdb5 	bl	80042c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d12e      	bne.n	80067cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d90e      	bls.n	800679e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fd fd5d 	bl	8004256 <vListInsert>
 800679c:	e016      	b.n	80067cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800679e:	2300      	movs	r3, #0
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	2100      	movs	r1, #0
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fda1 	bl	80062f0 <xTimerGenericCommand>
 80067ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	603b      	str	r3, [r7, #0]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067cc:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1b4      	bne.n	8006740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067d6:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <prvSwitchTimerLists+0xc0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <prvSwitchTimerLists+0xbc>)
 80067e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <prvSwitchTimerLists+0xc0>)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	6013      	str	r3, [r2, #0]
}
 80067ea:	bf00      	nop
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000318 	.word	0x20000318
 80067f8:	2000031c 	.word	0x2000031c

080067fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006800:	f000 f9c0 	bl	8006b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006804:	4b12      	ldr	r3, [pc, #72]	; (8006850 <prvCheckForValidListAndQueue+0x54>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11d      	bne.n	8006848 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800680c:	4811      	ldr	r0, [pc, #68]	; (8006854 <prvCheckForValidListAndQueue+0x58>)
 800680e:	f7fd fcd1 	bl	80041b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006812:	4811      	ldr	r0, [pc, #68]	; (8006858 <prvCheckForValidListAndQueue+0x5c>)
 8006814:	f7fd fcce 	bl	80041b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <prvCheckForValidListAndQueue+0x60>)
 800681a:	4a0e      	ldr	r2, [pc, #56]	; (8006854 <prvCheckForValidListAndQueue+0x58>)
 800681c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800681e:	4b10      	ldr	r3, [pc, #64]	; (8006860 <prvCheckForValidListAndQueue+0x64>)
 8006820:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <prvCheckForValidListAndQueue+0x5c>)
 8006822:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006824:	2200      	movs	r2, #0
 8006826:	2110      	movs	r1, #16
 8006828:	200a      	movs	r0, #10
 800682a:	f7fd fddf 	bl	80043ec <xQueueGenericCreate>
 800682e:	4603      	mov	r3, r0
 8006830:	4a07      	ldr	r2, [pc, #28]	; (8006850 <prvCheckForValidListAndQueue+0x54>)
 8006832:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <prvCheckForValidListAndQueue+0x54>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <prvCheckForValidListAndQueue+0x54>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4908      	ldr	r1, [pc, #32]	; (8006864 <prvCheckForValidListAndQueue+0x68>)
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fb96 	bl	8004f74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006848:	f000 f9cc 	bl	8006be4 <vPortExitCritical>
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000320 	.word	0x20000320
 8006854:	200002f0 	.word	0x200002f0
 8006858:	20000304 	.word	0x20000304
 800685c:	20000318 	.word	0x20000318
 8006860:	2000031c 	.word	0x2000031c
 8006864:	080072dc 	.word	0x080072dc

08006868 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <pvTimerGetTimerID+0x28>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	60fb      	str	r3, [r7, #12]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006890:	f000 f978 	bl	8006b84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800689a:	f000 f9a3 	bl	8006be4 <vPortExitCritical>

	return pvReturn;
 800689e:	693b      	ldr	r3, [r7, #16]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <vTimerSetTimerID+0x2a>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60bb      	str	r3, [r7, #8]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 80068d2:	f000 f957 	bl	8006b84 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
 80068dc:	f000 f982 	bl	8006be4 <vPortExitCritical>
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80068f6:	f06f 0301 	mvn.w	r3, #1
 80068fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <xTimerPendFunctionCallFromISR+0x3c>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	f107 0114 	add.w	r1, r7, #20
 8006910:	2300      	movs	r3, #0
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	f7fd fef4 	bl	8004700 <xQueueGenericSendFromISR>
 8006918:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	; 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000320 	.word	0x20000320

08006928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3b04      	subs	r3, #4
 8006938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b04      	subs	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3b04      	subs	r3, #4
 8006956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006958:	4a0c      	ldr	r2, [pc, #48]	; (800698c <pxPortInitialiseStack+0x64>)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3b14      	subs	r3, #20
 8006962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b04      	subs	r3, #4
 800696e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f06f 0202 	mvn.w	r2, #2
 8006976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b20      	subs	r3, #32
 800697c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800697e:	68fb      	ldr	r3, [r7, #12]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	08006991 	.word	0x08006991

08006990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <prvTaskExitError+0x54>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d00a      	beq.n	80069ba <prvTaskExitError+0x2a>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60fb      	str	r3, [r7, #12]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <prvTaskExitError+0x28>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60bb      	str	r3, [r7, #8]
}
 80069cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069ce:	bf00      	nop
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0fc      	beq.n	80069d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	2000000c 	.word	0x2000000c
	...

080069f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <pxCurrentTCBConst2>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f380 8809 	msr	PSP, r0
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	4770      	bx	lr
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst2>:
 8006a10:	200001c4 	.word	0x200001c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a18:	4808      	ldr	r0, [pc, #32]	; (8006a3c <prvPortStartFirstTask+0x24>)
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	6800      	ldr	r0, [r0, #0]
 8006a1e:	f380 8808 	msr	MSP, r0
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8814 	msr	CONTROL, r0
 8006a2a:	b662      	cpsie	i
 8006a2c:	b661      	cpsie	f
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	df00      	svc	0
 8006a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a46:	4b46      	ldr	r3, [pc, #280]	; (8006b60 <xPortStartScheduler+0x120>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a46      	ldr	r2, [pc, #280]	; (8006b64 <xPortStartScheduler+0x124>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10a      	bne.n	8006a66 <xPortStartScheduler+0x26>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a66:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <xPortStartScheduler+0x120>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <xPortStartScheduler+0x128>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10a      	bne.n	8006a86 <xPortStartScheduler+0x46>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <xPortStartScheduler+0x12c>)
 8006a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <xPortStartScheduler+0x130>)
 8006aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aae:	4b31      	ldr	r3, [pc, #196]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab4:	e009      	b.n	8006aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ab6:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <xPortStartScheduler+0x134>)
 8006abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d0ef      	beq.n	8006ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ad6:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <xPortStartScheduler+0x134>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f1c3 0307 	rsb	r3, r3, #7
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d00a      	beq.n	8006af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60bb      	str	r3, [r7, #8]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <xPortStartScheduler+0x134>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <xPortStartScheduler+0x134>)
 8006b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <xPortStartScheduler+0x138>)
 8006b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b2e:	f000 f8dd 	bl	8006cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <xPortStartScheduler+0x13c>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b38:	f000 f8fc 	bl	8006d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <xPortStartScheduler+0x140>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <xPortStartScheduler+0x140>)
 8006b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b48:	f7ff ff66 	bl	8006a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b4c:	f7fe fdda 	bl	8005704 <vTaskSwitchContext>
	prvTaskExitError();
 8006b50:	f7ff ff1e 	bl	8006990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	e000ed00 	.word	0xe000ed00
 8006b64:	410fc271 	.word	0x410fc271
 8006b68:	410fc270 	.word	0x410fc270
 8006b6c:	e000e400 	.word	0xe000e400
 8006b70:	2000032c 	.word	0x2000032c
 8006b74:	20000330 	.word	0x20000330
 8006b78:	e000ed20 	.word	0xe000ed20
 8006b7c:	2000000c 	.word	0x2000000c
 8006b80:	e000ef34 	.word	0xe000ef34

08006b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	607b      	str	r3, [r7, #4]
}
 8006b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <vPortEnterCritical+0x58>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <vPortEnterCritical+0x58>)
 8006ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <vPortEnterCritical+0x58>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10f      	bne.n	8006bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <vPortEnterCritical+0x5c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	603b      	str	r3, [r7, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <vPortEnterCritical+0x4a>
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	2000000c 	.word	0x2000000c
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <vPortExitCritical+0x50>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <vPortExitCritical+0x24>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <vPortExitCritical+0x50>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <vPortExitCritical+0x50>)
 8006c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c12:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <vPortExitCritical+0x50>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <vPortExitCritical+0x42>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f383 8811 	msr	BASEPRI, r3
}
 8006c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000000c 	.word	0x2000000c
	...

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f7fe fd48 	bl	8005704 <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	200001c4 	.word	0x200001c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc2:	f7fe fc59 	bl	8005578 <xTaskIncrementTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <SysTick_Handler+0x40>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <vPortSetupTimerInterrupt+0x38>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <vPortSetupTimerInterrupt+0x3c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <vPortSetupTimerInterrupt+0x40>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <vPortSetupTimerInterrupt+0x44>)
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0e:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006d10:	2207      	movs	r2, #7
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e010 	.word	0xe000e010
 8006d24:	e000e018 	.word	0xe000e018
 8006d28:	20000000 	.word	0x20000000
 8006d2c:	10624dd3 	.word	0x10624dd3
 8006d30:	e000e014 	.word	0xe000e014

08006d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d44 <vPortEnableVFP+0x10>
 8006d38:	6801      	ldr	r1, [r0, #0]
 8006d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d3e:	6001      	str	r1, [r0, #0]
 8006d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d42:	bf00      	nop
 8006d44:	e000ed88 	.word	0xe000ed88

08006d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d4e:	f3ef 8305 	mrs	r3, IPSR
 8006d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d914      	bls.n	8006d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <vPortValidateInterruptPriority+0x70>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <vPortValidateInterruptPriority+0x74>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20a      	bcs.n	8006d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <vPortValidateInterruptPriority+0x78>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <vPortValidateInterruptPriority+0x7c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d90a      	bls.n	8006daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	603b      	str	r3, [r7, #0]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <vPortValidateInterruptPriority+0x60>
	}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	e000e3f0 	.word	0xe000e3f0
 8006dbc:	2000032c 	.word	0x2000032c
 8006dc0:	e000ed0c 	.word	0xe000ed0c
 8006dc4:	20000330 	.word	0x20000330

08006dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dd4:	f7fe fadc 	bl	8005390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dd8:	4b58      	ldr	r3, [pc, #352]	; (8006f3c <pvPortMalloc+0x174>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de0:	f000 f910 	bl	8007004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006de4:	4b56      	ldr	r3, [pc, #344]	; (8006f40 <pvPortMalloc+0x178>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 808e 	bne.w	8006f0e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01d      	beq.n	8006e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006df8:	2208      	movs	r2, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d014      	beq.n	8006e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f023 0307 	bic.w	r3, r3, #7
 8006e10:	3308      	adds	r3, #8
 8006e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <pvPortMalloc+0x6c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	617b      	str	r3, [r7, #20]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d069      	beq.n	8006f0e <pvPortMalloc+0x146>
 8006e3a:	4b42      	ldr	r3, [pc, #264]	; (8006f44 <pvPortMalloc+0x17c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d864      	bhi.n	8006f0e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e44:	4b40      	ldr	r3, [pc, #256]	; (8006f48 <pvPortMalloc+0x180>)
 8006e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <pvPortMalloc+0x180>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e4e:	e004      	b.n	8006e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d903      	bls.n	8006e6c <pvPortMalloc+0xa4>
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f1      	bne.n	8006e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e6c:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <pvPortMalloc+0x174>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d04b      	beq.n	8006f0e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	2308      	movs	r3, #8
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d91f      	bls.n	8006ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	613b      	str	r3, [r7, #16]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ed2:	69b8      	ldr	r0, [r7, #24]
 8006ed4:	f000 f8f8 	bl	80070c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <pvPortMalloc+0x17c>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <pvPortMalloc+0x17c>)
 8006ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ee6:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <pvPortMalloc+0x17c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <pvPortMalloc+0x184>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d203      	bcs.n	8006efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <pvPortMalloc+0x17c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <pvPortMalloc+0x184>)
 8006ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <pvPortMalloc+0x178>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f0e:	f7fe fa87 	bl	8005420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <pvPortMalloc+0x16a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <pvPortMalloc+0x168>
	return pvReturn;
 8006f32:	69fb      	ldr	r3, [r7, #28]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3728      	adds	r7, #40	; 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	2000173c 	.word	0x2000173c
 8006f40:	20001748 	.word	0x20001748
 8006f44:	20001740 	.word	0x20001740
 8006f48:	20001734 	.word	0x20001734
 8006f4c:	20001744 	.word	0x20001744

08006f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d048      	beq.n	8006ff4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f62:	2308      	movs	r3, #8
 8006f64:	425b      	negs	r3, r3
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	4b21      	ldr	r3, [pc, #132]	; (8006ffc <vPortFree+0xac>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <vPortFree+0x44>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <vPortFree+0x62>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <vPortFree+0xac>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d019      	beq.n	8006ff4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d115      	bne.n	8006ff4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <vPortFree+0xac>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fd8:	f7fe f9da 	bl	8005390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <vPortFree+0xb0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4a06      	ldr	r2, [pc, #24]	; (8007000 <vPortFree+0xb0>)
 8006fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fea:	6938      	ldr	r0, [r7, #16]
 8006fec:	f000 f86c 	bl	80070c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ff0:	f7fe fa16 	bl	8005420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ff4:	bf00      	nop
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20001748 	.word	0x20001748
 8007000:	20001740 	.word	0x20001740

08007004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800700a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800700e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007010:	4b27      	ldr	r3, [pc, #156]	; (80070b0 <prvHeapInit+0xac>)
 8007012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3307      	adds	r3, #7
 8007022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0307 	bic.w	r3, r3, #7
 800702a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <prvHeapInit+0xac>)
 8007034:	4413      	add	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <prvHeapInit+0xb0>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007042:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <prvHeapInit+0xb0>)
 8007044:	2200      	movs	r2, #0
 8007046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007050:	2208      	movs	r2, #8
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <prvHeapInit+0xb4>)
 8007064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <prvHeapInit+0xb4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <prvHeapInit+0xb4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <prvHeapInit+0xb4>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <prvHeapInit+0xb8>)
 8007092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <prvHeapInit+0xbc>)
 800709a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <prvHeapInit+0xc0>)
 800709e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000334 	.word	0x20000334
 80070b4:	20001734 	.word	0x20001734
 80070b8:	2000173c 	.word	0x2000173c
 80070bc:	20001744 	.word	0x20001744
 80070c0:	20001740 	.word	0x20001740
 80070c4:	20001748 	.word	0x20001748

080070c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070d0:	4b28      	ldr	r3, [pc, #160]	; (8007174 <prvInsertBlockIntoFreeList+0xac>)
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e002      	b.n	80070dc <prvInsertBlockIntoFreeList+0x14>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d8f7      	bhi.n	80070d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d108      	bne.n	800710a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	441a      	add	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d118      	bne.n	8007150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <prvInsertBlockIntoFreeList+0xb0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d00d      	beq.n	8007146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	e008      	b.n	8007158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <prvInsertBlockIntoFreeList+0xb0>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e003      	b.n	8007158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d002      	beq.n	8007166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20001734 	.word	0x20001734
 8007178:	2000173c 	.word	0x2000173c

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f000 f82e 	bl	80071f0 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	0800731c 	.word	0x0800731c
 80071b8:	0800731c 	.word	0x0800731c
 80071bc:	0800731c 	.word	0x0800731c
 80071c0:	08007320 	.word	0x08007320

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	4770      	bx	lr
 80071d0:	b510      	push	{r4, lr}
 80071d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071da:	4291      	cmp	r1, r2
 80071dc:	d1f9      	bne.n	80071d2 <memcpy+0xe>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
