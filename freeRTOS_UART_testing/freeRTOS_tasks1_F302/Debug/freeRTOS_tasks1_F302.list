
freeRTOS_tasks1_F302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080069c8  080069c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c8  080069c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080069d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001334  20000010  080069e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  080069e0  00021344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018542  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337b  00000000  00000000  00038582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  0003cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd08  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aafb  00000000  00000000  0005c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af93d  00000000  00000000  00076afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  00126488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068f0 	.word	0x080068f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080068f0 	.word	0x080068f0

080001d0 <vPortSuppressTicksAndSleep>:
}
/* USER CODE END 3 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5b0      	push	{r4, r5, r7, lr}
 80001e6:	b08a      	sub	sp, #40	; 0x28
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	memset(buffer.tx_buffer, 65, sizeof(buffer.tx_buffer));
 80001ea:	220a      	movs	r2, #10
 80001ec:	2141      	movs	r1, #65	; 0x41
 80001ee:	4838      	ldr	r0, [pc, #224]	; (80002d0 <main+0xec>)
 80001f0:	f006 fb76 	bl	80068e0 <memset>
	memset(buffer.rx_buffer, 66, sizeof(buffer.rx_buffer));
 80001f4:	220a      	movs	r2, #10
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4836      	ldr	r0, [pc, #216]	; (80002d4 <main+0xf0>)
 80001fa:	f006 fb71 	bl	80068e0 <memset>
	buffer.rx = 0;
 80001fe:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <main+0xec>)
 8000200:	2200      	movs	r2, #0
 8000202:	765a      	strb	r2, [r3, #25]
	buffer.tx = 0;
 8000204:	4b32      	ldr	r3, [pc, #200]	; (80002d0 <main+0xec>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fc71 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f879 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f93f 	bl	8000494 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f8cd 	bl	80003b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800021a:	f000 f90b 	bl	8000434 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Semaphore1 = xSemaphoreCreateBinary();
 800021e:	2203      	movs	r2, #3
 8000220:	2100      	movs	r1, #0
 8000222:	2001      	movs	r0, #1
 8000224:	f003 fd84 	bl	8003d30 <xQueueGenericCreate>
 8000228:	4603      	mov	r3, r0
 800022a:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <main+0xf4>)
 800022c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  uint32_t pvTimerID_1 = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
  TimerHandle_t Timer1;
  Timer1 = xTimerCreate("Timer1", 500, pdTRUE, (void* const)&pvTimerID_1, Timer1Callback);
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	4a29      	ldr	r2, [pc, #164]	; (80002dc <main+0xf8>)
 8000238:	9200      	str	r2, [sp, #0]
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000240:	4827      	ldr	r0, [pc, #156]	; (80002e0 <main+0xfc>)
 8000242:	f005 fbbf 	bl	80059c4 <xTimerCreate>
 8000246:	61f8      	str	r0, [r7, #28]
  xTimerStart(Timer1, 1);
 8000248:	f004 fdf6 	bl	8004e38 <xTaskGetTickCount>
 800024c:	4602      	mov	r2, r0
 800024e:	2301      	movs	r3, #1
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	2101      	movs	r1, #1
 8000256:	69f8      	ldr	r0, [r7, #28]
 8000258:	f005 fc04 	bl	8005a64 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(30, sizeof(char));
 800025c:	2200      	movs	r2, #0
 800025e:	2101      	movs	r1, #1
 8000260:	201e      	movs	r0, #30
 8000262:	f003 fd65 	bl	8003d30 <xQueueGenericCreate>
 8000266:	61b8      	str	r0, [r7, #24]
  buffer.queueh = myQueue1;
 8000268:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <main+0xec>)
 800026a:	69bb      	ldr	r3, [r7, #24]
 800026c:	6153      	str	r3, [r2, #20]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <main+0x100>)
 8000270:	463c      	mov	r4, r7
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	682b      	ldr	r3, [r5, #0]
 800027a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800027c:	463b      	mov	r3, r7
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f003 fbfd 	bl	8003a80 <osThreadCreate>
 8000286:	4603      	mov	r3, r0
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <main+0x104>)
 800028a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //TaskHandle_t sendUSART1_handle;
  xTaskCreate(sendUSART1, "send data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 800028c:	2300      	movs	r3, #0
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2305      	movs	r3, #5
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0xec>)
 8000296:	2240      	movs	r2, #64	; 0x40
 8000298:	4914      	ldr	r1, [pc, #80]	; (80002ec <main+0x108>)
 800029a:	4815      	ldr	r0, [pc, #84]	; (80002f0 <main+0x10c>)
 800029c:	f004 fb38 	bl	8004910 <xTaskCreate>
  //TaskHandle_t receiveUSART1_handle;
  xTaskCreate(receiveUSART1, "receive data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2305      	movs	r3, #5
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <main+0xec>)
 80002aa:	2240      	movs	r2, #64	; 0x40
 80002ac:	4911      	ldr	r1, [pc, #68]	; (80002f4 <main+0x110>)
 80002ae:	4812      	ldr	r0, [pc, #72]	; (80002f8 <main+0x114>)
 80002b0:	f004 fb2e 	bl	8004910 <xTaskCreate>
  xTaskCreate(announcement, "announcement", 64, NULL, 6, NULL);
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2306      	movs	r3, #6
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	2240      	movs	r2, #64	; 0x40
 80002c0:	490e      	ldr	r1, [pc, #56]	; (80002fc <main+0x118>)
 80002c2:	480f      	ldr	r0, [pc, #60]	; (8000300 <main+0x11c>)
 80002c4:	f004 fb24 	bl	8004910 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f003 fbd3 	bl	8003a72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0xe8>
 80002ce:	bf00      	nop
 80002d0:	2000010c 	.word	0x2000010c
 80002d4:	20000116 	.word	0x20000116
 80002d8:	20000128 	.word	0x20000128
 80002dc:	080006b1 	.word	0x080006b1
 80002e0:	08006914 	.word	0x08006914
 80002e4:	08006948 	.word	0x08006948
 80002e8:	20000108 	.word	0x20000108
 80002ec:	0800691c 	.word	0x0800691c
 80002f0:	080005c5 	.word	0x080005c5
 80002f4:	08006928 	.word	0x08006928
 80002f8:	08000619 	.word	0x08000619
 80002fc:	08006938 	.word	0x08006938
 8000300:	08000761 	.word	0x08000761

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09c      	sub	sp, #112	; 0x70
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f006 fae4 	bl	80068e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2234      	movs	r2, #52	; 0x34
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f006 fad6 	bl	80068e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2302      	movs	r3, #2
 8000336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2310      	movs	r3, #16
 800033e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000340:	2302      	movs	r3, #2
 8000342:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000344:	2300      	movs	r3, #0
 8000346:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000348:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800034c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000352:	4618      	mov	r0, r3
 8000354:	f000 ffc6 	bl	80012e4 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800035e:	f000 fa56 	bl	800080e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2302      	movs	r3, #2
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f001 ffee 	bl	8002360 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800038a:	f000 fa40 	bl	800080e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800038e:	2321      	movs	r3, #33	; 0x21
 8000390:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fa47 	bl	8002830 <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003a8:	f000 fa31 	bl	800080e <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3770      	adds	r7, #112	; 0x70
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_I2C1_Init+0x74>)
 80003ba:	4a1c      	ldr	r2, [pc, #112]	; (800042c <MX_I2C1_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_I2C1_Init+0x74>)
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <MX_I2C1_Init+0x7c>)
 80003c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_I2C1_Init+0x74>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_I2C1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_I2C1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ee:	480e      	ldr	r0, [pc, #56]	; (8000428 <MX_I2C1_Init+0x74>)
 80003f0:	f000 fe52 	bl	8001098 <HAL_I2C_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003fa:	f000 fa08 	bl	800080e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003fe:	2100      	movs	r1, #0
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <MX_I2C1_Init+0x74>)
 8000402:	f000 fed8 	bl	80011b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800040c:	f000 f9ff 	bl	800080e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000410:	2100      	movs	r1, #0
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_I2C1_Init+0x74>)
 8000414:	f000 ff1a 	bl	800124c <HAL_I2CEx_ConfigDigitalFilter>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800041e:	f000 f9f6 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000002c 	.word	0x2000002c
 800042c:	40005400 	.word	0x40005400
 8000430:	2000090e 	.word	0x2000090e

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART1_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART1_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART1_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART1_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000478:	f002 fdf6 	bl	8003068 <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f9c4 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000080 	.word	0x20000080
 8000490:	40013800 	.word	0x40013800

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b43      	ldr	r3, [pc, #268]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a42      	ldr	r2, [pc, #264]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b40      	ldr	r3, [pc, #256]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b3d      	ldr	r3, [pc, #244]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a3c      	ldr	r2, [pc, #240]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <MX_GPIO_Init+0x124>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11
 80004f2:	2200      	movs	r2, #0
 80004f4:	f641 410c 	movw	r1, #7180	; 0x1c0c
 80004f8:	4830      	ldr	r0, [pc, #192]	; (80005bc <MX_GPIO_Init+0x128>)
 80004fa:	f000 fd83 	bl	8001004 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	482e      	ldr	r0, [pc, #184]	; (80005c0 <MX_GPIO_Init+0x12c>)
 8000506:	f000 fd7d 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800050a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	4826      	ldr	r0, [pc, #152]	; (80005bc <MX_GPIO_Init+0x128>)
 8000522:	f000 fbfd 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000526:	f240 430c 	movw	r3, #1036	; 0x40c
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <MX_GPIO_Init+0x128>)
 8000540:	f000 fbee 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	4818      	ldr	r0, [pc, #96]	; (80005c0 <MX_GPIO_Init+0x12c>)
 800055e:	f000 fbdf 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <MX_GPIO_Init+0x128>)
 800057c:	f000 fbd0 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058e:	2303      	movs	r3, #3
 8000590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <MX_GPIO_Init+0x128>)
 800059a:	f000 fbc1 	bl	8000d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 fb92 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fbab 	bl	8000d04 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800
 80005c0:	48000400 	.word	0x48000400

080005c4 <sendUSART1>:

/* USER CODE BEGIN 4 */
void sendUSART1( void* buffer_p)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <sendUSART1+0x4c>)
 80005d2:	f000 fd2f 	bl	8001034 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]
		xQueueReceive(buffer_pp->queueh, &buffer_pp->tx, portMAX_DELAY);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6958      	ldr	r0, [r3, #20]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3318      	adds	r3, #24
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295
 80005e6:	4619      	mov	r1, r3
 80005e8:	f003 fe20 	bl	800422c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*) &buffer_pp->tx, sizeof(buffer_pp->tx), 100);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f103 0118 	add.w	r1, r3, #24
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2201      	movs	r2, #1
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <sendUSART1+0x50>)
 80005f8:	f002 fd84 	bl	8003104 <HAL_UART_Transmit>
		vTaskDelay(200);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f004 fab5 	bl	8004b6c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <sendUSART1+0x4c>)
 8000608:	f000 fd14 	bl	8001034 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800060c:	e7de      	b.n	80005cc <sendUSART1+0x8>
 800060e:	bf00      	nop
 8000610:	48000800 	.word	0x48000800
 8000614:	20000080 	.word	0x20000080

08000618 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data"));
}

void receiveUSART1( void * buffer_p)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <receiveUSART1+0x50>)
 8000626:	f000 fd05 	bl	8001034 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60fb      	str	r3, [r7, #12]
		if( HAL_UART_Receive(&huart1, &buffer_pp->rx, 1, 1) == HAL_OK)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f103 0119 	add.w	r1, r3, #25
 8000634:	2301      	movs	r3, #1
 8000636:	2201      	movs	r2, #1
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <receiveUSART1+0x54>)
 800063a:	f002 fded 	bl	8003218 <HAL_UART_Receive>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d108      	bne.n	8000656 <receiveUSART1+0x3e>
		{
			xQueueSend(buffer_pp->queueh, &buffer_pp->rx, 1);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	6958      	ldr	r0, [r3, #20]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f103 0119 	add.w	r1, r3, #25
 800064e:	2300      	movs	r3, #0
 8000650:	2201      	movs	r2, #1
 8000652:	f003 fbc7 	bl	8003de4 <xQueueGenericSend>
		}
		vTaskDelay(40);
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f004 fa88 	bl	8004b6c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800065c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000660:	4801      	ldr	r0, [pc, #4]	; (8000668 <receiveUSART1+0x50>)
 8000662:	f000 fce7 	bl	8001034 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000666:	e7db      	b.n	8000620 <receiveUSART1+0x8>
 8000668:	48000800 	.word	0x48000800
 800066c:	20000080 	.word	0x20000080

08000670 <vApplicationIdleHook>:
	}
	 vTaskDelete(xTaskGetHandle("receive data"));
}

void vApplicationIdleHook( void )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <vApplicationIdleHook+0x1c>)
 800067a:	f000 fcdb 	bl	8001034 <HAL_GPIO_TogglePin>
	//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 800067e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000682:	4802      	ldr	r0, [pc, #8]	; (800068c <vApplicationIdleHook+0x1c>)
 8000684:	f000 fcd6 	bl	8001034 <HAL_GPIO_TogglePin>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	48000800 	.word	0x48000800

08000690 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2104      	movs	r1, #4
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <vApplicationTickHook+0x1c>)
 800069a:	f000 fcb3 	bl	8001004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2104      	movs	r1, #4
 80006a2:	4802      	ldr	r0, [pc, #8]	; (80006ac <vApplicationTickHook+0x1c>)
 80006a4:	f000 fcae 	bl	8001004 <HAL_GPIO_WritePin>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	48000800 	.word	0x48000800

080006b0 <Timer1Callback>:


void Timer1Callback( TimerHandle_t xTimer )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	481c      	ldr	r0, [pc, #112]	; (8000730 <Timer1Callback+0x80>)
 80006be:	f000 fcb9 	bl	8001034 <HAL_GPIO_TogglePin>
	const uint32_t maxCount = 10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	617b      	str	r3, [r7, #20]
	uint32_t count;
	count = (uint32_t) pvTimerGetTimerID(xTimer);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f005 fc6c 	bl	8005fa4 <pvTimerGetTimerID>
 80006cc:	4603      	mov	r3, r0
 80006ce:	61fb      	str	r3, [r7, #28]
	count++;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	3301      	adds	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
	if(count >= maxCount)
 80006d6:	69fa      	ldr	r2, [r7, #28]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d31a      	bcc.n	8000714 <Timer1Callback+0x64>
	{
		count = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
		char message[] = {"Timer1\r\n"};
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <Timer1Callback+0x84>)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ea:	c303      	stmia	r3!, {r0, r1}
 80006ec:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<sizeof(message); i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	e00c      	b.n	800070e <Timer1Callback+0x5e>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <Timer1Callback+0x88>)
 80006f6:	6958      	ldr	r0, [r3, #20]
 80006f8:	f107 0208 	add.w	r2, r7, #8
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	18d1      	adds	r1, r2, r3
 8000700:	2300      	movs	r3, #0
 8000702:	2201      	movs	r2, #1
 8000704:	f003 fb6e 	bl	8003de4 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	3301      	adds	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	2b08      	cmp	r3, #8
 8000712:	d9ef      	bls.n	80006f4 <Timer1Callback+0x44>
		}
	}
	vTimerSetTimerID(xTimer, (void*) count);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f005 fc63 	bl	8005fe4 <vTimerSetTimerID>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <Timer1Callback+0x80>)
 8000724:	f000 fc86 	bl	8001034 <HAL_GPIO_TogglePin>
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	48000400 	.word	0x48000400
 8000734:	0800695c 	.word	0x0800695c
 8000738:	2000010c 	.word	0x2000010c

0800073c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
	xSemaphoreGiveFromISR( Semaphore1, NULL );
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_GPIO_EXTI_Callback+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fcdf 	bl	8004110 <xQueueGiveFromISR>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000128 	.word	0x20000128

08000760 <announcement>:

void announcement(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
	for( ;; )
	{
		xSemaphoreTake(Semaphore1, portMAX_DELAY);
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <announcement+0x70>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f04f 31ff 	mov.w	r1, #4294967295
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fe3c 	bl	80043ec <xQueueSemaphoreTake>
		char message[] = {"ANNOUNCEMENT\r\n"};
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <announcement+0x74>)
 8000776:	1d3c      	adds	r4, r7, #4
 8000778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077a:	c407      	stmia	r4!, {r0, r1, r2}
 800077c:	8023      	strh	r3, [r4, #0]
 800077e:	3402      	adds	r4, #2
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	7023      	strb	r3, [r4, #0]
		vTaskDelay(pdMS_TO_TICKS(800));
 8000784:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000788:	f004 f9f0 	bl	8004b6c <vTaskDelay>
		xSemaphoreTake(Semaphore1, 1); // Takes a Semaphore1 because the button on PC13 may have noise
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <announcement+0x70>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2101      	movs	r1, #1
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fe2a 	bl	80043ec <xQueueSemaphoreTake>
		for(int i = 0; i<sizeof(message); i++)
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e00b      	b.n	80007b6 <announcement+0x56>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <announcement+0x78>)
 80007a0:	6958      	ldr	r0, [r3, #20]
 80007a2:	1d3a      	adds	r2, r7, #4
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	18d1      	adds	r1, r2, r3
 80007a8:	2300      	movs	r3, #0
 80007aa:	2201      	movs	r2, #1
 80007ac:	f003 fb1a 	bl	8003de4 <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2b0e      	cmp	r3, #14
 80007ba:	d9f0      	bls.n	800079e <announcement+0x3e>
		}
		taskYIELD();
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <announcement+0x7c>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
	{
 80007cc:	e7cb      	b.n	8000766 <announcement+0x6>
 80007ce:	bf00      	nop
 80007d0:	20000128 	.word	0x20000128
 80007d4:	08006968 	.word	0x08006968
 80007d8:	2000010c 	.word	0x2000010c
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f003 f970 	bl	8003ace <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartDefaultTask+0x8>

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 f98b 	bl	8000b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000816:	e7fe      	b.n	8000816 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_MspInit+0x4c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6193      	str	r3, [r2, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x4c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x4c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fa39 	bl	8000ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d128      	bne.n	80008dc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b4:	2304      	movs	r3, #4
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_I2C_MspInit+0x84>)
 80008c0:	f000 fa2e 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d127      	bne.n	8000962 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x80>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000942:	2330      	movs	r3, #48	; 0x30
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x84>)
 800095e:	f000 f9df 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40013800 	.word	0x40013800
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800

08000978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	201c      	movs	r0, #28
 800098e:	f000 f99d 	bl	8000ccc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000992:	201c      	movs	r0, #28
 8000994:	f000 f9b6 	bl	8000d04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <HAL_InitTick+0xa4>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <HAL_InitTick+0xa4>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	61d3      	str	r3, [r2, #28]
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_InitTick+0xa4>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b0:	f107 0210 	add.w	r2, r7, #16
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 ff06 	bl	80027cc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009c0:	f001 fec0 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80009c4:	4603      	mov	r3, r0
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_InitTick+0xa8>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9b      	lsrs	r3, r3, #18
 80009d4:	3b01      	subs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0xac>)
 80009da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_InitTick+0xac>)
 80009e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_InitTick+0xac>)
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_InitTick+0xac>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_InitTick+0xac>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <HAL_InitTick+0xac>)
 80009fc:	f002 f8aa 	bl	8002b54 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <HAL_InitTick+0xac>)
 8000a08:	f002 f906 	bl	8002c18 <HAL_TIM_Base_Start_IT>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	e000      	b.n	8000a12 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	2000012c 	.word	0x2000012c

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM2_IRQHandler+0x10>)
 8000a5a:	f002 f931 	bl	8002cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000012c 	.word	0x2000012c

08000a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a70:	f000 fafa 	bl	8001068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f005 fed7 	bl	800687c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fb89 	bl	80001e4 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae0:	080069d0 	.word	0x080069d0
  ldr r2, =_sbss
 8000ae4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae8:	20001344 	.word	0x20001344

08000aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x28>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x28>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f8d8 	bl	8000cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f7ff ff36 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fe84 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000178 	.word	0x20000178

08000b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000178 	.word	0x20000178

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff4c 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cde:	f7ff ff61 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	f7ff ffb1 	bl	8000c50 <NVIC_EncodePriority>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff80 	bl	8000bfc <__NVIC_SetPriority>
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff54 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	e14e      	b.n	8000fce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8140 	beq.w	8000fc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x40>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 0201 	and.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d017      	beq.n	8000dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d123      	bne.n	8000e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	6939      	ldr	r1, [r7, #16]
 8000e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0203 	and.w	r2, r3, #3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 809a 	beq.w	8000fc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	4b55      	ldr	r3, [pc, #340]	; (8000fec <HAL_GPIO_Init+0x2cc>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a54      	ldr	r2, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x2cc>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x2cc>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eac:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1e0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_GPIO_Init+0x2d4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_GPIO_Init+0x2d8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1d8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_GPIO_Init+0x2dc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1d4>
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x1e2>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e004      	b.n	8000f02 <HAL_GPIO_Init+0x1e2>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x1e2>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_GPIO_Init+0x1e2>
 8000f00:	2300      	movs	r3, #0
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	f002 0203 	and.w	r2, r2, #3
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f12:	4937      	ldr	r1, [pc, #220]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f44:	4a2e      	ldr	r2, [pc, #184]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f6e:	4a24      	ldr	r2, [pc, #144]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f47f aea9 	bne.w	8000d30 <HAL_GPIO_Init+0x10>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001020:	e002      	b.n	8001028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43d9      	mvns	r1, r3
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	400b      	ands	r3, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fb58 	bl	800073c <HAL_GPIO_EXTI_Callback>
  }
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e081      	b.n	80011ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fbd2 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d107      	bne.n	8001112 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	e006      	b.n	8001120 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800111e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d104      	bne.n	8001132 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69d9      	ldr	r1, [r3, #28]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b20      	cmp	r3, #32
 80011ca:	d138      	bne.n	800123e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e032      	b.n	8001240 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2224      	movs	r2, #36	; 0x24
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001208:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6819      	ldr	r1, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800123e:	2302      	movs	r3, #2
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b20      	cmp	r3, #32
 8001260:	d139      	bne.n	80012d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800126c:	2302      	movs	r3, #2
 800126e:	e033      	b.n	80012d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800129e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	f001 b823 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 817d 	beq.w	800161a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001320:	4bbc      	ldr	r3, [pc, #752]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b04      	cmp	r3, #4
 800132a:	d00c      	beq.n	8001346 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800132c:	4bb9      	ldr	r3, [pc, #740]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d15c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x10e>
 8001338:	4bb6      	ldr	r3, [pc, #728]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d155      	bne.n	80013f2 <HAL_RCC_OscConfig+0x10e>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800135a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x94>
 8001372:	4ba8      	ldr	r3, [pc, #672]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	e015      	b.n	80013a4 <HAL_RCC_OscConfig+0xc0>
 8001378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001394:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013a0:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013b0:	fa92 f2a2 	rbit	r2, r2
 80013b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013bc:	fab2 f282 	clz	r2, r2
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	f042 0220 	orr.w	r2, r2, #32
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	f002 021f 	and.w	r2, r2, #31
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 811f 	beq.w	8001618 <HAL_RCC_OscConfig+0x334>
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8116 	bne.w	8001618 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f000 bfaf 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x12e>
 8001404:	4b83      	ldr	r3, [pc, #524]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a82      	ldr	r2, [pc, #520]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e036      	b.n	8001480 <HAL_RCC_OscConfig+0x19c>
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x158>
 8001422:	4b7c      	ldr	r3, [pc, #496]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7b      	ldr	r2, [pc, #492]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b79      	ldr	r3, [pc, #484]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a78      	ldr	r2, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e021      	b.n	8001480 <HAL_RCC_OscConfig+0x19c>
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x184>
 800144e:	4b71      	ldr	r3, [pc, #452]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a70      	ldr	r2, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6d      	ldr	r2, [pc, #436]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0x19c>
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a66      	ldr	r2, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001480:	4b64      	ldr	r3, [pc, #400]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f023 020f 	bic.w	r2, r3, #15
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	495f      	ldr	r1, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001496:	4313      	orrs	r3, r2
 8001498:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d059      	beq.n	800155e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb4b 	bl	8000b44 <HAL_GetTick>
 80014ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb46 	bl	8000b44 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d902      	bls.n	80014ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f000 bf43 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 80014ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	095b      	lsrs	r3, r3, #5
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d102      	bne.n	80014fc <HAL_RCC_OscConfig+0x218>
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	e015      	b.n	8001528 <HAL_RCC_OscConfig+0x244>
 80014fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001500:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001514:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001518:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001524:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001530:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001534:	fa92 f2a2 	rbit	r2, r2
 8001538:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800153c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001540:	fab2 f282 	clz	r2, r2
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f002 021f 	and.w	r2, r2, #31
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ab      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1d0>
 800155c:	e05d      	b.n	800161a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff faf1 	bl	8000b44 <HAL_GetTick>
 8001562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff faec 	bl	8000b44 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 bee9 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001592:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2cc>
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0x2f8>
 80015b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ab      	bne.n	8001568 <HAL_RCC_OscConfig+0x284>
 8001610:	e003      	b.n	800161a <HAL_RCC_OscConfig+0x336>
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 817d 	beq.w	800192a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001630:	4ba6      	ldr	r3, [pc, #664]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800163c:	4ba3      	ldr	r3, [pc, #652]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d172      	bne.n	800172e <HAL_RCC_OscConfig+0x44a>
 8001648:	4ba0      	ldr	r3, [pc, #640]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d16c      	bne.n	800172e <HAL_RCC_OscConfig+0x44a>
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001666:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	095b      	lsrs	r3, r3, #5
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x3a0>
 800167e:	4b93      	ldr	r3, [pc, #588]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	e013      	b.n	80016ac <HAL_RCC_OscConfig+0x3c8>
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800169c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2202      	movs	r2, #2
 80016ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <HAL_RCC_OscConfig+0x410>
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f000 be2e 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b75      	ldr	r3, [pc, #468]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	21f8      	movs	r1, #248	; 0xf8
 800170a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001712:	fa91 f1a1 	rbit	r1, r1
 8001716:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800171a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800171e:	fab1 f181 	clz	r1, r1
 8001722:	b2c9      	uxtb	r1, r1
 8001724:	408b      	lsls	r3, r1
 8001726:	4969      	ldr	r1, [pc, #420]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172c:	e0fd      	b.n	800192a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8088 	beq.w	8001850 <HAL_RCC_OscConfig+0x56c>
 8001740:	2301      	movs	r3, #1
 8001742:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001752:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	2301      	movs	r3, #1
 800176a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff f9ea 	bl	8000b44 <HAL_GetTick>
 8001770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff f9e5 	bl	8000b44 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d902      	bls.n	800178c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	f000 bde2 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800179e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d8>
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e013      	b.n	80017e4 <HAL_RCC_OscConfig+0x500>
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2202      	movs	r2, #2
 80017e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017ee:	fa92 f2a2 	rbit	r2, r2
 80017f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017fa:	fab2 f282 	clz	r2, r2
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f002 021f 	and.w	r2, r2, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0af      	beq.n	8001776 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	21f8      	movs	r1, #248	; 0xf8
 800182c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001834:	fa91 f1a1 	rbit	r1, r1
 8001838:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800183c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001840:	fab1 f181 	clz	r1, r1
 8001844:	b2c9      	uxtb	r1, r1
 8001846:	408b      	lsls	r3, r1
 8001848:	4920      	ldr	r1, [pc, #128]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
 800184e:	e06c      	b.n	800192a <HAL_RCC_OscConfig+0x646>
 8001850:	2301      	movs	r3, #1
 8001852:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff f962 	bl	8000b44 <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff f95d 	bl	8000b44 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d902      	bls.n	800189c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	f000 bd5a 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d104      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5ec>
 80018c6:	4b01      	ldr	r3, [pc, #4]	; (80018cc <HAL_RCC_OscConfig+0x5e8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e015      	b.n	80018f8 <HAL_RCC_OscConfig+0x614>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018f4:	4bc8      	ldr	r3, [pc, #800]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2202      	movs	r2, #2
 80018fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800190a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800190e:	fab2 f282 	clz	r2, r2
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f002 021f 	and.w	r2, r2, #31
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ad      	bne.n	8001886 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8110 	beq.w	8001b60 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d079      	beq.n	8001a44 <HAL_RCC_OscConfig+0x760>
 8001950:	2301      	movs	r3, #1
 8001952:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4bab      	ldr	r3, [pc, #684]	; (8001c1c <HAL_RCC_OscConfig+0x938>)
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	461a      	mov	r2, r3
 8001976:	2301      	movs	r3, #1
 8001978:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff f8e3 	bl	8000b44 <HAL_GetTick>
 800197e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff f8de 	bl	8000b44 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d902      	bls.n	800199a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	f000 bcdb 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 80019f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a00:	2102      	movs	r1, #2
 8001a02:	6019      	str	r1, [r3, #0]
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f1a3 	rbit	r1, r3
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a1a:	6019      	str	r1, [r3, #0]
  return result;
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0a0      	beq.n	8001984 <HAL_RCC_OscConfig+0x6a0>
 8001a42:	e08d      	b.n	8001b60 <HAL_RCC_OscConfig+0x87c>
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a66:	601a      	str	r2, [r3, #0]
  return result;
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x938>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	461a      	mov	r2, r3
 8001a82:	2300      	movs	r3, #0
 8001a84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f85d 	bl	8000b44 <HAL_GetTick>
 8001a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f858 	bl	8000b44 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d902      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f000 bc55 	b.w	8002350 <HAL_RCC_OscConfig+0x106c>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6019      	str	r1, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f1a3 	rbit	r1, r3
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b38:	6019      	str	r1, [r3, #0]
  return result;
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d197      	bne.n	8001a90 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 81a1 	beq.w	8001eb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d116      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	61d3      	str	r3, [r2, #28]
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7fe ffb9 	bl	8000b44 <HAL_GetTick>
 8001bd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd8:	f7fe ffb4 	bl	8000b44 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e3b1      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x93c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10d      	bne.n	8001c24 <HAL_RCC_OscConfig+0x940>
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a02      	ldr	r2, [pc, #8]	; (8001c18 <HAL_RCC_OscConfig+0x934>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e03c      	b.n	8001c90 <HAL_RCC_OscConfig+0x9ac>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	10908120 	.word	0x10908120
 8001c20:	40007000 	.word	0x40007000
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x96a>
 8001c34:	4bc1      	ldr	r3, [pc, #772]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4ac0      	ldr	r2, [pc, #768]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4bbe      	ldr	r3, [pc, #760]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4abd      	ldr	r2, [pc, #756]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e020      	b.n	8001c90 <HAL_RCC_OscConfig+0x9ac>
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x994>
 8001c5e:	4bb7      	ldr	r3, [pc, #732]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4ab6      	ldr	r2, [pc, #728]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4bb4      	ldr	r3, [pc, #720]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4ab3      	ldr	r2, [pc, #716]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0x9ac>
 8001c78:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4aaf      	ldr	r2, [pc, #700]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	4bad      	ldr	r3, [pc, #692]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4aac      	ldr	r2, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8081 	beq.w	8001da4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe ff4f 	bl	8000b44 <HAL_GetTick>
 8001ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7fe ff4a 	bl	8000b44 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e345      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d0a:	601a      	str	r2, [r3, #0]
  return result;
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d102      	bne.n	8001d30 <HAL_RCC_OscConfig+0xa4c>
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0xa74>
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d38:	2202      	movs	r2, #2
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d60:	2102      	movs	r1, #2
 8001d62:	6011      	str	r1, [r2, #0]
 8001d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	fa92 f1a2 	rbit	r1, r2
 8001d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d7a:	6011      	str	r1, [r2, #0]
  return result;
 8001d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d80:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d084      	beq.n	8001cac <HAL_RCC_OscConfig+0x9c8>
 8001da2:	e07f      	b.n	8001ea4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7fe fece 	bl	8000b44 <HAL_GetTick>
 8001da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe fec9 	bl	8000b44 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e2c4      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dce:	2202      	movs	r2, #2
 8001dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001df2:	2202      	movs	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_OscConfig+0xb4e>
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	e013      	b.n	8001e5a <HAL_RCC_OscConfig+0xb76>
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e62:	2102      	movs	r1, #2
 8001e64:	6011      	str	r1, [r2, #0]
 8001e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fa92 f1a2 	rbit	r1, r2
 8001e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e7c:	6011      	str	r1, [r2, #0]
  return result;
 8001e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e82:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	fab2 f282 	clz	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f002 021f 	and.w	r2, r2, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d184      	bne.n	8001dae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8242 	beq.w	800234e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0xc58>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	f000 8213 	beq.w	80022fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	f040 8162 	bne.w	80021ae <HAL_RCC_OscConfig+0xeca>
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f0e:	601a      	str	r2, [r3, #0]
  return result;
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fe08 	bl	8000b44 <HAL_GetTick>
 8001f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	e00c      	b.n	8001f54 <HAL_RCC_OscConfig+0xc70>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7fe fe00 	bl	8000b44 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1fd      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f78:	601a      	str	r2, [r3, #0]
  return result;
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0xcba>
 8001f98:	4bb0      	ldr	r3, [pc, #704]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e027      	b.n	8001fee <HAL_RCC_OscConfig+0xd0a>
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	4b9c      	ldr	r3, [pc, #624]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ff6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ffa:	6011      	str	r1, [r2, #0]
 8001ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002000:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	fa92 f1a2 	rbit	r1, r2
 800200a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800200e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002012:	6011      	str	r1, [r2, #0]
  return result;
 8002014:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002018:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f002 021f 	and.w	r2, r2, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d182      	bne.n	8001f40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	430b      	orrs	r3, r1
 800205c:	497f      	ldr	r1, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
 8002062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002066:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800206a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002090:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fd4c 	bl	8000b44 <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fd47 	bl	8000b44 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e144      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020ea:	601a      	str	r2, [r3, #0]
  return result;
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_RCC_OscConfig+0xe2c>
 800210a:	4b54      	ldr	r3, [pc, #336]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	e027      	b.n	8002160 <HAL_RCC_OscConfig+0xe7c>
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800213e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002164:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002168:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800216c:	6011      	str	r1, [r2, #0]
 800216e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002172:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	fa92 f1a2 	rbit	r1, r2
 800217c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002180:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002184:	6011      	str	r1, [r2, #0]
  return result;
 8002186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d082      	beq.n	80020b2 <HAL_RCC_OscConfig+0xdce>
 80021ac:	e0cf      	b.n	800234e <HAL_RCC_OscConfig+0x106a>
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021d2:	601a      	str	r2, [r3, #0]
  return result;
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fca6 	bl	8000b44 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fca1 	bl	8000b44 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e09e      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800221a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d104      	bne.n	8002260 <HAL_RCC_OscConfig+0xf7c>
 8002256:	4b01      	ldr	r3, [pc, #4]	; (800225c <HAL_RCC_OscConfig+0xf78>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	e029      	b.n	80022b0 <HAL_RCC_OscConfig+0xfcc>
 800225c:	40021000 	.word	0x40021000
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x1078>)
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	fa92 f1a2 	rbit	r1, r2
 80022cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022d4:	6011      	str	r1, [r2, #0]
  return result;
 80022d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f042 0220 	orr.w	r2, r2, #32
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d180      	bne.n	80021fe <HAL_RCC_OscConfig+0xf1a>
 80022fc:	e027      	b.n	800234e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e01e      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_OscConfig+0x1078>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800231a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800231e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	d10b      	bne.n	800234a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002332:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b09e      	sub	sp, #120	; 0x78
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e162      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b90      	ldr	r3, [pc, #576]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	498b      	ldr	r1, [pc, #556]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e14a      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	497f      	ldr	r1, [pc, #508]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80dc 	beq.w	800258c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d13c      	bne.n	8002456 <HAL_RCC_ClockConfig+0xf6>
 80023dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_ClockConfig+0xa6>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e00f      	b.n	8002426 <HAL_RCC_ClockConfig+0xc6>
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	667b      	str	r3, [r7, #100]	; 0x64
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
 800241a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242a:	65ba      	str	r2, [r7, #88]	; 0x58
 800242c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800242e:	fa92 f2a2 	rbit	r2, r2
 8002432:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d17b      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0f3      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d13c      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x178>
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_RCC_ClockConfig+0x128>
 8002482:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_ClockConfig+0x148>
 8002488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80024ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d13a      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b2      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
 80024d8:	2302      	movs	r3, #2
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e00d      	b.n	800251c <HAL_RCC_ClockConfig+0x1bc>
 8002500:	2302      	movs	r3, #2
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	61ba      	str	r2, [r7, #24]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	617a      	str	r2, [r7, #20]
  return result;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e079      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	491a      	ldr	r1, [pc, #104]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe faf2 	bl	8000b44 <HAL_GetTick>
 8002560:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe faee 	bl	8000b44 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e061      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_ClockConfig+0x260>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d214      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_RCC_ClockConfig+0x25c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e040      	b.n	800263e <HAL_RCC_ClockConfig+0x2de>
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	491a      	ldr	r1, [pc, #104]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4912      	ldr	r1, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002602:	f000 f829 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002606:	4601      	mov	r1, r0
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_ClockConfig+0x2e8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	fa92 f2a2 	rbit	r2, r2
 800261a:	60fa      	str	r2, [r7, #12]
  return result;
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	40d3      	lsrs	r3, r2
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x2ec>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	fa21 f303 	lsr.w	r3, r1, r3
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_RCC_ClockConfig+0x2f0>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCC_ClockConfig+0x2f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f99e 	bl	8000978 <HAL_InitTick>
  
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3778      	adds	r7, #120	; 0x78
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	08006990 	.word	0x08006990
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b08b      	sub	sp, #44	; 0x2c
 800265c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x30>
 8002682:	2b08      	cmp	r3, #8
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x36>
 8002686:	e03c      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 800268a:	623b      	str	r3, [r7, #32]
      break;
 800268c:	e03c      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002694:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002698:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	607a      	str	r2, [r7, #4]
  return result;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	40d3      	lsrs	r3, r2
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	220f      	movs	r2, #15
 80026bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	60fa      	str	r2, [r7, #12]
  return result;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	40d3      	lsrs	r3, r2
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	623b      	str	r3, [r7, #32]
      break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002704:	623b      	str	r3, [r7, #32]
      break;
 8002706:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002708:	6a3b      	ldr	r3, [r7, #32]
}
 800270a:	4618      	mov	r0, r3
 800270c:	372c      	adds	r7, #44	; 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	007a1200 	.word	0x007a1200
 8002720:	080069a8 	.word	0x080069a8
 8002724:	080069b8 	.word	0x080069b8
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800274a:	f7ff ffef 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002758:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800275c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	603a      	str	r2, [r7, #0]
  return result;
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	40d3      	lsrs	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	080069a0 	.word	0x080069a0

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800278e:	f7ff ffcd 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002792:	4601      	mov	r1, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800279c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	603a      	str	r2, [r7, #0]
  return result;
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	40d3      	lsrs	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080069a0 	.word	0x080069a0

080027cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	220f      	movs	r2, #15
 80027da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCC_GetClockConfig+0x60>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0207 	and.w	r2, r3, #7
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	40022000 	.word	0x40022000

08002830 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b092      	sub	sp, #72	; 0x48
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80d4 	beq.w	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002854:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10e      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	61d3      	str	r3, [r2, #28]
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b45      	ldr	r3, [pc, #276]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b42      	ldr	r3, [pc, #264]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a41      	ldr	r2, [pc, #260]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe f955 	bl	8000b44 <HAL_GetTick>
 800289a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe f951 	bl	8000b44 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e14b      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8084 	beq.w	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d07c      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	2301      	movs	r3, #1
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	461a      	mov	r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002932:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04b      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe f901 	bl	8000b44 <HAL_GetTick>
 8002942:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe f8fd 	bl	8000b44 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0f5      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
  return result;
 8002974:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d108      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800298a:	4b01      	ldr	r3, [pc, #4]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	e00d      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
 8002998:	10908100 	.word	0x10908100
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2202      	movs	r2, #2
 80029ae:	613a      	str	r2, [r7, #16]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	60fa      	str	r2, [r7, #12]
  return result;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	fab2 f282 	clz	r2, r2
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	f002 021f 	and.w	r2, r2, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0b7      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	495b      	ldr	r1, [pc, #364]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4a56      	ldr	r2, [pc, #344]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a08:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f023 0203 	bic.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494e      	ldr	r1, [pc, #312]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f023 0210 	bic.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4947      	ldr	r1, [pc, #284]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	493f      	ldr	r1, [pc, #252]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f023 0220 	bic.w	r2, r3, #32
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4938      	ldr	r1, [pc, #224]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4930      	ldr	r1, [pc, #192]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4929      	ldr	r1, [pc, #164]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4921      	ldr	r1, [pc, #132]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	491a      	ldr	r1, [pc, #104]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	4912      	ldr	r1, [pc, #72]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	490b      	ldr	r1, [pc, #44]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3748      	adds	r7, #72	; 0x48
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e049      	b.n	8002bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f841 	bl	8002c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 f9dc 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d001      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e03b      	b.n	8002ca8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_TIM_Base_Start_IT+0x4e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIM_Base_Start_IT+0x4e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d115      	bne.n	8002c92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_TIM_Base_Start_IT+0xa4>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d015      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x8c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d011      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c90:	e008      	b.n	8002ca4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	00010007 	.word	0x00010007

08002cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0202 	mvn.w	r2, #2
 8002cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f905 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8f7 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f908 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0204 	mvn.w	r2, #4
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8db 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8cd 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f8de 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d122      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0208 	mvn.w	r2, #8
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8b1 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8a3 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8b4 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d122      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d11b      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0210 	mvn.w	r2, #16
 8002de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2208      	movs	r2, #8
 8002dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f887 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f879 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f88a 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0201 	mvn.w	r2, #1
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fcd6 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8e8 	bl	8003040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7e:	d10e      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d107      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f8db 	bl	8003054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d10e      	bne.n	8002eca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f838 	bl	8002f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0220 	mvn.w	r2, #32
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f89b 	bl	800302c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <TIM_Base_SetConfig+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x20>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a25      	ldr	r2, [pc, #148]	; (800301c <TIM_Base_SetConfig+0xcc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <TIM_Base_SetConfig+0xd4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <TIM_Base_SetConfig+0xd8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	; (800301c <TIM_Base_SetConfig+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_Base_SetConfig+0xb0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <TIM_Base_SetConfig+0xd0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0xb0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <TIM_Base_SetConfig+0xd4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0xb0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <TIM_Base_SetConfig+0xd8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40014000 	.word	0x40014000
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800

0800302c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e040      	b.n	80030fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fc30 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f980 	bl	80033ac <UART_SetConfig>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e022      	b.n	80030fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 faaa 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fb31 	bl	800375c <UART_CheckIdleState>
 80030fa:	4603      	mov	r3, r0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003118:	2b20      	cmp	r3, #32
 800311a:	d178      	bne.n	800320e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Transmit+0x24>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e071      	b.n	8003210 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2221      	movs	r2, #33	; 0x21
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313a:	f7fd fd03 	bl	8000b44 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d108      	bne.n	800316c <HAL_UART_Transmit+0x68>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e003      	b.n	8003174 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003174:	e030      	b.n	80031d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fb93 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e03c      	b.n	8003210 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a8:	b292      	uxth	r2, r2
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	3302      	adds	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e008      	b.n	80031c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b292      	uxth	r2, r2
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	3301      	adds	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1c8      	bne.n	8003176 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb5c 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e005      	b.n	8003210 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	2b20      	cmp	r3, #32
 8003230:	f040 80b6 	bne.w	80033a0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Receive+0x28>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0ae      	b.n	80033a2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2222      	movs	r2, #34	; 0x22
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325a:	f7fd fc73 	bl	8000b44 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003278:	d10e      	bne.n	8003298 <HAL_UART_Receive+0x80>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_UART_Receive+0x76>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800328c:	e02d      	b.n	80032ea <HAL_UART_Receive+0xd2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003296:	e028      	b.n	80032ea <HAL_UART_Receive+0xd2>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_UART_Receive+0xa4>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_UART_Receive+0x9a>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	22ff      	movs	r2, #255	; 0xff
 80032ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b0:	e01b      	b.n	80032ea <HAL_UART_Receive+0xd2>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	227f      	movs	r2, #127	; 0x7f
 80032b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032ba:	e016      	b.n	80032ea <HAL_UART_Receive+0xd2>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c4:	d10d      	bne.n	80032e2 <HAL_UART_Receive+0xca>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <HAL_UART_Receive+0xc0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	227f      	movs	r2, #127	; 0x7f
 80032d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032d6:	e008      	b.n	80032ea <HAL_UART_Receive+0xd2>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	223f      	movs	r2, #63	; 0x3f
 80032dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032e0:	e003      	b.n	80032ea <HAL_UART_Receive+0xd2>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fa:	d108      	bne.n	800330e <HAL_UART_Receive+0xf6>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e003      	b.n	8003316 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003316:	e037      	b.n	8003388 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	2120      	movs	r1, #32
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fac2 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e033      	b.n	80033a2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003346:	b29a      	uxth	r2, r3
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	4013      	ands	r3, r2
 800334c:	b29a      	uxth	r2, r3
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3302      	adds	r3, #2
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e00d      	b.n	8003376 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003360:	b29b      	uxth	r3, r3
 8003362:	b2da      	uxtb	r2, r3
 8003364:	8a7b      	ldrh	r3, [r7, #18]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4013      	ands	r3, r2
 800336a:	b2da      	uxtb	r2, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	3301      	adds	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1c1      	bne.n	8003318 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b8a      	ldr	r3, [pc, #552]	; (8003600 <UART_SetConfig+0x254>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	6979      	ldr	r1, [r7, #20]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a78      	ldr	r2, [pc, #480]	; (8003604 <UART_SetConfig+0x258>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <UART_SetConfig+0xbe>
 8003428:	4b77      	ldr	r3, [pc, #476]	; (8003608 <UART_SetConfig+0x25c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d817      	bhi.n	8003464 <UART_SetConfig+0xb8>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x90>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003459 	.word	0x08003459
 8003444:	0800345f 	.word	0x0800345f
 8003448:	08003453 	.word	0x08003453
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e01d      	b.n	800348e <UART_SetConfig+0xe2>
 8003452:	2302      	movs	r3, #2
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e01a      	b.n	800348e <UART_SetConfig+0xe2>
 8003458:	2304      	movs	r3, #4
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e017      	b.n	800348e <UART_SetConfig+0xe2>
 800345e:	2308      	movs	r3, #8
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e014      	b.n	800348e <UART_SetConfig+0xe2>
 8003464:	2310      	movs	r3, #16
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e011      	b.n	800348e <UART_SetConfig+0xe2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a67      	ldr	r2, [pc, #412]	; (800360c <UART_SetConfig+0x260>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <UART_SetConfig+0xce>
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e009      	b.n	800348e <UART_SetConfig+0xe2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a64      	ldr	r2, [pc, #400]	; (8003610 <UART_SetConfig+0x264>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <UART_SetConfig+0xde>
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e001      	b.n	800348e <UART_SetConfig+0xe2>
 800348a:	2310      	movs	r3, #16
 800348c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d15a      	bne.n	800354e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d827      	bhi.n	80034ee <UART_SetConfig+0x142>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0xf8>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034ef 	.word	0x080034ef
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034ef 	.word	0x080034ef
 80034c0:	080034ef 	.word	0x080034ef
 80034c4:	080034e7 	.word	0x080034e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7ff f93c 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80034cc:	61b8      	str	r0, [r7, #24]
        break;
 80034ce:	e013      	b.n	80034f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7ff f95a 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 80034d4:	61b8      	str	r0, [r7, #24]
        break;
 80034d6:	e00f      	b.n	80034f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <UART_SetConfig+0x268>)
 80034da:	61bb      	str	r3, [r7, #24]
        break;
 80034dc:	e00c      	b.n	80034f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7ff f8bb 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80034e2:	61b8      	str	r0, [r7, #24]
        break;
 80034e4:	e008      	b.n	80034f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e004      	b.n	80034f8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	77bb      	strb	r3, [r7, #30]
        break;
 80034f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d074      	beq.n	80035e8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	005a      	lsls	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d916      	bls.n	8003548 <UART_SetConfig+0x19c>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d212      	bcs.n	8003548 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f023 030f 	bic.w	r3, r3, #15
 800352a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	b29a      	uxth	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	4313      	orrs	r3, r2
 800353c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	89fa      	ldrh	r2, [r7, #14]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	e04f      	b.n	80035e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77bb      	strb	r3, [r7, #30]
 800354c:	e04c      	b.n	80035e8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d828      	bhi.n	80035a6 <UART_SetConfig+0x1fa>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x1b0>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
 8003568:	080035a7 	.word	0x080035a7
 800356c:	08003597 	.word	0x08003597
 8003570:	080035a7 	.word	0x080035a7
 8003574:	080035a7 	.word	0x080035a7
 8003578:	080035a7 	.word	0x080035a7
 800357c:	0800359f 	.word	0x0800359f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff f8e0 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003584:	61b8      	str	r0, [r7, #24]
        break;
 8003586:	e013      	b.n	80035b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff f8fe 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e00f      	b.n	80035b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <UART_SetConfig+0x268>)
 8003592:	61bb      	str	r3, [r7, #24]
        break;
 8003594:	e00c      	b.n	80035b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7ff f85f 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 800359a:	61b8      	str	r0, [r7, #24]
        break;
 800359c:	e008      	b.n	80035b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	61bb      	str	r3, [r7, #24]
        break;
 80035a4:	e004      	b.n	80035b0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	77bb      	strb	r3, [r7, #30]
        break;
 80035ae:	bf00      	nop
    }

    if (pclk != 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d018      	beq.n	80035e8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	085a      	lsrs	r2, r3, #1
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d909      	bls.n	80035e4 <UART_SetConfig+0x238>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d6:	d205      	bcs.n	80035e4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	e001      	b.n	80035e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	efff69f3 	.word	0xefff69f3
 8003604:	40013800 	.word	0x40013800
 8003608:	40021000 	.word	0x40021000
 800360c:	40004400 	.word	0x40004400
 8003610:	40004800 	.word	0x40004800
 8003614:	007a1200 	.word	0x007a1200

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d10a      	bne.n	800372e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b098      	sub	sp, #96	; 0x60
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800376c:	f7fd f9ea 	bl	8000b44 <HAL_GetTick>
 8003770:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d12e      	bne.n	80037de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f88c 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ae:	653b      	str	r3, [r7, #80]	; 0x50
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e062      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d149      	bne.n	8003880 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f856 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	623b      	str	r3, [r7, #32]
   return(result);
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800382a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60fb      	str	r3, [r7, #12]
   return(result);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	617b      	str	r3, [r7, #20]
   return(result);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e011      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3758      	adds	r7, #88	; 0x58
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e049      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d045      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd f93d 	bl	8000b44 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e048      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d031      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d110      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f838 	bl	800397a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2208      	movs	r2, #8
 800390e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e029      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d111      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f81e 	bl	800397a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	429a      	cmp	r2, r3
 800396e:	d0a6      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b095      	sub	sp, #84	; 0x54
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d118      	bne.n	8003a22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a36:	bf00      	nop
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a54:	2b84      	cmp	r3, #132	; 0x84
 8003a56:	d005      	beq.n	8003a64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3303      	adds	r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a64:	68fb      	ldr	r3, [r7, #12]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a76:	f001 f8ad 	bl	8004bd4 <vTaskStartScheduler>
  
  return osOK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685c      	ldr	r4, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a96:	b29e      	uxth	r6, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ffcf 	bl	8003a42 <makeFreeRtosPriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f000 ff2b 	bl	8004910 <xTaskCreate>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ace <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <osDelay+0x16>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	e000      	b.n	8003ae6 <osDelay+0x18>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f840 	bl	8004b6c <vTaskDelay>
  
  return osOK;
 8003aec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f103 0208 	add.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f103 0208 	add.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d103      	bne.n	8003bb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e00c      	b.n	8003bd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <vListInsert+0x2e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d2f6      	bcs.n	8003bc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6852      	ldr	r2, [r2, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d103      	bne.n	8003c3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c8a:	f002 fafb 	bl	8006284 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fa25 	bl	800513c <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <xQueueGenericReset+0xcc>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	e009      	b.n	8003d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fef1 	bl	8003af6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff feec 	bl	8003af6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f002 fae1 	bl	80062e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d22:	2301      	movs	r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e004      	b.n	8003d70 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3348      	adds	r3, #72	; 0x48
 8003d74:	4618      	mov	r0, r3
 8003d76:	f002 fba7 	bl	80064c8 <pvPortMalloc>
 8003d7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3348      	adds	r3, #72	; 0x48
 8003d86:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d88:	79fa      	ldrb	r2, [r7, #7]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f805 	bl	8003da4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e002      	b.n	8003dc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	69b8      	ldr	r0, [r7, #24]
 8003dd6:	f7ff ff43 	bl	8003c60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003df2:	2300      	movs	r3, #0
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <xQueueGenericSend+0x32>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <xQueueGenericSend+0x40>
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <xQueueGenericSend+0x44>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <xQueueGenericSend+0x46>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xQueueGenericSend+0x60>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d103      	bne.n	8003e52 <xQueueGenericSend+0x6e>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <xQueueGenericSend+0x72>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueGenericSend+0x74>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	623b      	str	r3, [r7, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e72:	f001 fb31 	bl	80054d8 <xTaskGetSchedulerState>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <xQueueGenericSend+0x9e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <xQueueGenericSend+0xa2>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericSend+0xa4>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61fb      	str	r3, [r7, #28]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ea2:	f002 f9ef 	bl	8006284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <xQueueGenericSend+0xd4>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d129      	bne.n	8003f0c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ebe:	f000 fbb9 	bl	8004634 <prvCopyDataToQueue>
 8003ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f933 	bl	800513c <xTaskRemoveFromEventList>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	e00a      	b.n	8003f04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f04:	f002 f9ee 	bl	80062e4 <vPortExitCritical>
				return pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e063      	b.n	8003fd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f12:	f002 f9e7 	bl	80062e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e05c      	b.n	8003fd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f96d 	bl	8005204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f2e:	f002 f9d9 	bl	80062e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f32:	f000 fe9d 	bl	8004c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f36:	f002 f9a5 	bl	8006284 <vPortEnterCritical>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d103      	bne.n	8003f50 <xQueueGenericSend+0x16c>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSend+0x182>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f66:	f002 f9bd 	bl	80062e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f6a:	1d3a      	adds	r2, r7, #4
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f95c 	bl	8005230 <xTaskCheckForTimeOut>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d124      	bne.n	8003fc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f80:	f000 fc50 	bl	8004824 <prvIsQueueFull>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f882 	bl	800509c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9a:	f000 fbdb 	bl	8004754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f9e:	f000 feaf 	bl	8004d00 <xTaskResumeAll>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f af7c 	bne.w	8003ea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	e772      	b.n	8003ea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 fbc9 	bl	8004754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fc2:	f000 fe9d 	bl	8004d00 <xTaskResumeAll>
 8003fc6:	e76c      	b.n	8003ea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fca:	f000 fbc3 	bl	8004754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fce:	f000 fe97 	bl	8004d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fd2:	2300      	movs	r3, #0
		}
	}
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3738      	adds	r7, #56	; 0x38
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	; 0x38
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <xQueueGenericSendFromISR+0x3c>
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <xQueueGenericSendFromISR+0x40>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <xQueueGenericSendFromISR+0x42>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	623b      	str	r3, [r7, #32]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <xQueueGenericSendFromISR+0x6a>
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <xQueueGenericSendFromISR+0x6e>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <xQueueGenericSendFromISR+0x70>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	61fb      	str	r3, [r7, #28]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406a:	f002 f9ed 	bl	8006448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800406e:	f3ef 8211 	mrs	r2, BASEPRI
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61ba      	str	r2, [r7, #24]
 8004084:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004086:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <xQueueGenericSendFromISR+0xbc>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d12c      	bne.n	80040f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ac:	f000 fac2 	bl	8004634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d112      	bne.n	80040e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	3324      	adds	r3, #36	; 0x24
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 f838 	bl	800513c <xTaskRemoveFromEventList>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040e4:	3301      	adds	r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040f4:	e001      	b.n	80040fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004104:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004108:	4618      	mov	r0, r3
 800410a:	3738      	adds	r7, #56	; 0x38
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	623b      	str	r3, [r7, #32]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	61fb      	str	r3, [r7, #28]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <xQueueGiveFromISR+0x58>
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueGiveFromISR+0x5c>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueGiveFromISR+0x5e>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61bb      	str	r3, [r7, #24]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004188:	f002 f95e 	bl	8006448 <vPortValidateInterruptPriority>
	__asm volatile
 800418c:	f3ef 8211 	mrs	r2, BASEPRI
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	617a      	str	r2, [r7, #20]
 80041a2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80041a4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d22b      	bcs.n	8004210 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d112      	bne.n	80041fa <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	3324      	adds	r3, #36	; 0x24
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ffab 	bl	800513c <xTaskRemoveFromEventList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e007      	b.n	800420a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041fe:	3301      	adds	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	b25a      	sxtb	r2, r3
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800420a:	2301      	movs	r3, #1
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e001      	b.n	8004214 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004210:	2300      	movs	r3, #0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f383 8811 	msr	BASEPRI, r3
}
 800421e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004222:	4618      	mov	r0, r3
 8004224:	3738      	adds	r7, #56	; 0x38
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <xQueueReceive+0x30>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	623b      	str	r3, [r7, #32]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueReceive+0x3e>
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <xQueueReceive+0x42>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <xQueueReceive+0x44>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xQueueReceive+0x5e>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61fb      	str	r3, [r7, #28]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428a:	f001 f925 	bl	80054d8 <xTaskGetSchedulerState>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <xQueueReceive+0x6e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueReceive+0x72>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xQueueReceive+0x74>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueReceive+0x8e>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	61bb      	str	r3, [r7, #24]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ba:	f001 ffe3 	bl	8006284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01f      	beq.n	800430a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ce:	f000 fa1b 	bl	8004708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00f      	beq.n	8004302 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 ff28 	bl	800513c <xTaskRemoveFromEventList>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <xQueueReceive+0x1bc>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004302:	f001 ffef 	bl	80062e4 <vPortExitCritical>
				return pdPASS;
 8004306:	2301      	movs	r3, #1
 8004308:	e069      	b.n	80043de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004310:	f001 ffe8 	bl	80062e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004314:	2300      	movs	r3, #0
 8004316:	e062      	b.n	80043de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	4618      	mov	r0, r3
 8004324:	f000 ff6e 	bl	8005204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432c:	f001 ffda 	bl	80062e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004330:	f000 fc9e 	bl	8004c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004334:	f001 ffa6 	bl	8006284 <vPortEnterCritical>
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <xQueueReceive+0x122>
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <xQueueReceive+0x138>
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	f001 ffbe 	bl	80062e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004368:	1d3a      	adds	r2, r7, #4
 800436a:	f107 0310 	add.w	r3, r7, #16
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff5d 	bl	8005230 <xTaskCheckForTimeOut>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d123      	bne.n	80043c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437e:	f000 fa3b 	bl	80047f8 <prvIsQueueEmpty>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	3324      	adds	r3, #36	; 0x24
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fe83 	bl	800509c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004398:	f000 f9dc 	bl	8004754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800439c:	f000 fcb0 	bl	8004d00 <xTaskResumeAll>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d189      	bne.n	80042ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <xQueueReceive+0x1bc>)
 80043a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	e780      	b.n	80042ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 f9cb 	bl	8004754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043be:	f000 fc9f 	bl	8004d00 <xTaskResumeAll>
 80043c2:	e77a      	b.n	80042ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c6:	f000 f9c5 	bl	8004754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ca:	f000 fc99 	bl	8004d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d0:	f000 fa12 	bl	80047f8 <prvIsQueueEmpty>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f43f af6f 	beq.w	80042ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	623b      	str	r3, [r7, #32]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	61fb      	str	r3, [r7, #28]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800443c:	f001 f84c 	bl	80054d8 <xTaskGetSchedulerState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <xQueueSemaphoreTake+0x60>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueSemaphoreTake+0x64>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueSemaphoreTake+0x66>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61bb      	str	r3, [r7, #24]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800446c:	f001 ff0a 	bl	8006284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d024      	beq.n	80044c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	1e5a      	subs	r2, r3, #1
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800448c:	f001 f9ee 	bl	800586c <pvTaskIncrementMutexHeldCount>
 8004490:	4602      	mov	r2, r0
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00f      	beq.n	80044be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	3310      	adds	r3, #16
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fe4a 	bl	800513c <xTaskRemoveFromEventList>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <xQueueSemaphoreTake+0x214>)
 80044b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044be:	f001 ff11 	bl	80062e4 <vPortExitCritical>
				return pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e097      	b.n	80045f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d111      	bne.n	80044f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	617b      	str	r3, [r7, #20]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80044e8:	f001 fefc 	bl	80062e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e082      	b.n	80045f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fe82 	bl	8005204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004504:	f001 feee 	bl	80062e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004508:	f000 fbb2 	bl	8004c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800450c:	f001 feba 	bl	8006284 <vPortEnterCritical>
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004516:	b25b      	sxtb	r3, r3
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d103      	bne.n	8004526 <xQueueSemaphoreTake+0x13a>
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d103      	bne.n	800453c <xQueueSemaphoreTake+0x150>
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800453c:	f001 fed2 	bl	80062e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004540:	463a      	mov	r2, r7
 8004542:	f107 030c 	add.w	r3, r7, #12
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fe71 	bl	8005230 <xTaskCheckForTimeOut>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d132      	bne.n	80045ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004556:	f000 f94f 	bl	80047f8 <prvIsQueueEmpty>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d026      	beq.n	80045ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004568:	f001 fe8c 	bl	8006284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ffcf 	bl	8005514 <xTaskPriorityInherit>
 8004576:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004578:	f001 feb4 	bl	80062e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fd89 	bl	800509c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800458a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800458c:	f000 f8e2 	bl	8004754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004590:	f000 fbb6 	bl	8004d00 <xTaskResumeAll>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	f47f af68 	bne.w	800446c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800459c:	4b18      	ldr	r3, [pc, #96]	; (8004600 <xQueueSemaphoreTake+0x214>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	e75e      	b.n	800446c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80045ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045b0:	f000 f8d0 	bl	8004754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b4:	f000 fba4 	bl	8004d00 <xTaskResumeAll>
 80045b8:	e758      	b.n	800446c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80045ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045bc:	f000 f8ca 	bl	8004754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045c0:	f000 fb9e 	bl	8004d00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045c6:	f000 f917 	bl	80047f8 <prvIsQueueEmpty>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f43f af4d 	beq.w	800446c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80045d8:	f001 fe54 	bl	8006284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045de:	f000 f811 	bl	8004604 <prvGetDisinheritPriorityAfterTimeout>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f89e 	bl	800572c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80045f0:	f001 fe78 	bl	80062e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3738      	adds	r7, #56	; 0x38
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e001      	b.n	8004626 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004626:	68fb      	ldr	r3, [r7, #12]
	}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10d      	bne.n	800466e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d14d      	bne.n	80046f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 ffde 	bl	8005620 <xTaskPriorityDisinherit>
 8004664:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e043      	b.n	80046f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d119      	bne.n	80046a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6898      	ldr	r0, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	f002 f920 	bl	80068c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	441a      	add	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d32b      	bcc.n	80046f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	e026      	b.n	80046f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68d8      	ldr	r0, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	461a      	mov	r2, r3
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	f002 f906 	bl	80068c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	425b      	negs	r3, r3
 80046c2:	441a      	add	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d207      	bcs.n	80046e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	425b      	negs	r3, r3
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d105      	bne.n	80046f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d018      	beq.n	800474c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d303      	bcc.n	800473c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	461a      	mov	r2, r3
 8004746:	6838      	ldr	r0, [r7, #0]
 8004748:	f002 f8bc 	bl	80068c4 <memcpy>
	}
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800475c:	f001 fd92 	bl	8006284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004768:	e011      	b.n	800478e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d012      	beq.n	8004798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3324      	adds	r3, #36	; 0x24
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fce0 	bl	800513c <xTaskRemoveFromEventList>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004782:	f000 fdb7 	bl	80052f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	3b01      	subs	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	dce9      	bgt.n	800476a <prvUnlockQueue+0x16>
 8004796:	e000      	b.n	800479a <prvUnlockQueue+0x46>
					break;
 8004798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047a2:	f001 fd9f 	bl	80062e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047a6:	f001 fd6d 	bl	8006284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b2:	e011      	b.n	80047d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3310      	adds	r3, #16
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fcbb 	bl	800513c <xTaskRemoveFromEventList>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047cc:	f000 fd92 	bl	80052f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d0:	7bbb      	ldrb	r3, [r7, #14]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dce9      	bgt.n	80047b4 <prvUnlockQueue+0x60>
 80047e0:	e000      	b.n	80047e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	22ff      	movs	r2, #255	; 0xff
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047ec:	f001 fd7a 	bl	80062e4 <vPortExitCritical>
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004800:	f001 fd40 	bl	8006284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e001      	b.n	8004816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004816:	f001 fd65 	bl	80062e4 <vPortExitCritical>

	return xReturn;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800482c:	f001 fd2a 	bl	8006284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	429a      	cmp	r2, r3
 800483a:	d102      	bne.n	8004842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e001      	b.n	8004846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004846:	f001 fd4d 	bl	80062e4 <vPortExitCritical>

	return xReturn;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e014      	b.n	800488e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004864:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <vQueueAddToRegistry+0x50>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004870:	490c      	ldr	r1, [pc, #48]	; (80048a4 <vQueueAddToRegistry+0x50>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <vQueueAddToRegistry+0x50>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004886:	e006      	b.n	8004896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b07      	cmp	r3, #7
 8004892:	d9e7      	bls.n	8004864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000017c 	.word	0x2000017c

080048a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048b8:	f001 fce4 	bl	8006284 <vPortEnterCritical>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d103      	bne.n	80048d2 <vQueueWaitForMessageRestricted+0x2a>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d103      	bne.n	80048e8 <vQueueWaitForMessageRestricted+0x40>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e8:	f001 fcfc 	bl	80062e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fbf1 	bl	80050e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff26 	bl	8004754 <prvUnlockQueue>
	}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af04      	add	r7, sp, #16
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fdcf 	bl	80064c8 <pvPortMalloc>
 800492a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004932:	2058      	movs	r0, #88	; 0x58
 8004934:	f001 fdc8 	bl	80064c8 <pvPortMalloc>
 8004938:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
 8004946:	e005      	b.n	8004954 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004948:	6978      	ldr	r0, [r7, #20]
 800494a:	f001 fe81 	bl	8006650 <vPortFree>
 800494e:	e001      	b.n	8004954 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	2300      	movs	r3, #0
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f80e 	bl	8004992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004976:	69f8      	ldr	r0, [r7, #28]
 8004978:	f000 f88e 	bl	8004a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e002      	b.n	8004988 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004988:	69bb      	ldr	r3, [r7, #24]
	}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b088      	sub	sp, #32
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049aa:	3b01      	subs	r3, #1
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f023 0307 	bic.w	r3, r3, #7
 80049b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <prvInitialiseNewTask+0x48>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	617b      	str	r3, [r7, #20]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <prvInitialiseNewTask+0x46>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e012      	b.n	8004a0c <prvInitialiseNewTask+0x7a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	7819      	ldrb	r1, [r3, #0]
 80049ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	3334      	adds	r3, #52	; 0x34
 80049f6:	460a      	mov	r2, r1
 80049f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <prvInitialiseNewTask+0x82>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d9e9      	bls.n	80049e6 <prvInitialiseNewTask+0x54>
 8004a12:	e000      	b.n	8004a16 <prvInitialiseNewTask+0x84>
		{
			break;
 8004a14:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d901      	bls.n	8004a28 <prvInitialiseNewTask+0x96>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a24:	2306      	movs	r3, #6
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	2200      	movs	r2, #0
 8004a38:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff f879 	bl	8003b36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	3318      	adds	r3, #24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff f874 	bl	8003b36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	f1c3 0207 	rsb	r2, r3, #7
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	2200      	movs	r2, #0
 8004a68:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68f9      	ldr	r1, [r7, #12]
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f001 fad4 	bl	8006024 <pxPortInitialiseStack>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a8e:	bf00      	nop
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004aa0:	f001 fbf0 	bl	8006284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <prvAddNewTaskToReadyList+0xb8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <prvAddNewTaskToReadyList+0xb8>)
 8004aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aae:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <prvAddNewTaskToReadyList+0xbc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ab6:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <prvAddNewTaskToReadyList+0xbc>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <prvAddNewTaskToReadyList+0xb8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d110      	bne.n	8004ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ac4:	f000 fc64 	bl	8005390 <prvInitialiseTaskLists>
 8004ac8:	e00d      	b.n	8004ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aca:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <prvAddNewTaskToReadyList+0xc0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ad2:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <prvAddNewTaskToReadyList+0xbc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d802      	bhi.n	8004ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <prvAddNewTaskToReadyList+0xbc>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <prvAddNewTaskToReadyList+0xc4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <prvAddNewTaskToReadyList+0xc4>)
 8004aee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <prvAddNewTaskToReadyList+0xc8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <prvAddNewTaskToReadyList+0xc8>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <prvAddNewTaskToReadyList+0xcc>)
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7ff f819 	bl	8003b50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b1e:	f001 fbe1 	bl	80062e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <prvAddNewTaskToReadyList+0xc0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <prvAddNewTaskToReadyList+0xbc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d207      	bcs.n	8004b48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvAddNewTaskToReadyList+0xd0>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200002bc 	.word	0x200002bc
 8004b54:	200001bc 	.word	0x200001bc
 8004b58:	200002c8 	.word	0x200002c8
 8004b5c:	200002d8 	.word	0x200002d8
 8004b60:	200002c4 	.word	0x200002c4
 8004b64:	200001c0 	.word	0x200001c0
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d017      	beq.n	8004bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <vTaskDelay+0x60>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <vTaskDelay+0x30>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b9c:	f000 f868 	bl	8004c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fe76 	bl	8005894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ba8:	f000 f8aa 	bl	8004d00 <xTaskResumeAll>
 8004bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <vTaskDelay+0x64>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200002e4 	.word	0x200002e4
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004bda:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <vTaskStartScheduler+0x84>)
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	491d      	ldr	r1, [pc, #116]	; (8004c5c <vTaskStartScheduler+0x88>)
 8004be8:	481d      	ldr	r0, [pc, #116]	; (8004c60 <vTaskStartScheduler+0x8c>)
 8004bea:	f7ff fe91 	bl	8004910 <xTaskCreate>
 8004bee:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004bf6:	f000 feb3 	bl	8005960 <xTimerCreateTimerTask>
 8004bfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d116      	bne.n	8004c30 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60bb      	str	r3, [r7, #8]
}
 8004c14:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <vTaskStartScheduler+0x90>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <vTaskStartScheduler+0x94>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <vTaskStartScheduler+0x98>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2a:	f001 fa89 	bl	8006140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2e:	e00e      	b.n	8004c4e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d10a      	bne.n	8004c4e <vTaskStartScheduler+0x7a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	607b      	str	r3, [r7, #4]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vTaskStartScheduler+0x78>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200002e0 	.word	0x200002e0
 8004c5c:	08006978 	.word	0x08006978
 8004c60:	0800530d 	.word	0x0800530d
 8004c64:	200002dc 	.word	0x200002dc
 8004c68:	200002c8 	.word	0x200002c8
 8004c6c:	200002c0 	.word	0x200002c0

08004c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <vTaskSuspendAll+0x18>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <vTaskSuspendAll+0x18>)
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	200002e4 	.word	0x200002e4

08004c8c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 8004c96:	2301      	movs	r3, #1
 8004c98:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <prvGetExpectedIdleTime+0x60>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d201      	bcs.n	8004ca8 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <prvGetExpectedIdleTime+0x64>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e012      	b.n	8004cde <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <prvGetExpectedIdleTime+0x68>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d902      	bls.n	8004cc6 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e00b      	b.n	8004cde <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e005      	b.n	8004cde <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <prvGetExpectedIdleTime+0x6c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <prvGetExpectedIdleTime+0x70>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8004cde:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	200002c4 	.word	0x200002c4
 8004cf0:	200001bc 	.word	0x200001bc
 8004cf4:	200001c0 	.word	0x200001c0
 8004cf8:	200002dc 	.word	0x200002dc
 8004cfc:	200002c0 	.word	0x200002c0

08004d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d0e:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <xTaskResumeAll+0x114>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	603b      	str	r3, [r7, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d2c:	f001 faaa 	bl	8006284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d30:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <xTaskResumeAll+0x114>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	4a37      	ldr	r2, [pc, #220]	; (8004e14 <xTaskResumeAll+0x114>)
 8004d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <xTaskResumeAll+0x114>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d161      	bne.n	8004e06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d42:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <xTaskResumeAll+0x118>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d05d      	beq.n	8004e06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d4a:	e02e      	b.n	8004daa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <xTaskResumeAll+0x11c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3318      	adds	r3, #24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe ff56 	bl	8003c0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe ff51 	bl	8003c0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <xTaskResumeAll+0x120>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <xTaskResumeAll+0x120>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <xTaskResumeAll+0x124>)
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe fedd 	bl	8003b50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <xTaskResumeAll+0x128>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <xTaskResumeAll+0x12c>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004daa:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <xTaskResumeAll+0x11c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1cc      	bne.n	8004d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004db8:	f000 fb68 	bl	800548c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <xTaskResumeAll+0x130>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dc8:	f000 f846 	bl	8004e58 <xTaskIncrementTick>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004dd2:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <xTaskResumeAll+0x12c>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f1      	bne.n	8004dc8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <xTaskResumeAll+0x130>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <xTaskResumeAll+0x12c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004df6:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <xTaskResumeAll+0x134>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e06:	f001 fa6d 	bl	80062e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200002e4 	.word	0x200002e4
 8004e18:	200002bc 	.word	0x200002bc
 8004e1c:	2000027c 	.word	0x2000027c
 8004e20:	200002c4 	.word	0x200002c4
 8004e24:	200001c0 	.word	0x200001c0
 8004e28:	200001bc 	.word	0x200001bc
 8004e2c:	200002d0 	.word	0x200002d0
 8004e30:	200002cc 	.word	0x200002cc
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <xTaskGetTickCount+0x1c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e44:	687b      	ldr	r3, [r7, #4]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	200002c0 	.word	0x200002c0

08004e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e62:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <xTaskIncrementTick+0x160>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 8093 	bne.w	8004f92 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <xTaskIncrementTick+0x164>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e74:	4a51      	ldr	r2, [pc, #324]	; (8004fbc <xTaskIncrementTick+0x164>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d120      	bne.n	8004ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e80:	4b4f      	ldr	r3, [pc, #316]	; (8004fc0 <xTaskIncrementTick+0x168>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	603b      	str	r3, [r7, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <xTaskIncrementTick+0x46>
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <xTaskIncrementTick+0x168>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <xTaskIncrementTick+0x16c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a45      	ldr	r2, [pc, #276]	; (8004fc0 <xTaskIncrementTick+0x168>)
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4a45      	ldr	r2, [pc, #276]	; (8004fc4 <xTaskIncrementTick+0x16c>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b44      	ldr	r3, [pc, #272]	; (8004fc8 <xTaskIncrementTick+0x170>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a43      	ldr	r2, [pc, #268]	; (8004fc8 <xTaskIncrementTick+0x170>)
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	f000 fae5 	bl	800548c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec2:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <xTaskIncrementTick+0x174>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d34d      	bcc.n	8004f68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ecc:	4b3c      	ldr	r3, [pc, #240]	; (8004fc0 <xTaskIncrementTick+0x168>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <xTaskIncrementTick+0x82>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xTaskIncrementTick+0x84>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee0:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <xTaskIncrementTick+0x174>)
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	601a      	str	r2, [r3, #0]
					break;
 8004ee8:	e03e      	b.n	8004f68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eea:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <xTaskIncrementTick+0x168>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d203      	bcs.n	8004f0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f02:	4a32      	ldr	r2, [pc, #200]	; (8004fcc <xTaskIncrementTick+0x174>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6013      	str	r3, [r2, #0]
						break;
 8004f08:	e02e      	b.n	8004f68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fe7b 	bl	8003c0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fe72 	bl	8003c0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <xTaskIncrementTick+0x178>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <xTaskIncrementTick+0x178>)
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <xTaskIncrementTick+0x17c>)
 8004f46:	441a      	add	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fdfe 	bl	8003b50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <xTaskIncrementTick+0x180>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3b4      	bcc.n	8004ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f66:	e7b1      	b.n	8004ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <xTaskIncrementTick+0x180>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4919      	ldr	r1, [pc, #100]	; (8004fd4 <xTaskIncrementTick+0x17c>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d901      	bls.n	8004f84 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004f84:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <xTaskIncrementTick+0x184>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8004f8c:	f7fb fb80 	bl	8000690 <vApplicationTickHook>
 8004f90:	e006      	b.n	8004fa0 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f92:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <xTaskIncrementTick+0x184>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3301      	adds	r3, #1
 8004f98:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <xTaskIncrementTick+0x184>)
 8004f9a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004f9c:	f7fb fb78 	bl	8000690 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <xTaskIncrementTick+0x188>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fac:	697b      	ldr	r3, [r7, #20]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200002e4 	.word	0x200002e4
 8004fbc:	200002c0 	.word	0x200002c0
 8004fc0:	20000274 	.word	0x20000274
 8004fc4:	20000278 	.word	0x20000278
 8004fc8:	200002d4 	.word	0x200002d4
 8004fcc:	200002dc 	.word	0x200002dc
 8004fd0:	200002c4 	.word	0x200002c4
 8004fd4:	200001c0 	.word	0x200001c0
 8004fd8:	200001bc 	.word	0x200001bc
 8004fdc:	200002cc 	.word	0x200002cc
 8004fe0:	200002d0 	.word	0x200002d0

08004fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <vTaskSwitchContext+0xa4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <vTaskSwitchContext+0xa8>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ff8:	e03f      	b.n	800507a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <vTaskSwitchContext+0xa8>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <vTaskSwitchContext+0xac>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	f1c3 031f 	rsb	r3, r3, #31
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	491f      	ldr	r1, [pc, #124]	; (8005094 <vTaskSwitchContext+0xb0>)
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <vTaskSwitchContext+0x5c>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <vTaskSwitchContext+0x5a>
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <vTaskSwitchContext+0xb0>)
 800504c:	4413      	add	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3308      	adds	r3, #8
 8005062:	429a      	cmp	r2, r3
 8005064:	d104      	bne.n	8005070 <vTaskSwitchContext+0x8c>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <vTaskSwitchContext+0xb4>)
 8005078:	6013      	str	r3, [r2, #0]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	200002e4 	.word	0x200002e4
 800508c:	200002d0 	.word	0x200002d0
 8005090:	200002c4 	.word	0x200002c4
 8005094:	200001c0 	.word	0x200001c0
 8005098:	200001bc 	.word	0x200001bc

0800509c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60fb      	str	r3, [r7, #12]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <vTaskPlaceOnEventList+0x44>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3318      	adds	r3, #24
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fe fd64 	bl	8003b98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050d0:	2101      	movs	r1, #1
 80050d2:	6838      	ldr	r0, [r7, #0]
 80050d4:	f000 fbde 	bl	8005894 <prvAddCurrentTaskToDelayedList>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200001bc 	.word	0x200001bc

080050e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	617b      	str	r3, [r7, #20]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <vTaskPlaceOnEventListRestricted+0x54>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3318      	adds	r3, #24
 8005112:	4619      	mov	r1, r3
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7fe fd1b 	bl	8003b50 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
 8005124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 fbb3 	bl	8005894 <prvAddCurrentTaskToDelayedList>
	}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200001bc 	.word	0x200001bc

0800513c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3318      	adds	r3, #24
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fd4c 	bl	8003c0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <xTaskRemoveFromEventList+0xb0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11c      	bne.n	80051b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fd43 	bl	8003c0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <xTaskRemoveFromEventList+0xb4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <xTaskRemoveFromEventList+0xb4>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <xTaskRemoveFromEventList+0xb8>)
 80051a4:	441a      	add	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fe fccf 	bl	8003b50 <vListInsertEnd>
 80051b2:	e005      	b.n	80051c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3318      	adds	r3, #24
 80051b8:	4619      	mov	r1, r3
 80051ba:	480f      	ldr	r0, [pc, #60]	; (80051f8 <xTaskRemoveFromEventList+0xbc>)
 80051bc:	f7fe fcc8 	bl	8003b50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <xTaskRemoveFromEventList+0xc0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d905      	bls.n	80051da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <xTaskRemoveFromEventList+0xc4>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e001      	b.n	80051de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80051de:	f000 f955 	bl	800548c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80051e2:	697b      	ldr	r3, [r7, #20]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200002e4 	.word	0x200002e4
 80051f0:	200002c4 	.word	0x200002c4
 80051f4:	200001c0 	.word	0x200001c0
 80051f8:	2000027c 	.word	0x2000027c
 80051fc:	200001bc 	.word	0x200001bc
 8005200:	200002d0 	.word	0x200002d0

08005204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <vTaskInternalSetTimeOutState+0x24>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <vTaskInternalSetTimeOutState+0x28>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	605a      	str	r2, [r3, #4]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200002d4 	.word	0x200002d4
 800522c:	200002c0 	.word	0x200002c0

08005230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	613b      	str	r3, [r7, #16]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005272:	f001 f807 	bl	8006284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <xTaskCheckForTimeOut+0xbc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	e023      	b.n	80052de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <xTaskCheckForTimeOut+0xc0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d007      	beq.n	80052b2 <xTaskCheckForTimeOut+0x82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d302      	bcc.n	80052b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052ac:	2301      	movs	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e015      	b.n	80052de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d20b      	bcs.n	80052d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff9b 	bl	8005204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e004      	b.n	80052de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052de:	f001 f801 	bl	80062e4 <vPortExitCritical>

	return xReturn;
 80052e2:	69fb      	ldr	r3, [r7, #28]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200002c0 	.word	0x200002c0
 80052f0:	200002d4 	.word	0x200002d4

080052f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <vTaskMissedYield+0x14>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	200002d0 	.word	0x200002d0

0800530c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005314:	f000 f87c 	bl	8005410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <prvIdleTask+0x74>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d907      	bls.n	8005330 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <prvIdleTask+0x78>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005330:	f7fb f99e 	bl	8000670 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8005334:	f7ff fcaa 	bl	8004c8c <prvGetExpectedIdleTime>
 8005338:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d9e9      	bls.n	8005314 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005340:	f7ff fc96 	bl	8004c70 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <prvIdleTask+0x7c>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <prvIdleTask+0x80>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d20a      	bcs.n	8005366 <prvIdleTask+0x5a>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60bb      	str	r3, [r7, #8]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8005366:	f7ff fc91 	bl	8004c8c <prvGetExpectedIdleTime>
 800536a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d902      	bls.n	8005378 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7fa ff2c 	bl	80001d0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8005378:	f7ff fcc2 	bl	8004d00 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800537c:	e7ca      	b.n	8005314 <prvIdleTask+0x8>
 800537e:	bf00      	nop
 8005380:	200001c0 	.word	0x200001c0
 8005384:	e000ed04 	.word	0xe000ed04
 8005388:	200002dc 	.word	0x200002dc
 800538c:	200002c0 	.word	0x200002c0

08005390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	e00c      	b.n	80053b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <prvInitialiseTaskLists+0x60>)
 80053a8:	4413      	add	r3, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fba3 	bl	8003af6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3301      	adds	r3, #1
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d9ef      	bls.n	800539c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053bc:	480d      	ldr	r0, [pc, #52]	; (80053f4 <prvInitialiseTaskLists+0x64>)
 80053be:	f7fe fb9a 	bl	8003af6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053c2:	480d      	ldr	r0, [pc, #52]	; (80053f8 <prvInitialiseTaskLists+0x68>)
 80053c4:	f7fe fb97 	bl	8003af6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053c8:	480c      	ldr	r0, [pc, #48]	; (80053fc <prvInitialiseTaskLists+0x6c>)
 80053ca:	f7fe fb94 	bl	8003af6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053ce:	480c      	ldr	r0, [pc, #48]	; (8005400 <prvInitialiseTaskLists+0x70>)
 80053d0:	f7fe fb91 	bl	8003af6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053d4:	480b      	ldr	r0, [pc, #44]	; (8005404 <prvInitialiseTaskLists+0x74>)
 80053d6:	f7fe fb8e 	bl	8003af6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <prvInitialiseTaskLists+0x78>)
 80053dc:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <prvInitialiseTaskLists+0x64>)
 80053de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <prvInitialiseTaskLists+0x7c>)
 80053e2:	4a05      	ldr	r2, [pc, #20]	; (80053f8 <prvInitialiseTaskLists+0x68>)
 80053e4:	601a      	str	r2, [r3, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200001c0 	.word	0x200001c0
 80053f4:	2000024c 	.word	0x2000024c
 80053f8:	20000260 	.word	0x20000260
 80053fc:	2000027c 	.word	0x2000027c
 8005400:	20000290 	.word	0x20000290
 8005404:	200002a8 	.word	0x200002a8
 8005408:	20000274 	.word	0x20000274
 800540c:	20000278 	.word	0x20000278

08005410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005416:	e019      	b.n	800544c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005418:	f000 ff34 	bl	8006284 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800541c:	4b10      	ldr	r3, [pc, #64]	; (8005460 <prvCheckTasksWaitingTermination+0x50>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fbee 	bl	8003c0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <prvCheckTasksWaitingTermination+0x54>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <prvCheckTasksWaitingTermination+0x54>)
 8005436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <prvCheckTasksWaitingTermination+0x58>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <prvCheckTasksWaitingTermination+0x58>)
 8005440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005442:	f000 ff4f 	bl	80062e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f810 	bl	800546c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <prvCheckTasksWaitingTermination+0x58>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e1      	bne.n	8005418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000290 	.word	0x20000290
 8005464:	200002bc 	.word	0x200002bc
 8005468:	200002a4 	.word	0x200002a4

0800546c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8e9 	bl	8006650 <vPortFree>
			vPortFree( pxTCB );
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f8e6 	bl	8006650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <prvResetNextTaskUnblockTime+0x44>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <prvResetNextTaskUnblockTime+0x14>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <prvResetNextTaskUnblockTime+0x16>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvResetNextTaskUnblockTime+0x48>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054ae:	e008      	b.n	80054c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <prvResetNextTaskUnblockTime+0x44>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <prvResetNextTaskUnblockTime+0x48>)
 80054c0:	6013      	str	r3, [r2, #0]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000274 	.word	0x20000274
 80054d4:	200002dc 	.word	0x200002dc

080054d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <xTaskGetSchedulerState+0x34>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054e6:	2301      	movs	r3, #1
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	e008      	b.n	80054fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <xTaskGetSchedulerState+0x38>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054f4:	2302      	movs	r3, #2
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	e001      	b.n	80054fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054fe:	687b      	ldr	r3, [r7, #4]
	}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	200002c8 	.word	0x200002c8
 8005510:	200002e4 	.word	0x200002e4

08005514 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06e      	beq.n	8005608 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	4b39      	ldr	r3, [pc, #228]	; (8005614 <xTaskPriorityInherit+0x100>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	429a      	cmp	r2, r3
 8005536:	d25e      	bcs.n	80055f6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	db06      	blt.n	800554e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005540:	4b34      	ldr	r3, [pc, #208]	; (8005614 <xTaskPriorityInherit+0x100>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f1c3 0207 	rsb	r2, r3, #7
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6959      	ldr	r1, [r3, #20]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a2e      	ldr	r2, [pc, #184]	; (8005618 <xTaskPriorityInherit+0x104>)
 8005560:	4413      	add	r3, r2
 8005562:	4299      	cmp	r1, r3
 8005564:	d101      	bne.n	800556a <xTaskPriorityInherit+0x56>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xTaskPriorityInherit+0x58>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03a      	beq.n	80055e6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fb48 	bl	8003c0a <uxListRemove>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d115      	bne.n	80055ac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4924      	ldr	r1, [pc, #144]	; (8005618 <xTaskPriorityInherit+0x104>)
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <xTaskPriorityInherit+0x98>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	2201      	movs	r2, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43da      	mvns	r2, r3
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <xTaskPriorityInherit+0x108>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4013      	ands	r3, r2
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <xTaskPriorityInherit+0x108>)
 80055aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <xTaskPriorityInherit+0x100>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	2201      	movs	r2, #1
 80055bc:	409a      	lsls	r2, r3
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <xTaskPriorityInherit+0x108>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <xTaskPriorityInherit+0x108>)
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a10      	ldr	r2, [pc, #64]	; (8005618 <xTaskPriorityInherit+0x104>)
 80055d6:	441a      	add	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fab6 	bl	8003b50 <vListInsertEnd>
 80055e4:	e004      	b.n	80055f0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <xTaskPriorityInherit+0x100>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e008      	b.n	8005608 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <xTaskPriorityInherit+0x100>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	429a      	cmp	r2, r3
 8005602:	d201      	bcs.n	8005608 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005608:	68fb      	ldr	r3, [r7, #12]
	}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	200001bc 	.word	0x200001bc
 8005618:	200001c0 	.word	0x200001c0
 800561c:	200002c4 	.word	0x200002c4

08005620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d06e      	beq.n	8005714 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005636:	4b3a      	ldr	r3, [pc, #232]	; (8005720 <xTaskPriorityDisinherit+0x100>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	429a      	cmp	r2, r3
 800563e:	d00a      	beq.n	8005656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60bb      	str	r3, [r7, #8]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	429a      	cmp	r2, r3
 8005688:	d044      	beq.n	8005714 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d140      	bne.n	8005714 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fab7 	bl	8003c0a <uxListRemove>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d115      	bne.n	80056ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	491f      	ldr	r1, [pc, #124]	; (8005724 <xTaskPriorityDisinherit+0x104>)
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xTaskPriorityDisinherit+0xae>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	2201      	movs	r2, #1
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43da      	mvns	r2, r3
 80056c4:	4b18      	ldr	r3, [pc, #96]	; (8005728 <xTaskPriorityDisinherit+0x108>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4013      	ands	r3, r2
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <xTaskPriorityDisinherit+0x108>)
 80056cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	f1c3 0207 	rsb	r2, r3, #7
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	2201      	movs	r2, #1
 80056e8:	409a      	lsls	r2, r3
 80056ea:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <xTaskPriorityDisinherit+0x108>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <xTaskPriorityDisinherit+0x108>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <xTaskPriorityDisinherit+0x104>)
 8005702:	441a      	add	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe fa20 	bl	8003b50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005714:	697b      	ldr	r3, [r7, #20]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200001bc 	.word	0x200001bc
 8005724:	200001c0 	.word	0x200001c0
 8005728:	200002c4 	.word	0x200002c4

0800572c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8088 	beq.w	8005856 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d902      	bls.n	8005774 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e002      	b.n	800577a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	429a      	cmp	r2, r3
 8005782:	d068      	beq.n	8005856 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	429a      	cmp	r2, r3
 800578c:	d163      	bne.n	8005856 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	429a      	cmp	r2, r3
 8005796:	d10a      	bne.n	80057ae <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60bb      	str	r3, [r7, #8]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	db04      	blt.n	80057cc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f1c3 0207 	rsb	r2, r3, #7
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6959      	ldr	r1, [r3, #20]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4a22      	ldr	r2, [pc, #136]	; (8005864 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80057dc:	4413      	add	r3, r2
 80057de:	4299      	cmp	r1, r3
 80057e0:	d101      	bne.n	80057e6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d034      	beq.n	8005856 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fa0a 	bl	8003c0a <uxListRemove>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d115      	bne.n	8005828 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4918      	ldr	r1, [pc, #96]	; (8005864 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	2201      	movs	r2, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43da      	mvns	r2, r3
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4013      	ands	r3, r2
 8005824:	4a10      	ldr	r2, [pc, #64]	; (8005868 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005826:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	2201      	movs	r2, #1
 800582e:	409a      	lsls	r2, r3
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4a07      	ldr	r2, [pc, #28]	; (8005864 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005848:	441a      	add	r2, r3
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fe f97d 	bl	8003b50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005856:	bf00      	nop
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200001bc 	.word	0x200001bc
 8005864:	200001c0 	.word	0x200001c0
 8005868:	200002c4 	.word	0x200002c4

0800586c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <pvTaskIncrementMutexHeldCount+0x24>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <pvTaskIncrementMutexHeldCount+0x24>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800587e:	3201      	adds	r2, #1
 8005880:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8005882:	4b03      	ldr	r3, [pc, #12]	; (8005890 <pvTaskIncrementMutexHeldCount+0x24>)
 8005884:	681b      	ldr	r3, [r3, #0]
	}
 8005886:	4618      	mov	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	200001bc 	.word	0x200001bc

08005894 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a4:	4b28      	ldr	r3, [pc, #160]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe f9ad 	bl	8003c0a <uxListRemove>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	2201      	movs	r2, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43da      	mvns	r2, r3
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4013      	ands	r3, r2
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d10a      	bne.n	80058ec <prvAddCurrentTaskToDelayedList+0x58>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	481a      	ldr	r0, [pc, #104]	; (8005950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058e6:	f7fe f933 	bl	8003b50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058ea:	e026      	b.n	800593a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	429a      	cmp	r2, r3
 8005902:	d209      	bcs.n	8005918 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005904:	4b13      	ldr	r3, [pc, #76]	; (8005954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f7fe f941 	bl	8003b98 <vListInsert>
}
 8005916:	e010      	b.n	800593a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3304      	adds	r3, #4
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f7fe f937 	bl	8003b98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <prvAddCurrentTaskToDelayedList+0xc8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d202      	bcs.n	800593a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005934:	4a09      	ldr	r2, [pc, #36]	; (800595c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200002c0 	.word	0x200002c0
 8005948:	200001bc 	.word	0x200001bc
 800594c:	200002c4 	.word	0x200002c4
 8005950:	200002a8 	.word	0x200002a8
 8005954:	20000278 	.word	0x20000278
 8005958:	20000274 	.word	0x20000274
 800595c:	200002dc 	.word	0x200002dc

08005960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005966:	2300      	movs	r3, #0
 8005968:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800596a:	f000 fae5 	bl	8005f38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <xTimerCreateTimerTask+0x54>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <xTimerCreateTimerTask+0x58>)
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	2302      	movs	r3, #2
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	490e      	ldr	r1, [pc, #56]	; (80059bc <xTimerCreateTimerTask+0x5c>)
 8005984:	480e      	ldr	r0, [pc, #56]	; (80059c0 <xTimerCreateTimerTask+0x60>)
 8005986:	f7fe ffc3 	bl	8004910 <xTaskCreate>
 800598a:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <xTimerCreateTimerTask+0x48>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	603b      	str	r3, [r7, #0]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000318 	.word	0x20000318
 80059b8:	2000031c 	.word	0x2000031c
 80059bc:	08006980 	.word	0x08006980
 80059c0:	08005b81 	.word	0x08005b81

080059c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80059d2:	2028      	movs	r0, #40	; 0x28
 80059d4:	f000 fd78 	bl	80064c8 <pvPortMalloc>
 80059d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f805 	bl	80059fe <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80059f4:	697b      	ldr	r3, [r7, #20]
	}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	617b      	str	r3, [r7, #20]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005a2e:	f000 fa83 	bl	8005f38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe f86e 	bl	8003b36 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	623b      	str	r3, [r7, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a92:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <xTimerGenericCommand+0x98>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02a      	beq.n	8005af0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	dc18      	bgt.n	8005ade <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005aac:	f7ff fd14 	bl	80054d8 <xTaskGetSchedulerState>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d109      	bne.n	8005aca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <xTimerGenericCommand+0x98>)
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	f107 0114 	add.w	r1, r7, #20
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac2:	f7fe f98f 	bl	8003de4 <xQueueGenericSend>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ac8:	e012      	b.n	8005af0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <xTimerGenericCommand+0x98>)
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f107 0114 	add.w	r1, r7, #20
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f7fe f985 	bl	8003de4 <xQueueGenericSend>
 8005ada:	6278      	str	r0, [r7, #36]	; 0x24
 8005adc:	e008      	b.n	8005af0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <xTimerGenericCommand+0x98>)
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	f107 0114 	add.w	r1, r7, #20
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	f7fe fa79 	bl	8003fe0 <xQueueGenericSendFromISR>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3728      	adds	r7, #40	; 0x28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000318 	.word	0x20000318

08005b00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <prvProcessExpiredTimer+0x7c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f876 	bl	8003c0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d122      	bne.n	8005b6c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	18d1      	adds	r1, r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f000 f8c8 	bl	8005cc8 <prvInsertTimerInActiveList>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b3e:	2300      	movs	r3, #0
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	2100      	movs	r1, #0
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	f7ff ff8b 	bl	8005a64 <xTimerGenericCommand>
 8005b4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	4798      	blx	r3
}
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000310 	.word	0x20000310

08005b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f857 	bl	8005c40 <prvGetNextExpireTime>
 8005b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4619      	mov	r1, r3
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f803 	bl	8005ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b9e:	f000 f8d5 	bl	8005d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ba2:	e7f1      	b.n	8005b88 <prvTimerTask+0x8>

08005ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bae:	f7ff f85f 	bl	8004c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f866 	bl	8005c88 <prvSampleTimeNow>
 8005bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d130      	bne.n	8005c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <prvProcessTimerOrBlockTask+0x3c>
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d806      	bhi.n	8005be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bd2:	f7ff f895 	bl	8004d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ff91 	bl	8005b00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bde:	e024      	b.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <prvProcessTimerOrBlockTask+0x90>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <prvProcessTimerOrBlockTask+0x94>)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	f7fe fe4f 	bl	80048a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c0a:	f7ff f879 	bl	8004d00 <xTaskResumeAll>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <prvProcessTimerOrBlockTask+0x98>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
}
 8005c24:	e001      	b.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c26:	f7ff f86b 	bl	8004d00 <xTaskResumeAll>
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000314 	.word	0x20000314
 8005c38:	20000318 	.word	0x20000318
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <prvGetNextExpireTime+0x44>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c66:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <prvGetNextExpireTime+0x44>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e001      	b.n	8005c76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c76:	68fb      	ldr	r3, [r7, #12]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	20000310 	.word	0x20000310

08005c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c90:	f7ff f8d2 	bl	8004e38 <xTaskGetTickCount>
 8005c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <prvSampleTimeNow+0x3c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d205      	bcs.n	8005cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ca0:	f000 f8e8 	bl	8005e74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cb2:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <prvSampleTimeNow+0x3c>)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000320 	.word	0x20000320

08005cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d812      	bhi.n	8005d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e01b      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <prvInsertTimerInActiveList+0x7c>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7fd ff43 	bl	8003b98 <vListInsert>
 8005d12:	e012      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d206      	bcs.n	8005d2a <prvInsertTimerInActiveList+0x62>
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e007      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <prvInsertTimerInActiveList+0x80>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fd ff2f 	bl	8003b98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d3a:	697b      	ldr	r3, [r7, #20]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000314 	.word	0x20000314
 8005d48:	20000310 	.word	0x20000310

08005d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	; 0x30
 8005d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d52:	e07c      	b.n	8005e4e <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	db78      	blt.n	8005e4c <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd ff4d 	bl	8003c0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d70:	1d3b      	adds	r3, r7, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ff88 	bl	8005c88 <prvSampleTimeNow>
 8005d78:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b09      	cmp	r3, #9
 8005d7e:	d866      	bhi.n	8005e4e <prvProcessReceivedCommands+0x102>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <prvProcessReceivedCommands+0x3c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005e4f 	.word	0x08005e4f
 8005d98:	08005e0d 	.word	0x08005e0d
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005db1 	.word	0x08005db1
 8005da8:	08005e4f 	.word	0x08005e4f
 8005dac:	08005e0d 	.word	0x08005e0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	18d1      	adds	r1, r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a3a      	ldr	r2, [r7, #32]
 8005dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dbe:	f7ff ff83 	bl	8005cc8 <prvInsertTimerInActiveList>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d042      	beq.n	8005e4e <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d13a      	bne.n	8005e4e <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	441a      	add	r2, r3
 8005de0:	2300      	movs	r3, #0
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	2100      	movs	r1, #0
 8005de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dea:	f7ff fe3b 	bl	8005a64 <xTimerGenericCommand>
 8005dee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d12b      	bne.n	8005e4e <prvProcessReceivedCommands+0x102>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	61bb      	str	r3, [r7, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	617b      	str	r3, [r7, #20]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	18d1      	adds	r1, r2, r3
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e3e:	f7ff ff43 	bl	8005cc8 <prvInsertTimerInActiveList>
					break;
 8005e42:	e004      	b.n	8005e4e <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e46:	f000 fc03 	bl	8006650 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e4a:	e000      	b.n	8005e4e <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <prvProcessReceivedCommands+0x124>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f107 0108 	add.w	r1, r7, #8
 8005e56:	2200      	movs	r2, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f9e7 	bl	800422c <xQueueReceive>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f af77 	bne.w	8005d54 <prvProcessReceivedCommands+0x8>
	}
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000318 	.word	0x20000318

08005e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e7a:	e045      	b.n	8005f08 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e7c:	4b2c      	ldr	r3, [pc, #176]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fd feb8 	bl	8003c0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d12e      	bne.n	8005f08 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d90e      	bls.n	8005eda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ec8:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f7fd fe60 	bl	8003b98 <vListInsert>
 8005ed8:	e016      	b.n	8005f08 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7ff fdbd 	bl	8005a64 <xTimerGenericCommand>
 8005eea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	603b      	str	r3, [r7, #0]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1b4      	bne.n	8005e7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <prvSwitchTimerLists+0xc0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a04      	ldr	r2, [pc, #16]	; (8005f30 <prvSwitchTimerLists+0xbc>)
 8005f1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f20:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <prvSwitchTimerLists+0xc0>)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	6013      	str	r3, [r2, #0]
}
 8005f26:	bf00      	nop
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000310 	.word	0x20000310
 8005f34:	20000314 	.word	0x20000314

08005f38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f3c:	f000 f9a2 	bl	8006284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <prvCheckForValidListAndQueue+0x54>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11d      	bne.n	8005f84 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f48:	4811      	ldr	r0, [pc, #68]	; (8005f90 <prvCheckForValidListAndQueue+0x58>)
 8005f4a:	f7fd fdd4 	bl	8003af6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f4e:	4811      	ldr	r0, [pc, #68]	; (8005f94 <prvCheckForValidListAndQueue+0x5c>)
 8005f50:	f7fd fdd1 	bl	8003af6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f56:	4a0e      	ldr	r2, [pc, #56]	; (8005f90 <prvCheckForValidListAndQueue+0x58>)
 8005f58:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f5a:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <prvCheckForValidListAndQueue+0x64>)
 8005f5c:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <prvCheckForValidListAndQueue+0x5c>)
 8005f5e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f60:	2200      	movs	r2, #0
 8005f62:	210c      	movs	r1, #12
 8005f64:	200a      	movs	r0, #10
 8005f66:	f7fd fee3 	bl	8003d30 <xQueueGenericCreate>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <prvCheckForValidListAndQueue+0x54>)
 8005f6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <prvCheckForValidListAndQueue+0x54>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <prvCheckForValidListAndQueue+0x54>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <prvCheckForValidListAndQueue+0x68>)
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fc68 	bl	8004854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f000 f9ae 	bl	80062e4 <vPortExitCritical>
}
 8005f88:	bf00      	nop
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000318 	.word	0x20000318
 8005f90:	200002e8 	.word	0x200002e8
 8005f94:	200002fc 	.word	0x200002fc
 8005f98:	20000310 	.word	0x20000310
 8005f9c:	20000314 	.word	0x20000314
 8005fa0:	08006988 	.word	0x08006988

08005fa4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <pvTimerGetTimerID+0x28>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005fcc:	f000 f95a 	bl	8006284 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005fd6:	f000 f985 	bl	80062e4 <vPortExitCritical>

	return pvReturn;
 8005fda:	693b      	ldr	r3, [r7, #16]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <vTimerSetTimerID+0x2a>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	60bb      	str	r3, [r7, #8]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800600e:	f000 f939 	bl	8006284 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
 8006018:	f000 f964 	bl	80062e4 <vPortExitCritical>
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b04      	subs	r3, #4
 8006034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800603c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3b04      	subs	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3b04      	subs	r3, #4
 8006052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006054:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <pxPortInitialiseStack+0x64>)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3b14      	subs	r3, #20
 800605e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3b04      	subs	r3, #4
 800606a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f06f 0202 	mvn.w	r2, #2
 8006072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3b20      	subs	r3, #32
 8006078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	0800608d 	.word	0x0800608d

0800608c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <prvTaskExitError+0x54>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d00a      	beq.n	80060b6 <prvTaskExitError+0x2a>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <prvTaskExitError+0x28>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060ca:	bf00      	nop
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0fc      	beq.n	80060cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	2000000c 	.word	0x2000000c
	...

080060f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <pxCurrentTCBConst2>)
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	6808      	ldr	r0, [r1, #0]
 80060f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	f380 8809 	msr	PSP, r0
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f380 8811 	msr	BASEPRI, r0
 800610a:	4770      	bx	lr
 800610c:	f3af 8000 	nop.w

08006110 <pxCurrentTCBConst2>:
 8006110:	200001bc 	.word	0x200001bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006118:	4808      	ldr	r0, [pc, #32]	; (800613c <prvPortStartFirstTask+0x24>)
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f380 8808 	msr	MSP, r0
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f380 8814 	msr	CONTROL, r0
 800612a:	b662      	cpsie	i
 800612c:	b661      	cpsie	f
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	df00      	svc	0
 8006138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800613a:	bf00      	nop
 800613c:	e000ed08 	.word	0xe000ed08

08006140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006146:	4b46      	ldr	r3, [pc, #280]	; (8006260 <xPortStartScheduler+0x120>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a46      	ldr	r2, [pc, #280]	; (8006264 <xPortStartScheduler+0x124>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10a      	bne.n	8006166 <xPortStartScheduler+0x26>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006166:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <xPortStartScheduler+0x120>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a3f      	ldr	r2, [pc, #252]	; (8006268 <xPortStartScheduler+0x128>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10a      	bne.n	8006186 <xPortStartScheduler+0x46>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006186:	4b39      	ldr	r3, [pc, #228]	; (800626c <xPortStartScheduler+0x12c>)
 8006188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	4b31      	ldr	r3, [pc, #196]	; (8006270 <xPortStartScheduler+0x130>)
 80061ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061ae:	4b31      	ldr	r3, [pc, #196]	; (8006274 <xPortStartScheduler+0x134>)
 80061b0:	2207      	movs	r2, #7
 80061b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061b4:	e009      	b.n	80061ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <xPortStartScheduler+0x134>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <xPortStartScheduler+0x134>)
 80061be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	d0ef      	beq.n	80061b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <xPortStartScheduler+0x134>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1c3 0307 	rsb	r3, r3, #7
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d00a      	beq.n	80061f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	60bb      	str	r3, [r7, #8]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <xPortStartScheduler+0x134>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <xPortStartScheduler+0x134>)
 8006200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <xPortStartScheduler+0x134>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800620a:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <xPortStartScheduler+0x134>)
 800620c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <xPortStartScheduler+0x138>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a17      	ldr	r2, [pc, #92]	; (8006278 <xPortStartScheduler+0x138>)
 800621c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006222:	4b15      	ldr	r3, [pc, #84]	; (8006278 <xPortStartScheduler+0x138>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a14      	ldr	r2, [pc, #80]	; (8006278 <xPortStartScheduler+0x138>)
 8006228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800622c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800622e:	f000 f8dd 	bl	80063ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <xPortStartScheduler+0x13c>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006238:	f000 f8fc 	bl	8006434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <xPortStartScheduler+0x140>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <xPortStartScheduler+0x140>)
 8006242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006248:	f7ff ff66 	bl	8006118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800624c:	f7fe feca 	bl	8004fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8006250:	f7ff ff1c 	bl	800608c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000ed00 	.word	0xe000ed00
 8006264:	410fc271 	.word	0x410fc271
 8006268:	410fc270 	.word	0x410fc270
 800626c:	e000e400 	.word	0xe000e400
 8006270:	20000324 	.word	0x20000324
 8006274:	20000328 	.word	0x20000328
 8006278:	e000ed20 	.word	0xe000ed20
 800627c:	2000000c 	.word	0x2000000c
 8006280:	e000ef34 	.word	0xe000ef34

08006284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	607b      	str	r3, [r7, #4]
}
 800629c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <vPortEnterCritical+0x58>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <vPortEnterCritical+0x58>)
 80062a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <vPortEnterCritical+0x58>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10f      	bne.n	80062d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <vPortEnterCritical+0x5c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	603b      	str	r3, [r7, #0]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <vPortEnterCritical+0x4a>
	}
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	2000000c 	.word	0x2000000c
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <vPortExitCritical+0x50>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vPortExitCritical+0x24>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <vPortExitCritical+0x50>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <vPortExitCritical+0x50>)
 8006310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <vPortExitCritical+0x50>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d105      	bne.n	8006326 <vPortExitCritical+0x42>
 800631a:	2300      	movs	r3, #0
 800631c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	f383 8811 	msr	BASEPRI, r3
}
 8006324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	2000000c 	.word	0x2000000c
	...

08006340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006340:	f3ef 8009 	mrs	r0, PSP
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <pxCurrentTCBConst>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f01e 0f10 	tst.w	lr, #16
 8006350:	bf08      	it	eq
 8006352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	6010      	str	r0, [r2, #0]
 800635c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006364:	f380 8811 	msr	BASEPRI, r0
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f7fe fe38 	bl	8004fe4 <vTaskSwitchContext>
 8006374:	f04f 0000 	mov.w	r0, #0
 8006378:	f380 8811 	msr	BASEPRI, r0
 800637c:	bc09      	pop	{r0, r3}
 800637e:	6819      	ldr	r1, [r3, #0]
 8006380:	6808      	ldr	r0, [r1, #0]
 8006382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006386:	f01e 0f10 	tst.w	lr, #16
 800638a:	bf08      	it	eq
 800638c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006390:	f380 8809 	msr	PSP, r0
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	f3af 8000 	nop.w

080063a0 <pxCurrentTCBConst>:
 80063a0:	200001bc 	.word	0x200001bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063c2:	f7fe fd49 	bl	8004e58 <xTaskIncrementTick>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063cc:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <SysTick_Handler+0x40>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
}
 80063de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <vPortSetupTimerInterrupt+0x34>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <vPortSetupTimerInterrupt+0x38>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <vPortSetupTimerInterrupt+0x3c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0a      	ldr	r2, [pc, #40]	; (800642c <vPortSetupTimerInterrupt+0x40>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	4a09      	ldr	r2, [pc, #36]	; (8006430 <vPortSetupTimerInterrupt+0x44>)
 800640a:	3b01      	subs	r3, #1
 800640c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <vPortSetupTimerInterrupt+0x34>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	e000e010 	.word	0xe000e010
 8006424:	e000e018 	.word	0xe000e018
 8006428:	20000000 	.word	0x20000000
 800642c:	10624dd3 	.word	0x10624dd3
 8006430:	e000e014 	.word	0xe000e014

08006434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006444 <vPortEnableVFP+0x10>
 8006438:	6801      	ldr	r1, [r0, #0]
 800643a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800643e:	6001      	str	r1, [r0, #0]
 8006440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006442:	bf00      	nop
 8006444:	e000ed88 	.word	0xe000ed88

08006448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	d914      	bls.n	8006484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <vPortValidateInterruptPriority+0x70>)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006464:	4b15      	ldr	r3, [pc, #84]	; (80064bc <vPortValidateInterruptPriority+0x74>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	7afa      	ldrb	r2, [r7, #11]
 800646a:	429a      	cmp	r2, r3
 800646c:	d20a      	bcs.n	8006484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <vPortValidateInterruptPriority+0x78>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800648c:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <vPortValidateInterruptPriority+0x7c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d90a      	bls.n	80064aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	603b      	str	r3, [r7, #0]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <vPortValidateInterruptPriority+0x60>
	}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	e000e3f0 	.word	0xe000e3f0
 80064bc:	20000324 	.word	0x20000324
 80064c0:	e000ed0c 	.word	0xe000ed0c
 80064c4:	20000328 	.word	0x20000328

080064c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064d4:	f7fe fbcc 	bl	8004c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d8:	4b58      	ldr	r3, [pc, #352]	; (800663c <pvPortMalloc+0x174>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064e0:	f000 f910 	bl	8006704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064e4:	4b56      	ldr	r3, [pc, #344]	; (8006640 <pvPortMalloc+0x178>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 808e 	bne.w	800660e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01d      	beq.n	8006534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064f8:	2208      	movs	r2, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	3308      	adds	r3, #8
 8006512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <pvPortMalloc+0x6c>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d069      	beq.n	800660e <pvPortMalloc+0x146>
 800653a:	4b42      	ldr	r3, [pc, #264]	; (8006644 <pvPortMalloc+0x17c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d864      	bhi.n	800660e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006544:	4b40      	ldr	r3, [pc, #256]	; (8006648 <pvPortMalloc+0x180>)
 8006546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006548:	4b3f      	ldr	r3, [pc, #252]	; (8006648 <pvPortMalloc+0x180>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800654e:	e004      	b.n	800655a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <pvPortMalloc+0xa4>
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f1      	bne.n	8006550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800656c:	4b33      	ldr	r3, [pc, #204]	; (800663c <pvPortMalloc+0x174>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	429a      	cmp	r2, r3
 8006574:	d04b      	beq.n	800660e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2208      	movs	r2, #8
 800657c:	4413      	add	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	2308      	movs	r3, #8
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	429a      	cmp	r2, r3
 8006596:	d91f      	bls.n	80065d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <pvPortMalloc+0xf8>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	613b      	str	r3, [r7, #16]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d2:	69b8      	ldr	r0, [r7, #24]
 80065d4:	f000 f8f8 	bl	80067c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <pvPortMalloc+0x17c>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <pvPortMalloc+0x17c>)
 80065e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <pvPortMalloc+0x17c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <pvPortMalloc+0x184>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d203      	bcs.n	80065fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <pvPortMalloc+0x17c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <pvPortMalloc+0x184>)
 80065f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <pvPortMalloc+0x178>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	431a      	orrs	r2, r3
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800660e:	f7fe fb77 	bl	8004d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <pvPortMalloc+0x16a>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <pvPortMalloc+0x168>
	return pvReturn;
 8006632:	69fb      	ldr	r3, [r7, #28]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3728      	adds	r7, #40	; 0x28
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20001334 	.word	0x20001334
 8006640:	20001340 	.word	0x20001340
 8006644:	20001338 	.word	0x20001338
 8006648:	2000132c 	.word	0x2000132c
 800664c:	2000133c 	.word	0x2000133c

08006650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d048      	beq.n	80066f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006662:	2308      	movs	r3, #8
 8006664:	425b      	negs	r3, r3
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <vPortFree+0xac>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <vPortFree+0x44>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <vPortFree+0x62>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60bb      	str	r3, [r7, #8]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b11      	ldr	r3, [pc, #68]	; (80066fc <vPortFree+0xac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d115      	bne.n	80066f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <vPortFree+0xac>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066d8:	f7fe faca 	bl	8004c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <vPortFree+0xb0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a06      	ldr	r2, [pc, #24]	; (8006700 <vPortFree+0xb0>)
 80066e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f000 f86c 	bl	80067c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066f0:	f7fe fb06 	bl	8004d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20001340 	.word	0x20001340
 8006700:	20001338 	.word	0x20001338

08006704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800670a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006710:	4b27      	ldr	r3, [pc, #156]	; (80067b0 <prvHeapInit+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00c      	beq.n	8006738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3307      	adds	r3, #7
 8006722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <prvHeapInit+0xac>)
 8006734:	4413      	add	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <prvHeapInit+0xb0>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <prvHeapInit+0xb0>)
 8006744:	2200      	movs	r2, #0
 8006746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006750:	2208      	movs	r2, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <prvHeapInit+0xb4>)
 8006764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <prvHeapInit+0xb4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <prvHeapInit+0xb4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	1ad2      	subs	r2, r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvHeapInit+0xb4>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <prvHeapInit+0xb8>)
 8006792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4a09      	ldr	r2, [pc, #36]	; (80067c0 <prvHeapInit+0xbc>)
 800679a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <prvHeapInit+0xc0>)
 800679e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	2000032c 	.word	0x2000032c
 80067b4:	2000132c 	.word	0x2000132c
 80067b8:	20001334 	.word	0x20001334
 80067bc:	2000133c 	.word	0x2000133c
 80067c0:	20001338 	.word	0x20001338
 80067c4:	20001340 	.word	0x20001340

080067c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067d0:	4b28      	ldr	r3, [pc, #160]	; (8006874 <prvInsertBlockIntoFreeList+0xac>)
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e002      	b.n	80067dc <prvInsertBlockIntoFreeList+0x14>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d8f7      	bhi.n	80067d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d108      	bne.n	800680a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d118      	bne.n	8006850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <prvInsertBlockIntoFreeList+0xb0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d00d      	beq.n	8006846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e008      	b.n	8006858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <prvInsertBlockIntoFreeList+0xb0>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e003      	b.n	8006858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d002      	beq.n	8006866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	2000132c 	.word	0x2000132c
 8006878:	20001334 	.word	0x20001334

0800687c <__libc_init_array>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	4d0d      	ldr	r5, [pc, #52]	; (80068b4 <__libc_init_array+0x38>)
 8006880:	4c0d      	ldr	r4, [pc, #52]	; (80068b8 <__libc_init_array+0x3c>)
 8006882:	1b64      	subs	r4, r4, r5
 8006884:	10a4      	asrs	r4, r4, #2
 8006886:	2600      	movs	r6, #0
 8006888:	42a6      	cmp	r6, r4
 800688a:	d109      	bne.n	80068a0 <__libc_init_array+0x24>
 800688c:	4d0b      	ldr	r5, [pc, #44]	; (80068bc <__libc_init_array+0x40>)
 800688e:	4c0c      	ldr	r4, [pc, #48]	; (80068c0 <__libc_init_array+0x44>)
 8006890:	f000 f82e 	bl	80068f0 <_init>
 8006894:	1b64      	subs	r4, r4, r5
 8006896:	10a4      	asrs	r4, r4, #2
 8006898:	2600      	movs	r6, #0
 800689a:	42a6      	cmp	r6, r4
 800689c:	d105      	bne.n	80068aa <__libc_init_array+0x2e>
 800689e:	bd70      	pop	{r4, r5, r6, pc}
 80068a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a4:	4798      	blx	r3
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7ee      	b.n	8006888 <__libc_init_array+0xc>
 80068aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ae:	4798      	blx	r3
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7f2      	b.n	800689a <__libc_init_array+0x1e>
 80068b4:	080069c8 	.word	0x080069c8
 80068b8:	080069c8 	.word	0x080069c8
 80068bc:	080069c8 	.word	0x080069c8
 80068c0:	080069cc 	.word	0x080069cc

080068c4 <memcpy>:
 80068c4:	440a      	add	r2, r1
 80068c6:	4291      	cmp	r1, r2
 80068c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068cc:	d100      	bne.n	80068d0 <memcpy+0xc>
 80068ce:	4770      	bx	lr
 80068d0:	b510      	push	{r4, lr}
 80068d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068da:	4291      	cmp	r1, r2
 80068dc:	d1f9      	bne.n	80068d2 <memcpy+0xe>
 80068de:	bd10      	pop	{r4, pc}

080068e0 <memset>:
 80068e0:	4402      	add	r2, r0
 80068e2:	4603      	mov	r3, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d100      	bne.n	80068ea <memset+0xa>
 80068e8:	4770      	bx	lr
 80068ea:	f803 1b01 	strb.w	r1, [r3], #1
 80068ee:	e7f9      	b.n	80068e4 <memset+0x4>

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
