
freeRTOS_tasks1_F302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006af0  08006af0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006af0  08006af0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000010  08006b08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  08006b08  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ca  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337b  00000000  00000000  0003860a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd08  00000000  00000000  0003e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab46  00000000  00000000  0005c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af956  00000000  00000000  00076bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b14  00000000  00000000  00126584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a00 	.word	0x08006a00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006a00 	.word	0x08006a00

080001d0 <vPortSuppressTicksAndSleep>:
}
/* USER CODE END 3 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b5b0      	push	{r4, r5, r7, lr}
 80001e6:	b08a      	sub	sp, #40	; 0x28
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	memset(buffer.tx_buffer, 65, sizeof(buffer.tx_buffer));
 80001ea:	220a      	movs	r2, #10
 80001ec:	2141      	movs	r1, #65	; 0x41
 80001ee:	4840      	ldr	r0, [pc, #256]	; (80002f0 <main+0x10c>)
 80001f0:	f006 fbfe 	bl	80069f0 <memset>
	memset(buffer.rx_buffer, 66, sizeof(buffer.rx_buffer));
 80001f4:	220a      	movs	r2, #10
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	483e      	ldr	r0, [pc, #248]	; (80002f4 <main+0x110>)
 80001fa:	f006 fbf9 	bl	80069f0 <memset>
	buffer.rx = 0;
 80001fe:	4b3c      	ldr	r3, [pc, #240]	; (80002f0 <main+0x10c>)
 8000200:	2200      	movs	r2, #0
 8000202:	765a      	strb	r2, [r3, #25]
	buffer.tx = 0;
 8000204:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <main+0x10c>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fccb 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f88f 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f955 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f8e3 	bl	80003e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800021a:	f000 f921 	bl	8000460 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Semaphore1 = xSemaphoreCreateBinary();
 800021e:	2203      	movs	r2, #3
 8000220:	2100      	movs	r1, #0
 8000222:	2001      	movs	r0, #1
 8000224:	f003 fdde 	bl	8003de4 <xQueueGenericCreate>
 8000228:	4603      	mov	r3, r0
 800022a:	4a33      	ldr	r2, [pc, #204]	; (80002f8 <main+0x114>)
 800022c:	6013      	str	r3, [r2, #0]
  Semaphore2 = xSemaphoreCreateCounting(3, 0);
 800022e:	2100      	movs	r1, #0
 8000230:	2003      	movs	r0, #3
 8000232:	f003 fe30 	bl	8003e96 <xQueueCreateCountingSemaphore>
 8000236:	4603      	mov	r3, r0
 8000238:	4a30      	ldr	r2, [pc, #192]	; (80002fc <main+0x118>)
 800023a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  uint32_t pvTimerID_1 = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
  TimerHandle_t Timer1;
  Timer1 = xTimerCreate("Timer1", 500, pdTRUE, (void* const)&pvTimerID_1, Timer1Callback);
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4a2e      	ldr	r2, [pc, #184]	; (8000300 <main+0x11c>)
 8000246:	9200      	str	r2, [sp, #0]
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800024e:	482d      	ldr	r0, [pc, #180]	; (8000304 <main+0x120>)
 8000250:	f005 fc44 	bl	8005adc <xTimerCreate>
 8000254:	61f8      	str	r0, [r7, #28]
  xTimerStart(Timer1, 1);
 8000256:	f004 fe7b 	bl	8004f50 <xTaskGetTickCount>
 800025a:	4602      	mov	r2, r0
 800025c:	2301      	movs	r3, #1
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2300      	movs	r3, #0
 8000262:	2101      	movs	r1, #1
 8000264:	69f8      	ldr	r0, [r7, #28]
 8000266:	f005 fc89 	bl	8005b7c <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t myQueue1;
  myQueue1 = xQueueCreate(30, sizeof(char));
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	201e      	movs	r0, #30
 8000270:	f003 fdb8 	bl	8003de4 <xQueueGenericCreate>
 8000274:	61b8      	str	r0, [r7, #24]
  buffer.queueh = myQueue1;
 8000276:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <main+0x10c>)
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	6153      	str	r3, [r2, #20]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 800027c:	4b22      	ldr	r3, [pc, #136]	; (8000308 <main+0x124>)
 800027e:	463c      	mov	r4, r7
 8000280:	461d      	mov	r5, r3
 8000282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000286:	682b      	ldr	r3, [r5, #0]
 8000288:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800028a:	463b      	mov	r3, r7
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fc50 	bl	8003b34 <osThreadCreate>
 8000294:	4603      	mov	r3, r0
 8000296:	4a1d      	ldr	r2, [pc, #116]	; (800030c <main+0x128>)
 8000298:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //TaskHandle_t sendUSART1_handle;
  xTaskCreate(sendUSART1, "send data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 800029a:	2300      	movs	r3, #0
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	2305      	movs	r3, #5
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <main+0x10c>)
 80002a4:	2240      	movs	r2, #64	; 0x40
 80002a6:	491a      	ldr	r1, [pc, #104]	; (8000310 <main+0x12c>)
 80002a8:	481a      	ldr	r0, [pc, #104]	; (8000314 <main+0x130>)
 80002aa:	f004 fbbd 	bl	8004a28 <xTaskCreate>
  //TaskHandle_t receiveUSART1_handle;
  xTaskCreate(receiveUSART1, "receive data", 64, (void*)&buffer.tx_buffer, 5, NULL);
 80002ae:	2300      	movs	r3, #0
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	2305      	movs	r3, #5
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <main+0x10c>)
 80002b8:	2240      	movs	r2, #64	; 0x40
 80002ba:	4917      	ldr	r1, [pc, #92]	; (8000318 <main+0x134>)
 80002bc:	4817      	ldr	r0, [pc, #92]	; (800031c <main+0x138>)
 80002be:	f004 fbb3 	bl	8004a28 <xTaskCreate>
  xTaskCreate(announcement, "announcement", 64, NULL, 6, NULL);
 80002c2:	2300      	movs	r3, #0
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2306      	movs	r3, #6
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	2240      	movs	r2, #64	; 0x40
 80002ce:	4914      	ldr	r1, [pc, #80]	; (8000320 <main+0x13c>)
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0x140>)
 80002d2:	f004 fba9 	bl	8004a28 <xTaskCreate>
  xTaskCreate(announcement2, "announcement2", 64, NULL, 6, NULL);
 80002d6:	2300      	movs	r3, #0
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2306      	movs	r3, #6
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2240      	movs	r2, #64	; 0x40
 80002e2:	4911      	ldr	r1, [pc, #68]	; (8000328 <main+0x144>)
 80002e4:	4811      	ldr	r0, [pc, #68]	; (800032c <main+0x148>)
 80002e6:	f004 fb9f 	bl	8004a28 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ea:	f003 fc1c 	bl	8003b26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <main+0x10a>
 80002f0:	2000010c 	.word	0x2000010c
 80002f4:	20000116 	.word	0x20000116
 80002f8:	20000128 	.word	0x20000128
 80002fc:	2000012c 	.word	0x2000012c
 8000300:	080006dd 	.word	0x080006dd
 8000304:	08006a24 	.word	0x08006a24
 8000308:	08006a68 	.word	0x08006a68
 800030c:	20000108 	.word	0x20000108
 8000310:	08006a2c 	.word	0x08006a2c
 8000314:	080005f1 	.word	0x080005f1
 8000318:	08006a38 	.word	0x08006a38
 800031c:	08000645 	.word	0x08000645
 8000320:	08006a48 	.word	0x08006a48
 8000324:	0800079d 	.word	0x0800079d
 8000328:	08006a58 	.word	0x08006a58
 800032c:	0800081d 	.word	0x0800081d

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09c      	sub	sp, #112	; 0x70
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f006 fb56 	bl	80069f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	2234      	movs	r2, #52	; 0x34
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f006 fb48 	bl	80069f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2310      	movs	r3, #16
 800036a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000374:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800037e:	4618      	mov	r0, r3
 8000380:	f001 f80a 	bl	8001398 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800038a:	f000 fa9a 	bl	80008c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f832 	bl	8002414 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003b6:	f000 fa84 	bl	80008c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80003ba:	2321      	movs	r3, #33	; 0x21
 80003bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c6:	463b      	mov	r3, r7
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fa8b 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003d4:	f000 fa75 	bl	80008c2 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3770      	adds	r7, #112	; 0x70
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_I2C1_Init+0x74>)
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_I2C1_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_I2C1_Init+0x74>)
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_I2C1_Init+0x7c>)
 80003ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_I2C1_Init+0x74>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_I2C1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_I2C1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <MX_I2C1_Init+0x74>)
 800041c:	f000 fe96 	bl	800114c <HAL_I2C_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000426:	f000 fa4c 	bl	80008c2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800042a:	2100      	movs	r1, #0
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_I2C1_Init+0x74>)
 800042e:	f000 ff1c 	bl	800126a <HAL_I2CEx_ConfigAnalogFilter>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000438:	f000 fa43 	bl	80008c2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800043c:	2100      	movs	r1, #0
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_I2C1_Init+0x74>)
 8000440:	f000 ff5e 	bl	8001300 <HAL_I2CEx_ConfigDigitalFilter>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 fa3a 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000002c 	.word	0x2000002c
 8000458:	40005400 	.word	0x40005400
 800045c:	2000090e 	.word	0x2000090e

08000460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000466:	4a15      	ldr	r2, [pc, #84]	; (80004bc <MX_USART1_UART_Init+0x5c>)
 8000468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART1_UART_Init+0x58>)
 80004a4:	f002 fe3a 	bl	800311c <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004ae:	f000 fa08 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000080 	.word	0x20000080
 80004bc:	40013800 	.word	0x40013800

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b43      	ldr	r3, [pc, #268]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a3c      	ldr	r2, [pc, #240]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <MX_GPIO_Init+0x124>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <MX_GPIO_Init+0x124>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a36      	ldr	r2, [pc, #216]	; (80005e4 <MX_GPIO_Init+0x124>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <MX_GPIO_Init+0x124>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11
 800051e:	2200      	movs	r2, #0
 8000520:	f641 410c 	movw	r1, #7180	; 0x1c0c
 8000524:	4830      	ldr	r0, [pc, #192]	; (80005e8 <MX_GPIO_Init+0x128>)
 8000526:	f000 fdc7 	bl	80010b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	482e      	ldr	r0, [pc, #184]	; (80005ec <MX_GPIO_Init+0x12c>)
 8000532:	f000 fdc1 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4619      	mov	r1, r3
 800054c:	4826      	ldr	r0, [pc, #152]	; (80005e8 <MX_GPIO_Init+0x128>)
 800054e:	f000 fc41 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000552:	f240 430c 	movw	r3, #1036	; 0x40c
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	481f      	ldr	r0, [pc, #124]	; (80005e8 <MX_GPIO_Init+0x128>)
 800056c:	f000 fc32 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	4619      	mov	r1, r3
 8000588:	4818      	ldr	r0, [pc, #96]	; (80005ec <MX_GPIO_Init+0x12c>)
 800058a:	f000 fc23 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800058e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <MX_GPIO_Init+0x128>)
 80005a8:	f000 fc14 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x128>)
 80005c6:	f000 fc05 	bl	8000dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2105      	movs	r1, #5
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f000 fbd6 	bl	8000d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d4:	2028      	movs	r0, #40	; 0x28
 80005d6:	f000 fbef 	bl	8000db8 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000800 	.word	0x48000800
 80005ec:	48000400 	.word	0x48000400

080005f0 <sendUSART1>:

/* USER CODE BEGIN 4 */
void sendUSART1( void* buffer_p)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <sendUSART1+0x4c>)
 80005fe:	f000 fd73 	bl	80010e8 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]
		xQueueReceive(buffer_pp->queueh, &buffer_pp->tx, portMAX_DELAY);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6958      	ldr	r0, [r3, #20]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3318      	adds	r3, #24
 800060e:	f04f 32ff 	mov.w	r2, #4294967295
 8000612:	4619      	mov	r1, r3
 8000614:	f003 fe96 	bl	8004344 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*) &buffer_pp->tx, sizeof(buffer_pp->tx), 100);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f103 0118 	add.w	r1, r3, #24
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <sendUSART1+0x50>)
 8000624:	f002 fdc8 	bl	80031b8 <HAL_UART_Transmit>
		vTaskDelay(200);
 8000628:	20c8      	movs	r0, #200	; 0xc8
 800062a:	f004 fb2b 	bl	8004c84 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <sendUSART1+0x4c>)
 8000634:	f000 fd58 	bl	80010e8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000638:	e7de      	b.n	80005f8 <sendUSART1+0x8>
 800063a:	bf00      	nop
 800063c:	48000800 	.word	0x48000800
 8000640:	20000080 	.word	0x20000080

08000644 <receiveUSART1>:
	}
	 vTaskDelete(xTaskGetHandle("send data"));
}

void receiveUSART1( void * buffer_p)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	buffer_uart* buffer_pp;
	for( ;; )
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800064c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <receiveUSART1+0x50>)
 8000652:	f000 fd49 	bl	80010e8 <HAL_GPIO_TogglePin>
		buffer_pp = buffer_p;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60fb      	str	r3, [r7, #12]
		if( HAL_UART_Receive(&huart1, &buffer_pp->rx, 1, 1) == HAL_OK)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f103 0119 	add.w	r1, r3, #25
 8000660:	2301      	movs	r3, #1
 8000662:	2201      	movs	r2, #1
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <receiveUSART1+0x54>)
 8000666:	f002 fe31 	bl	80032cc <HAL_UART_Receive>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d108      	bne.n	8000682 <receiveUSART1+0x3e>
		{
			xQueueSend(buffer_pp->queueh, &buffer_pp->rx, 1);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6958      	ldr	r0, [r3, #20]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f103 0119 	add.w	r1, r3, #25
 800067a:	2300      	movs	r3, #0
 800067c:	2201      	movs	r2, #1
 800067e:	f003 fc3d 	bl	8003efc <xQueueGenericSend>
		}
		vTaskDelay(40);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f004 fafe 	bl	8004c84 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068c:	4801      	ldr	r0, [pc, #4]	; (8000694 <receiveUSART1+0x50>)
 800068e:	f000 fd2b 	bl	80010e8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000692:	e7db      	b.n	800064c <receiveUSART1+0x8>
 8000694:	48000800 	.word	0x48000800
 8000698:	20000080 	.word	0x20000080

0800069c <vApplicationIdleHook>:
	}
	 vTaskDelete(xTaskGetHandle("receive data"));
}

void vApplicationIdleHook( void )
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80006a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <vApplicationIdleHook+0x1c>)
 80006a6:	f000 fd1f 	bl	80010e8 <HAL_GPIO_TogglePin>
	//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <vApplicationIdleHook+0x1c>)
 80006b0:	f000 fd1a 	bl	80010e8 <HAL_GPIO_TogglePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	48000800 	.word	0x48000800

080006bc <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <vApplicationTickHook+0x1c>)
 80006c6:	f000 fcf7 	bl	80010b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <vApplicationTickHook+0x1c>)
 80006d0:	f000 fcf2 	bl	80010b8 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	48000800 	.word	0x48000800

080006dc <Timer1Callback>:


void Timer1Callback( TimerHandle_t xTimer )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	481c      	ldr	r0, [pc, #112]	; (800075c <Timer1Callback+0x80>)
 80006ea:	f000 fcfd 	bl	80010e8 <HAL_GPIO_TogglePin>
	const uint32_t maxCount = 10;
 80006ee:	230a      	movs	r3, #10
 80006f0:	617b      	str	r3, [r7, #20]
	uint32_t count;
	count = (uint32_t) pvTimerGetTimerID(xTimer);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f005 fce2 	bl	80060bc <pvTimerGetTimerID>
 80006f8:	4603      	mov	r3, r0
 80006fa:	61fb      	str	r3, [r7, #28]
	count++;
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	3301      	adds	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
	if(count >= maxCount)
 8000702:	69fa      	ldr	r2, [r7, #28]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	429a      	cmp	r2, r3
 8000708:	d31a      	bcc.n	8000740 <Timer1Callback+0x64>
	{
		count = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
		char message[] = {"Timer1\r\n"};
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <Timer1Callback+0x84>)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	ca07      	ldmia	r2, {r0, r1, r2}
 8000716:	c303      	stmia	r3!, {r0, r1}
 8000718:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<sizeof(message); i++)
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	e00c      	b.n	800073a <Timer1Callback+0x5e>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <Timer1Callback+0x88>)
 8000722:	6958      	ldr	r0, [r3, #20]
 8000724:	f107 0208 	add.w	r2, r7, #8
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	18d1      	adds	r1, r2, r3
 800072c:	2300      	movs	r3, #0
 800072e:	2201      	movs	r2, #1
 8000730:	f003 fbe4 	bl	8003efc <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3301      	adds	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d9ef      	bls.n	8000720 <Timer1Callback+0x44>
		}
	}
	vTimerSetTimerID(xTimer, (void*) count);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f005 fcd9 	bl	80060fc <vTimerSetTimerID>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800074a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <Timer1Callback+0x80>)
 8000750:	f000 fcca 	bl	80010e8 <HAL_GPIO_TogglePin>
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	48000400 	.word	0x48000400
 8000760:	08006a7c 	.word	0x08006a7c
 8000764:	2000010c 	.word	0x2000010c

08000768 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
	xSemaphoreGiveFromISR( Semaphore1, NULL );
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fd55 	bl	8004228 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( Semaphore2, NULL );
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_GPIO_EXTI_Callback+0x30>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fd4f 	bl	8004228 <xQueueGiveFromISR>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000128 	.word	0x20000128
 8000798:	2000012c 	.word	0x2000012c

0800079c <announcement>:

void announcement(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
	for( ;; )
	{
		xSemaphoreTake(Semaphore1, portMAX_DELAY);
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <announcement+0x70>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f04f 31ff 	mov.w	r1, #4294967295
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 feaa 	bl	8004504 <xQueueSemaphoreTake>
		char message[] = {"ANNOUNCEMENT\r\n"};
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <announcement+0x74>)
 80007b2:	1d3c      	adds	r4, r7, #4
 80007b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b6:	c407      	stmia	r4!, {r0, r1, r2}
 80007b8:	8023      	strh	r3, [r4, #0]
 80007ba:	3402      	adds	r4, #2
 80007bc:	0c1b      	lsrs	r3, r3, #16
 80007be:	7023      	strb	r3, [r4, #0]
		vTaskDelay(pdMS_TO_TICKS(800));
 80007c0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007c4:	f004 fa5e 	bl	8004c84 <vTaskDelay>
		xSemaphoreTake(Semaphore1, 1); // Takes a Semaphore1 because the button on PC13 may have noise
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <announcement+0x70>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fe98 	bl	8004504 <xQueueSemaphoreTake>
		for(int i = 0; i<sizeof(message); i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00b      	b.n	80007f2 <announcement+0x56>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <announcement+0x78>)
 80007dc:	6958      	ldr	r0, [r3, #20]
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	18d1      	adds	r1, r2, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	2201      	movs	r2, #1
 80007e8:	f003 fb88 	bl	8003efc <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	d9f0      	bls.n	80007da <announcement+0x3e>
		}
		taskYIELD();
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <announcement+0x7c>)
 80007fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	f3bf 8f4f 	dsb	sy
 8000804:	f3bf 8f6f 	isb	sy
	{
 8000808:	e7cb      	b.n	80007a2 <announcement+0x6>
 800080a:	bf00      	nop
 800080c:	20000128 	.word	0x20000128
 8000810:	08006a88 	.word	0x08006a88
 8000814:	2000010c 	.word	0x2000010c
 8000818:	e000ed04 	.word	0xe000ed04

0800081c <announcement2>:
	}
}

void announcement2(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
	for( ;; )
	{
		xSemaphoreTake(Semaphore2, portMAX_DELAY);
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <announcement2+0x68>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f04f 31ff 	mov.w	r1, #4294967295
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fe6a 	bl	8004504 <xQueueSemaphoreTake>
		char message[] = {"sem2\r\n"};
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <announcement2+0x6c>)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000838:	6018      	str	r0, [r3, #0]
 800083a:	3304      	adds	r3, #4
 800083c:	8019      	strh	r1, [r3, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	0c0a      	lsrs	r2, r1, #16
 8000842:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(1500));
 8000844:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000848:	f004 fa1c 	bl	8004c84 <vTaskDelay>
		for(int i = 0; i<sizeof(message); i++)
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00b      	b.n	800086a <announcement2+0x4e>
		{
			xQueueSendToBack(buffer.queueh, (void* const) &message[i], 1);
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <announcement2+0x70>)
 8000854:	6958      	ldr	r0, [r3, #20]
 8000856:	1d3a      	adds	r2, r7, #4
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	18d1      	adds	r1, r2, r3
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	f003 fb4c 	bl	8003efc <xQueueGenericSend>
		for(int i = 0; i<sizeof(message); i++)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d9f0      	bls.n	8000852 <announcement2+0x36>
		}
		taskYIELD();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <announcement2+0x74>)
 8000872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	f3bf 8f6f 	isb	sy
	{
 8000880:	e7cf      	b.n	8000822 <announcement2+0x6>
 8000882:	bf00      	nop
 8000884:	2000012c 	.word	0x2000012c
 8000888:	08006a98 	.word	0x08006a98
 800088c:	2000010c 	.word	0x2000010c
 8000890:	e000ed04 	.word	0xe000ed04

08000894 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3);
 800089c:	2003      	movs	r0, #3
 800089e:	f003 f970 	bl	8003b82 <osDelay>
 80008a2:	e7fb      	b.n	800089c <StartDefaultTask+0x8>

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 f98b 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ca:	e7fe      	b.n	80008ca <Error_Handler+0x8>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_MspInit+0x4c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_MspInit+0x4c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_MspInit+0x4c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa39 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_I2C_MspInit+0x7c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d128      	bne.n	8000990 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_I2C_MspInit+0x80>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <HAL_I2C_MspInit+0x80>)
 8000944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_I2C_MspInit+0x80>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <HAL_I2C_MspInit+0x84>)
 8000974:	f000 fa2e 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_I2C_MspInit+0x80>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_I2C_MspInit+0x80>)
 800097e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_I2C_MspInit+0x80>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40005400 	.word	0x40005400
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000400 	.word	0x48000400

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d127      	bne.n	8000a16 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009f6:	2330      	movs	r3, #48	; 0x30
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x84>)
 8000a12:	f000 f9df 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000800 	.word	0x48000800

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	201c      	movs	r0, #28
 8000a42:	f000 f99d 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 f9b6 	bl	8000db8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	61d3      	str	r3, [r2, #28]
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 ff06 	bl	8002880 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a74:	f001 fec0 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0xac>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_InitTick+0xac>)
 8000a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_InitTick+0xac>)
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_InitTick+0xac>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_InitTick+0xac>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_InitTick+0xac>)
 8000ab0:	f002 f8aa 	bl	8002c08 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d104      	bne.n	8000ac4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <HAL_InitTick+0xac>)
 8000abc:	f002 f906 	bl	8002ccc <HAL_TIM_Base_Start_IT>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	e000      	b.n	8000ac6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	20000130 	.word	0x20000130

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM2_IRQHandler+0x10>)
 8000b0e:	f002 f931 	bl	8002d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000130 	.word	0x20000130

08000b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b24:	f000 fafa 	bl	800111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 ff05 	bl	800698c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fb2f 	bl	80001e4 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08006af8 	.word	0x08006af8
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20001348 	.word	0x20001348

08000ba0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x28>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x28>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff ff36 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe84 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	2000017c 	.word	0x2000017c

08000bf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000017c 	.word	0x2000017c

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e14e      	b.n	8001082 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8140 	beq.w	800107c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 809a 	beq.w	800107c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a54      	ldr	r2, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8a:	d013      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d00d      	beq.n	8000fb0 <HAL_GPIO_Init+0x1dc>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a45      	ldr	r2, [pc, #276]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x1d8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_GPIO_Init+0x1d4>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc6:	4937      	ldr	r1, [pc, #220]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	f47f aea9 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43d9      	mvns	r1, r3
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	400b      	ands	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fb14 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e081      	b.n	8001262 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fbd2 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800119c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e006      	b.n	80011d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d104      	bne.n	80011e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69d9      	ldr	r1, [r3, #28]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2220      	movs	r2, #32
 800124e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b20      	cmp	r3, #32
 800127e:	d138      	bne.n	80012f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800128a:	2302      	movs	r3, #2
 800128c:	e032      	b.n	80012f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2224      	movs	r2, #36	; 0x24
 800129a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012f2:	2302      	movs	r3, #2
  }
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	d139      	bne.n	800138a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001320:	2302      	movs	r3, #2
 8001322:	e033      	b.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2224      	movs	r2, #36	; 0x24
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001352:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0201 	orr.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2220      	movs	r2, #32
 800137a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800138a:	2302      	movs	r3, #2
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800139e:	af00      	add	r7, sp, #0
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f001 b823 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 817d 	beq.w	80016ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013d4:	4bbc      	ldr	r3, [pc, #752]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d00c      	beq.n	80013fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e0:	4bb9      	ldr	r3, [pc, #740]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d15c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x10e>
 80013ec:	4bb6      	ldr	r3, [pc, #728]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d155      	bne.n	80014a6 <HAL_RCC_OscConfig+0x10e>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800140e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x94>
 8001426:	4ba8      	ldr	r3, [pc, #672]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0xc0>
 800142c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001430:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001444:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001448:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001454:	4b9c      	ldr	r3, [pc, #624]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800145c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001460:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001464:	fa92 f2a2 	rbit	r2, r2
 8001468:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800146c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001470:	fab2 f282 	clz	r2, r2
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f042 0220 	orr.w	r2, r2, #32
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f002 021f 	and.w	r2, r2, #31
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 811f 	beq.w	80016cc <HAL_RCC_OscConfig+0x334>
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8116 	bne.w	80016cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f000 bfaf 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12e>
 80014b8:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a82      	ldr	r2, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e036      	b.n	8001534 <HAL_RCC_OscConfig+0x19c>
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x158>
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7b      	ldr	r2, [pc, #492]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a78      	ldr	r2, [pc, #480]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e021      	b.n	8001534 <HAL_RCC_OscConfig+0x19c>
 80014f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x184>
 8001502:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a70      	ldr	r2, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6d      	ldr	r2, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0x19c>
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a69      	ldr	r2, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001534:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	f023 020f 	bic.w	r2, r3, #15
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	495f      	ldr	r1, [pc, #380]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800154a:	4313      	orrs	r3, r2
 800154c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d059      	beq.n	8001612 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb4b 	bl	8000bf8 <HAL_GetTick>
 8001562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fb46 	bl	8000bf8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 bf43 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x218>
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0x244>
 80015b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80015e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80015f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ab      	beq.n	8001568 <HAL_RCC_OscConfig+0x1d0>
 8001610:	e05d      	b.n	80016ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff faf1 	bl	8000bf8 <HAL_GetTick>
 8001616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff faec 	bl	8000bf8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d902      	bls.n	8001632 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	f000 bee9 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 8001632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001636:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001646:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x2cc>
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0x2f8>
 8001664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001668:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001680:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001694:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001698:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800169c:	fa92 f2a2 	rbit	r2, r2
 80016a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80016a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80016a8:	fab2 f282 	clz	r2, r2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ab      	bne.n	800161c <HAL_RCC_OscConfig+0x284>
 80016c4:	e003      	b.n	80016ce <HAL_RCC_OscConfig+0x336>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 817d 	beq.w	80019de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016e4:	4ba6      	ldr	r3, [pc, #664]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016f0:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d172      	bne.n	80017e2 <HAL_RCC_OscConfig+0x44a>
 80016fc:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d16c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x44a>
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800171a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <HAL_RCC_OscConfig+0x3a0>
 8001732:	4b93      	ldr	r3, [pc, #588]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	e013      	b.n	8001760 <HAL_RCC_OscConfig+0x3c8>
 8001738:	2302      	movs	r3, #2
 800173a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001750:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2202      	movs	r2, #2
 8001762:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001766:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800176a:	fa92 f2a2 	rbit	r2, r2
 800176e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001772:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0220 	orr.w	r2, r2, #32
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <HAL_RCC_OscConfig+0x410>
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d002      	beq.n	80017a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 be2e 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b75      	ldr	r3, [pc, #468]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	21f8      	movs	r1, #248	; 0xf8
 80017be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017c6:	fa91 f1a1 	rbit	r1, r1
 80017ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017d2:	fab1 f181 	clz	r1, r1
 80017d6:	b2c9      	uxtb	r1, r1
 80017d8:	408b      	lsls	r3, r1
 80017da:	4969      	ldr	r1, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e0:	e0fd      	b.n	80019de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8088 	beq.w	8001904 <HAL_RCC_OscConfig+0x56c>
 80017f4:	2301      	movs	r3, #1
 80017f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001806:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	461a      	mov	r2, r3
 800181c:	2301      	movs	r3, #1
 800181e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f9ea 	bl	8000bf8 <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff f9e5 	bl	8000bf8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d902      	bls.n	8001840 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	f000 bde2 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001852:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <HAL_RCC_OscConfig+0x4d8>
 800186a:	4b45      	ldr	r3, [pc, #276]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	e013      	b.n	8001898 <HAL_RCC_OscConfig+0x500>
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001888:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	2202      	movs	r2, #2
 800189a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800189e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018a2:	fa92 f2a2 	rbit	r2, r2
 80018a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80018aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0220 	orr.w	r2, r2, #32
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0af      	beq.n	800182a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	21f8      	movs	r1, #248	; 0xf8
 80018e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018e8:	fa91 f1a1 	rbit	r1, r1
 80018ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018f4:	fab1 f181 	clz	r1, r1
 80018f8:	b2c9      	uxtb	r1, r1
 80018fa:	408b      	lsls	r3, r1
 80018fc:	4920      	ldr	r1, [pc, #128]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	e06c      	b.n	80019de <HAL_RCC_OscConfig+0x646>
 8001904:	2301      	movs	r3, #1
 8001906:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f962 	bl	8000bf8 <HAL_GetTick>
 8001934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff f95d 	bl	8000bf8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d902      	bls.n	8001950 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	f000 bd5a 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d104      	bne.n	8001984 <HAL_RCC_OscConfig+0x5ec>
 800197a:	4b01      	ldr	r3, [pc, #4]	; (8001980 <HAL_RCC_OscConfig+0x5e8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e015      	b.n	80019ac <HAL_RCC_OscConfig+0x614>
 8001980:	40021000 	.word	0x40021000
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800199c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019a8:	4bc8      	ldr	r3, [pc, #800]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2202      	movs	r2, #2
 80019ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80019b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80019be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ad      	bne.n	800193a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8110 	beq.w	8001c14 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d079      	beq.n	8001af8 <HAL_RCC_OscConfig+0x760>
 8001a04:	2301      	movs	r3, #1
 8001a06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	4bab      	ldr	r3, [pc, #684]	; (8001cd0 <HAL_RCC_OscConfig+0x938>)
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f8e3 	bl	8000bf8 <HAL_GetTick>
 8001a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f8de 	bl	8000bf8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d902      	bls.n	8001a4e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f000 bcdb 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a68:	2202      	movs	r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aa6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa8:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	6019      	str	r1, [r3, #0]
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f1a3 	rbit	r1, r3
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ace:	6019      	str	r1, [r3, #0]
  return result;
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0a0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x6a0>
 8001af6:	e08d      	b.n	8001c14 <HAL_RCC_OscConfig+0x87c>
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b1a:	601a      	str	r2, [r3, #0]
  return result;
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x938>)
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	461a      	mov	r2, r3
 8001b36:	2300      	movs	r3, #0
 8001b38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f85d 	bl	8000bf8 <HAL_GetTick>
 8001b3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f858 	bl	8000bf8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d902      	bls.n	8001b5a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f000 bc55 	b.w	8002404 <HAL_RCC_OscConfig+0x106c>
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f1a3 	rbit	r1, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bec:	6019      	str	r1, [r3, #0]
  return result;
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d197      	bne.n	8001b44 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 81a1 	beq.w	8001f6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d116      	bne.n	8001c6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x93c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11a      	bne.n	8001cac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_RCC_OscConfig+0x93c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_RCC_OscConfig+0x93c>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7fe ffb9 	bl	8000bf8 <HAL_GetTick>
 8001c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	e009      	b.n	8001ca0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8c:	f7fe ffb4 	bl	8000bf8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e3b1      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x93c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ef      	beq.n	8001c8c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x940>
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a02      	ldr	r2, [pc, #8]	; (8001ccc <HAL_RCC_OscConfig+0x934>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e03c      	b.n	8001d44 <HAL_RCC_OscConfig+0x9ac>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	10908120 	.word	0x10908120
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x96a>
 8001ce8:	4bc1      	ldr	r3, [pc, #772]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4ac0      	ldr	r2, [pc, #768]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4bbe      	ldr	r3, [pc, #760]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4abd      	ldr	r2, [pc, #756]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e020      	b.n	8001d44 <HAL_RCC_OscConfig+0x9ac>
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x994>
 8001d12:	4bb7      	ldr	r3, [pc, #732]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4ab6      	ldr	r2, [pc, #728]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4bb4      	ldr	r3, [pc, #720]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4ab3      	ldr	r2, [pc, #716]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x9ac>
 8001d2c:	4bb0      	ldr	r3, [pc, #704]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4aaf      	ldr	r2, [pc, #700]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4bad      	ldr	r3, [pc, #692]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4aac      	ldr	r2, [pc, #688]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8081 	beq.w	8001e58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff4f 	bl	8000bf8 <HAL_GetTick>
 8001d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe ff4a 	bl	8000bf8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e345      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d80:	2202      	movs	r2, #2
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0xa4c>
 8001dde:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	e013      	b.n	8001e0c <HAL_RCC_OscConfig+0xa74>
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e14:	2102      	movs	r1, #2
 8001e16:	6011      	str	r1, [r2, #0]
 8001e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	fa92 f1a2 	rbit	r1, r2
 8001e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e2e:	6011      	str	r1, [r2, #0]
  return result;
 8001e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e34:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d084      	beq.n	8001d60 <HAL_RCC_OscConfig+0x9c8>
 8001e56:	e07f      	b.n	8001f58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fece 	bl	8000bf8 <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe fec9 	bl	8000bf8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e2c4      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e82:	2202      	movs	r2, #2
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ec0:	601a      	str	r2, [r3, #0]
  return result;
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001eca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xb4e>
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	e013      	b.n	8001f0e <HAL_RCC_OscConfig+0xb76>
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001eee:	2202      	movs	r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f16:	2102      	movs	r1, #2
 8001f18:	6011      	str	r1, [r2, #0]
 8001f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fa92 f1a2 	rbit	r1, r2
 8001f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f002 021f 	and.w	r2, r2, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d184      	bne.n	8001e62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8242 	beq.w	8002402 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_RCC_OscConfig+0xc58>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	f000 8213 	beq.w	80023b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f040 8162 	bne.w	8002262 <HAL_RCC_OscConfig+0xeca>
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fc2:	601a      	str	r2, [r3, #0]
  return result;
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe08 	bl	8000bf8 <HAL_GetTick>
 8001fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e00c      	b.n	8002008 <HAL_RCC_OscConfig+0xc70>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fe00 	bl	8000bf8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1fd      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800202c:	601a      	str	r2, [r3, #0]
  return result;
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002036:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_RCC_OscConfig+0xcba>
 800204c:	4bb0      	ldr	r3, [pc, #704]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e027      	b.n	80020a2 <HAL_RCC_OscConfig+0xd0a>
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800205a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	4b9c      	ldr	r3, [pc, #624]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020ae:	6011      	str	r1, [r2, #0]
 80020b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	fa92 f1a2 	rbit	r1, r2
 80020be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020c6:	6011      	str	r1, [r2, #0]
  return result;
 80020c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d182      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	430b      	orrs	r3, r1
 8002110:	497f      	ldr	r1, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800211e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800213a:	601a      	str	r2, [r3, #0]
  return result;
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002144:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	2301      	movs	r3, #1
 800215a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fd4c 	bl	8000bf8 <HAL_GetTick>
 8002160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe fd47 	bl	8000bf8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e144      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800219e:	601a      	str	r2, [r3, #0]
  return result;
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0xe2c>
 80021be:	4b54      	ldr	r3, [pc, #336]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	e027      	b.n	8002214 <HAL_RCC_OscConfig+0xe7c>
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002218:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800221c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002220:	6011      	str	r1, [r2, #0]
 8002222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002226:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	fa92 f1a2 	rbit	r1, r2
 8002230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002234:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002238:	6011      	str	r1, [r2, #0]
  return result;
 800223a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800223e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d082      	beq.n	8002166 <HAL_RCC_OscConfig+0xdce>
 8002260:	e0cf      	b.n	8002402 <HAL_RCC_OscConfig+0x106a>
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800226a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002286:	601a      	str	r2, [r3, #0]
  return result;
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002290:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800229c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fca6 	bl	8000bf8 <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	e009      	b.n	80022c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fca1 	bl	8000bf8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e09e      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022ea:	601a      	str	r2, [r3, #0]
  return result;
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d104      	bne.n	8002314 <HAL_RCC_OscConfig+0xf7c>
 800230a:	4b01      	ldr	r3, [pc, #4]	; (8002310 <HAL_RCC_OscConfig+0xf78>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e029      	b.n	8002364 <HAL_RCC_OscConfig+0xfcc>
 8002310:	40021000 	.word	0x40021000
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800231c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCC_OscConfig+0x1078>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002368:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800236c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002376:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	fa92 f1a2 	rbit	r1, r2
 8002380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002384:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002388:	6011      	str	r1, [r2, #0]
  return result;
 800238a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d180      	bne.n	80022b2 <HAL_RCC_OscConfig+0xf1a>
 80023b0:	e027      	b.n	8002402 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01e      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_OscConfig+0x1078>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b09e      	sub	sp, #120	; 0x78
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e162      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b90      	ldr	r3, [pc, #576]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	498b      	ldr	r1, [pc, #556]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e14a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	497f      	ldr	r1, [pc, #508]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80dc 	beq.w	8002640 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d13c      	bne.n	800250a <HAL_RCC_ClockConfig+0xf6>
 8002490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002494:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_ClockConfig+0xa6>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e00f      	b.n	80024da <HAL_RCC_ClockConfig+0xc6>
 80024ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
 80024c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
 80024ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024de:	65ba      	str	r2, [r7, #88]	; 0x58
 80024e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d17b      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0f3      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d13c      	bne.n	800258c <HAL_RCC_ClockConfig+0x178>
 8002512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_ClockConfig+0x128>
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e00f      	b.n	800255c <HAL_RCC_ClockConfig+0x148>
 800253c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002560:	63ba      	str	r2, [r7, #56]	; 0x38
 8002562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002564:	fa92 f2a2 	rbit	r2, r2
 8002568:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800256a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f002 021f 	and.w	r2, r2, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13a      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b2      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
 800258c:	2302      	movs	r3, #2
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x1a0>
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e00d      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1bc>
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	61ba      	str	r2, [r7, #24]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	617a      	str	r2, [r7, #20]
  return result;
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e079      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	491a      	ldr	r1, [pc, #104]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe faf2 	bl	8000bf8 <HAL_GetTick>
 8002614:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe faee 	bl	8000bf8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e061      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d214      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4906      	ldr	r1, [pc, #24]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e040      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	491a      	ldr	r1, [pc, #104]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4912      	ldr	r1, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026b6:	f000 f829 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ba:	4601      	mov	r1, r0
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c4:	22f0      	movs	r2, #240	; 0xf0
 80026c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	fa92 f2a2 	rbit	r2, r2
 80026ce:	60fa      	str	r2, [r7, #12]
  return result;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	40d3      	lsrs	r3, r2
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x2ec>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	fa21 f303 	lsr.w	r3, r1, r3
 80026e2:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCC_ClockConfig+0x2f0>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_ClockConfig+0x2f4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f99e 	bl	8000a2c <HAL_InitTick>
  
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3778      	adds	r7, #120	; 0x78
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	08006ab8 	.word	0x08006ab8
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x30>
 8002736:	2b08      	cmp	r3, #8
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x36>
 800273a:	e03c      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800273e:	623b      	str	r3, [r7, #32]
      break;
 8002740:	e03c      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002748:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800274c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	607a      	str	r2, [r7, #4]
  return result;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	fab2 f282 	clz	r2, r2
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	40d3      	lsrs	r3, r2
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	220f      	movs	r2, #15
 8002770:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	60fa      	str	r2, [r7, #12]
  return result;
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	40d3      	lsrs	r3, r2
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	e004      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027bc:	6a3b      	ldr	r3, [r7, #32]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	372c      	adds	r7, #44	; 0x2c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	08006ad0 	.word	0x08006ad0
 80027d8:	08006ae0 	.word	0x08006ae0
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027fe:	f7ff ffef 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	603a      	str	r2, [r7, #0]
  return result;
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	40d3      	lsrs	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08006ac8 	.word	0x08006ac8

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002842:	f7ff ffcd 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002846:	4601      	mov	r1, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002854:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	603a      	str	r2, [r7, #0]
  return result;
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK2Freq+0x40>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	08006ac8 	.word	0x08006ac8

08002880 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	220f      	movs	r2, #15
 800288e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_RCC_GetClockConfig+0x60>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0207 	and.w	r2, r3, #7
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40022000 	.word	0x40022000

080028e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b092      	sub	sp, #72	; 0x48
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80d4 	beq.w	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002908:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10e      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	61d3      	str	r3, [r2, #28]
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292c:	2301      	movs	r3, #1
 800292e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b45      	ldr	r3, [pc, #276]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d118      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a41      	ldr	r2, [pc, #260]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7fe f955 	bl	8000bf8 <HAL_GetTick>
 800294e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe f951 	bl	8000bf8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e14b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8084 	beq.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800298c:	429a      	cmp	r2, r3
 800298e:	d07c      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	461a      	mov	r2, r3
 80029ba:	2301      	movs	r3, #1
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe f901 	bl	8000bf8 <HAL_GetTick>
 80029f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe f8fd 	bl	8000bf8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0f5      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	61fb      	str	r3, [r7, #28]
  return result;
 8002a28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a3e:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	e00d      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	10908100 	.word	0x10908100
 8002a50:	2302      	movs	r3, #2
 8002a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2202      	movs	r2, #2
 8002a62:	613a      	str	r2, [r7, #16]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0b7      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a8a:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	495b      	ldr	r1, [pc, #364]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f023 0203 	bic.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494e      	ldr	r1, [pc, #312]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f023 0210 	bic.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4947      	ldr	r1, [pc, #284]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002af8:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	493f      	ldr	r1, [pc, #252]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f023 0220 	bic.w	r2, r3, #32
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4938      	ldr	r1, [pc, #224]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4930      	ldr	r1, [pc, #192]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4929      	ldr	r1, [pc, #164]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4921      	ldr	r1, [pc, #132]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	4912      	ldr	r1, [pc, #72]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	490b      	ldr	r1, [pc, #44]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3748      	adds	r7, #72	; 0x48
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e049      	b.n	8002cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f841 	bl	8002cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 f9dc 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e03b      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIM_Base_Start_IT+0x4e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIM_Base_Start_IT+0x4e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d115      	bne.n	8002d46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_TIM_Base_Start_IT+0xa4>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d015      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d011      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d44:	e008      	b.n	8002d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	00010007 	.word	0x00010007

08002d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0202 	mvn.w	r2, #2
 8002da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f905 	bl	8002fc6 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8f7 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f908 	bl	8002fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0204 	mvn.w	r2, #4
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8db 	bl	8002fc6 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8cd 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8de 	bl	8002fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0208 	mvn.w	r2, #8
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8b1 	bl	8002fc6 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8a3 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8b4 	bl	8002fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f887 	bl	8002fc6 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f879 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f88a 	bl	8002fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0201 	mvn.w	r2, #1
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fcd6 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8e8 	bl	80030f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f32:	d10e      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8db 	bl	8003108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d10e      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d107      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f838 	bl	8002fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d10e      	bne.n	8002faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d107      	bne.n	8002faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f06f 0220 	mvn.w	r2, #32
 8002fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f89b 	bl	80030e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <TIM_Base_SetConfig+0xcc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0x20>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d108      	bne.n	8003036 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a25      	ldr	r2, [pc, #148]	; (80030d0 <TIM_Base_SetConfig+0xcc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00f      	beq.n	800305e <TIM_Base_SetConfig+0x5a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d00b      	beq.n	800305e <TIM_Base_SetConfig+0x5a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <TIM_Base_SetConfig+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <TIM_Base_SetConfig+0x5a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <TIM_Base_SetConfig+0xd4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_Base_SetConfig+0x5a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a20      	ldr	r2, [pc, #128]	; (80030dc <TIM_Base_SetConfig+0xd8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d108      	bne.n	8003070 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <TIM_Base_SetConfig+0xcc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <TIM_Base_SetConfig+0xd0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <TIM_Base_SetConfig+0xd4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0xb0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <TIM_Base_SetConfig+0xd8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800

080030e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e040      	b.n	80031b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fc30 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f980 	bl	8003460 <UART_SetConfig>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 faaa 	bl	80036cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb31 	bl	8003810 <UART_CheckIdleState>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d178      	bne.n	80032c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_UART_Transmit+0x24>
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e071      	b.n	80032c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2221      	movs	r2, #33	; 0x21
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ee:	f7fd fd03 	bl	8000bf8 <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x68>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003228:	e030      	b.n	800328c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb93 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e03c      	b.n	80032c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325c:	b292      	uxth	r2, r2
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	3302      	adds	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e008      	b.n	800327a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b292      	uxth	r2, r2
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1c8      	bne.n	800322a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fb5c 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e005      	b.n	80032c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	f040 80b6 	bne.w	8003454 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Receive+0x28>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0ae      	b.n	8003456 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2222      	movs	r2, #34	; 0x22
 8003304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fd fc73 	bl	8000bf8 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d10e      	bne.n	800334c <HAL_UART_Receive+0x80>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_UART_Receive+0x76>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f240 12ff 	movw	r2, #511	; 0x1ff
 800333c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003340:	e02d      	b.n	800339e <HAL_UART_Receive+0xd2>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800334a:	e028      	b.n	800339e <HAL_UART_Receive+0xd2>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_UART_Receive+0xa4>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_UART_Receive+0x9a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003364:	e01b      	b.n	800339e <HAL_UART_Receive+0xd2>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	227f      	movs	r2, #127	; 0x7f
 800336a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800336e:	e016      	b.n	800339e <HAL_UART_Receive+0xd2>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003378:	d10d      	bne.n	8003396 <HAL_UART_Receive+0xca>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <HAL_UART_Receive+0xc0>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	227f      	movs	r2, #127	; 0x7f
 8003386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800338a:	e008      	b.n	800339e <HAL_UART_Receive+0xd2>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	223f      	movs	r2, #63	; 0x3f
 8003390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003394:	e003      	b.n	800339e <HAL_UART_Receive+0xd2>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d108      	bne.n	80033c2 <HAL_UART_Receive+0xf6>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	e003      	b.n	80033ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033ca:	e037      	b.n	800343c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2120      	movs	r1, #32
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fac2 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e033      	b.n	8003456 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10c      	bne.n	800340e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	8a7b      	ldrh	r3, [r7, #18]
 80033fe:	4013      	ands	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3302      	adds	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e00d      	b.n	800342a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003414:	b29b      	uxth	r3, r3
 8003416:	b2da      	uxtb	r2, r3
 8003418:	8a7b      	ldrh	r3, [r7, #18]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	4013      	ands	r3, r2
 800341e:	b2da      	uxtb	r2, r3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1c1      	bne.n	80033cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b8a      	ldr	r3, [pc, #552]	; (80036b4 <UART_SetConfig+0x254>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	430b      	orrs	r3, r1
 8003496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a78      	ldr	r2, [pc, #480]	; (80036b8 <UART_SetConfig+0x258>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d120      	bne.n	800351e <UART_SetConfig+0xbe>
 80034dc:	4b77      	ldr	r3, [pc, #476]	; (80036bc <UART_SetConfig+0x25c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d817      	bhi.n	8003518 <UART_SetConfig+0xb8>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x90>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003513 	.word	0x08003513
 80034fc:	08003507 	.word	0x08003507
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e01d      	b.n	8003542 <UART_SetConfig+0xe2>
 8003506:	2302      	movs	r3, #2
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e01a      	b.n	8003542 <UART_SetConfig+0xe2>
 800350c:	2304      	movs	r3, #4
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e017      	b.n	8003542 <UART_SetConfig+0xe2>
 8003512:	2308      	movs	r3, #8
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e014      	b.n	8003542 <UART_SetConfig+0xe2>
 8003518:	2310      	movs	r3, #16
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e011      	b.n	8003542 <UART_SetConfig+0xe2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a67      	ldr	r2, [pc, #412]	; (80036c0 <UART_SetConfig+0x260>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d102      	bne.n	800352e <UART_SetConfig+0xce>
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e009      	b.n	8003542 <UART_SetConfig+0xe2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a64      	ldr	r2, [pc, #400]	; (80036c4 <UART_SetConfig+0x264>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d102      	bne.n	800353e <UART_SetConfig+0xde>
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e001      	b.n	8003542 <UART_SetConfig+0xe2>
 800353e:	2310      	movs	r3, #16
 8003540:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d15a      	bne.n	8003602 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d827      	bhi.n	80035a2 <UART_SetConfig+0x142>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0xf8>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	0800357d 	.word	0x0800357d
 800355c:	08003585 	.word	0x08003585
 8003560:	0800358d 	.word	0x0800358d
 8003564:	080035a3 	.word	0x080035a3
 8003568:	08003593 	.word	0x08003593
 800356c:	080035a3 	.word	0x080035a3
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035a3 	.word	0x080035a3
 8003578:	0800359b 	.word	0x0800359b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357c:	f7ff f93c 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003580:	61b8      	str	r0, [r7, #24]
        break;
 8003582:	e013      	b.n	80035ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7ff f95a 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003588:	61b8      	str	r0, [r7, #24]
        break;
 800358a:	e00f      	b.n	80035ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800358c:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <UART_SetConfig+0x268>)
 800358e:	61bb      	str	r3, [r7, #24]
        break;
 8003590:	e00c      	b.n	80035ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7ff f8bb 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8003596:	61b8      	str	r0, [r7, #24]
        break;
 8003598:	e008      	b.n	80035ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359e:	61bb      	str	r3, [r7, #24]
        break;
 80035a0:	e004      	b.n	80035ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	77bb      	strb	r3, [r7, #30]
        break;
 80035aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d074      	beq.n	800369c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	005a      	lsls	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	d916      	bls.n	80035fc <UART_SetConfig+0x19c>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d212      	bcs.n	80035fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f023 030f 	bic.w	r3, r3, #15
 80035de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	89fa      	ldrh	r2, [r7, #14]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	e04f      	b.n	800369c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77bb      	strb	r3, [r7, #30]
 8003600:	e04c      	b.n	800369c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d828      	bhi.n	800365a <UART_SetConfig+0x1fa>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x1b0>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003635 	.word	0x08003635
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003645 	.word	0x08003645
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800364b 	.word	0x0800364b
 8003624:	0800365b 	.word	0x0800365b
 8003628:	0800365b 	.word	0x0800365b
 800362c:	0800365b 	.word	0x0800365b
 8003630:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7ff f8e0 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003638:	61b8      	str	r0, [r7, #24]
        break;
 800363a:	e013      	b.n	8003664 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7ff f8fe 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003640:	61b8      	str	r0, [r7, #24]
        break;
 8003642:	e00f      	b.n	8003664 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <UART_SetConfig+0x268>)
 8003646:	61bb      	str	r3, [r7, #24]
        break;
 8003648:	e00c      	b.n	8003664 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7ff f85f 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800364e:	61b8      	str	r0, [r7, #24]
        break;
 8003650:	e008      	b.n	8003664 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003656:	61bb      	str	r3, [r7, #24]
        break;
 8003658:	e004      	b.n	8003664 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	77bb      	strb	r3, [r7, #30]
        break;
 8003662:	bf00      	nop
    }

    if (pclk != 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085a      	lsrs	r2, r3, #1
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	441a      	add	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d909      	bls.n	8003698 <UART_SetConfig+0x238>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d205      	bcs.n	8003698 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	e001      	b.n	800369c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	efff69f3 	.word	0xefff69f3
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40004400 	.word	0x40004400
 80036c4:	40004800 	.word	0x40004800
 80036c8:	007a1200 	.word	0x007a1200

080036cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ca:	d10a      	bne.n	80037e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b098      	sub	sp, #96	; 0x60
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003820:	f7fd f9ea 	bl	8000bf8 <HAL_GetTick>
 8003824:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d12e      	bne.n	8003892 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f88c 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d021      	beq.n	8003892 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003862:	653b      	str	r3, [r7, #80]	; 0x50
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e6      	bne.n	800384e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e062      	b.n	8003958 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d149      	bne.n	8003934 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f856 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03c      	beq.n	8003934 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	623b      	str	r3, [r7, #32]
   return(result);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e6      	bne.n	80038ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	64bb      	str	r3, [r7, #72]	; 0x48
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	69b9      	ldr	r1, [r7, #24]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	617b      	str	r3, [r7, #20]
   return(result);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e5      	bne.n	80038ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e011      	b.n	8003958 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3758      	adds	r7, #88	; 0x58
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	e049      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d045      	beq.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fd f93d 	bl	8000bf8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <UART_WaitOnFlagUntilTimeout+0x30>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e048      	b.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d031      	beq.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d110      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2208      	movs	r2, #8
 80039b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f838 	bl	8003a2e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2208      	movs	r2, #8
 80039c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e029      	b.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d111      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f81e 	bl	8003a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e00f      	b.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d0a6      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b095      	sub	sp, #84	; 0x54
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	643b      	str	r3, [r7, #64]	; 0x40
 8003a56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e6      	bne.n	8003a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d118      	bne.n	8003ad6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aea:	bf00      	nop
 8003aec:	3754      	adds	r7, #84	; 0x54
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b08:	2b84      	cmp	r3, #132	; 0x84
 8003b0a:	d005      	beq.n	8003b18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	3303      	adds	r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b18:	68fb      	ldr	r3, [r7, #12]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b2a:	f001 f8df 	bl	8004cec <vTaskStartScheduler>
  
  return osOK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685c      	ldr	r4, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b4a:	b29e      	uxth	r6, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ffcf 	bl	8003af6 <makeFreeRtosPriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	9200      	str	r2, [sp, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4632      	mov	r2, r6
 8003b66:	4629      	mov	r1, r5
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f000 ff5d 	bl	8004a28 <xTaskCreate>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <osDelay+0x16>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	e000      	b.n	8003b9a <osDelay+0x18>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f872 	bl	8004c84 <vTaskDelay>
  
  return osOK;
 8003ba0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f103 0208 	add.w	r2, r3, #8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 0208 	add.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f103 0208 	add.w	r2, r3, #8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d103      	bne.n	8003c6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e00c      	b.n	8003c86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <vListInsert+0x2e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d2f6      	bcs.n	8003c74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6852      	ldr	r2, [r2, #4]
 8003cde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d103      	bne.n	8003cf2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d3e:	f002 fb29 	bl	8006394 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	441a      	add	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	22ff      	movs	r2, #255	; 0xff
 8003d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d114      	bne.n	8003dbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3310      	adds	r3, #16
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fa57 	bl	8005254 <xTaskRemoveFromEventList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d012      	beq.n	8003dd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <xQueueGenericReset+0xcc>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	e009      	b.n	8003dd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fef1 	bl	8003baa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3324      	adds	r3, #36	; 0x24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff feec 	bl	8003baa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dd2:	f002 fb0f 	bl	80063f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dd6:	2301      	movs	r3, #1
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	613b      	str	r3, [r7, #16]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e004      	b.n	8003e24 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3348      	adds	r3, #72	; 0x48
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 fbd5 	bl	80065d8 <pvPortMalloc>
 8003e2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3348      	adds	r3, #72	; 0x48
 8003e3a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e3c:	79fa      	ldrb	r2, [r7, #7]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f805 	bl	8003e58 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e86:	2101      	movs	r1, #1
 8003e88:	69b8      	ldr	r0, [r7, #24]
 8003e8a:	f7ff ff43 	bl	8003d14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	613b      	str	r3, [r7, #16]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d90a      	bls.n	8003eda <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003eda:	2202      	movs	r2, #2
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff80 	bl	8003de4 <xQueueGenericCreate>
 8003ee4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003ef2:	697b      	ldr	r3, [r7, #20]
	}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <xQueueGenericSend+0x32>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <xQueueGenericSend+0x40>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <xQueueGenericSend+0x44>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <xQueueGenericSend+0x46>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <xQueueGenericSend+0x60>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d103      	bne.n	8003f6a <xQueueGenericSend+0x6e>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <xQueueGenericSend+0x72>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueGenericSend+0x74>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	623b      	str	r3, [r7, #32]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8a:	f001 fb31 	bl	80055f0 <xTaskGetSchedulerState>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <xQueueGenericSend+0x9e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <xQueueGenericSend+0xa2>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGenericSend+0xa4>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueGenericSend+0xbe>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	61fb      	str	r3, [r7, #28]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fba:	f002 f9eb 	bl	8006394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <xQueueGenericSend+0xd4>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d129      	bne.n	8004024 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd6:	f000 fbb9 	bl	800474c <prvCopyDataToQueue>
 8003fda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	3324      	adds	r3, #36	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f933 	bl	8005254 <xTaskRemoveFromEventList>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ff4:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <xQueueGenericSend+0x1f8>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	e00a      	b.n	800401c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <xQueueGenericSend+0x1f8>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800401c:	f002 f9ea 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 8004020:	2301      	movs	r3, #1
 8004022:	e063      	b.n	80040ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800402a:	f002 f9e3 	bl	80063f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800402e:	2300      	movs	r3, #0
 8004030:	e05c      	b.n	80040ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f96d 	bl	800531c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004042:	2301      	movs	r3, #1
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004046:	f002 f9d5 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800404a:	f000 fe9d 	bl	8004d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800404e:	f002 f9a1 	bl	8006394 <vPortEnterCritical>
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004058:	b25b      	sxtb	r3, r3
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d103      	bne.n	8004068 <xQueueGenericSend+0x16c>
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406e:	b25b      	sxtb	r3, r3
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d103      	bne.n	800407e <xQueueGenericSend+0x182>
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800407e:	f002 f9b9 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004082:	1d3a      	adds	r2, r7, #4
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f95c 	bl	8005348 <xTaskCheckForTimeOut>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d124      	bne.n	80040e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004098:	f000 fc50 	bl	800493c <prvIsQueueFull>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	3310      	adds	r3, #16
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f882 	bl	80051b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b2:	f000 fbdb 	bl	800486c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040b6:	f000 feaf 	bl	8004e18 <xTaskResumeAll>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af7c 	bne.w	8003fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <xQueueGenericSend+0x1f8>)
 80040c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	e772      	b.n	8003fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040d6:	f000 fbc9 	bl	800486c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040da:	f000 fe9d 	bl	8004e18 <xTaskResumeAll>
 80040de:	e76c      	b.n	8003fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e2:	f000 fbc3 	bl	800486c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040e6:	f000 fe97 	bl	8004e18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ea:	2300      	movs	r3, #0
		}
	}
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3738      	adds	r7, #56	; 0x38
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <xQueueGenericSendFromISR+0x3c>
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <xQueueGenericSendFromISR+0x40>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <xQueueGenericSendFromISR+0x42>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	623b      	str	r3, [r7, #32]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d103      	bne.n	8004162 <xQueueGenericSendFromISR+0x6a>
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <xQueueGenericSendFromISR+0x6e>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <xQueueGenericSendFromISR+0x70>
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61fb      	str	r3, [r7, #28]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004182:	f002 f9e9 	bl	8006558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004186:	f3ef 8211 	mrs	r2, BASEPRI
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	61ba      	str	r2, [r7, #24]
 800419c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800419e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <xQueueGenericSendFromISR+0xbc>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d12c      	bne.n	800420e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c4:	f000 fac2 	bl	800474c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d112      	bne.n	80041f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f838 	bl	8005254 <xTaskRemoveFromEventList>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00e      	beq.n	8004208 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	b25a      	sxtb	r2, r3
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004208:	2301      	movs	r3, #1
 800420a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800420c:	e001      	b.n	8004212 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800421c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800421e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004220:	4618      	mov	r0, r3
 8004222:	3738      	adds	r7, #56	; 0x38
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	623b      	str	r3, [r7, #32]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <xQueueGiveFromISR+0x48>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	61fb      	str	r3, [r7, #28]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <xQueueGiveFromISR+0x58>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <xQueueGiveFromISR+0x5c>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <xQueueGiveFromISR+0x5e>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	61bb      	str	r3, [r7, #24]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042a0:	f002 f95a 	bl	8006558 <vPortValidateInterruptPriority>
	__asm volatile
 80042a4:	f3ef 8211 	mrs	r2, BASEPRI
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	617a      	str	r2, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80042bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d22b      	bcs.n	8004328 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d112      	bne.n	8004312 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	3324      	adds	r3, #36	; 0x24
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 ffab 	bl	8005254 <xTaskRemoveFromEventList>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e007      	b.n	8004322 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004316:	3301      	adds	r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	b25a      	sxtb	r2, r3
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004322:	2301      	movs	r3, #1
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	e001      	b.n	800432c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004328:	2300      	movs	r3, #0
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f383 8811 	msr	BASEPRI, r3
}
 8004336:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800433a:	4618      	mov	r0, r3
 800433c:	3738      	adds	r7, #56	; 0x38
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <xQueueReceive+0x30>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	623b      	str	r3, [r7, #32]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <xQueueReceive+0x3e>
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <xQueueReceive+0x42>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <xQueueReceive+0x44>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xQueueReceive+0x5e>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61fb      	str	r3, [r7, #28]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a2:	f001 f925 	bl	80055f0 <xTaskGetSchedulerState>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <xQueueReceive+0x6e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueReceive+0x72>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueReceive+0x74>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xQueueReceive+0x8e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61bb      	str	r3, [r7, #24]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80043d2:	f001 ffdf 	bl	8006394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01f      	beq.n	8004422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e6:	f000 fa1b 	bl	8004820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1e5a      	subs	r2, r3, #1
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	3310      	adds	r3, #16
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 ff28 	bl	8005254 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <xQueueReceive+0x1bc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800441a:	f001 ffeb 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 800441e:	2301      	movs	r3, #1
 8004420:	e069      	b.n	80044f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004428:	f001 ffe4 	bl	80063f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800442c:	2300      	movs	r3, #0
 800442e:	e062      	b.n	80044f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004436:	f107 0310 	add.w	r3, r7, #16
 800443a:	4618      	mov	r0, r3
 800443c:	f000 ff6e 	bl	800531c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004444:	f001 ffd6 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004448:	f000 fc9e 	bl	8004d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800444c:	f001 ffa2 	bl	8006394 <vPortEnterCritical>
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004456:	b25b      	sxtb	r3, r3
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d103      	bne.n	8004466 <xQueueReceive+0x122>
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800446c:	b25b      	sxtb	r3, r3
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d103      	bne.n	800447c <xQueueReceive+0x138>
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800447c:	f001 ffba 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004480:	1d3a      	adds	r2, r7, #4
 8004482:	f107 0310 	add.w	r3, r7, #16
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 ff5d 	bl	8005348 <xTaskCheckForTimeOut>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d123      	bne.n	80044dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004496:	f000 fa3b 	bl	8004910 <prvIsQueueEmpty>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fe83 	bl	80051b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b0:	f000 f9dc 	bl	800486c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b4:	f000 fcb0 	bl	8004e18 <xTaskResumeAll>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d189      	bne.n	80043d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <xQueueReceive+0x1bc>)
 80044c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	e780      	b.n	80043d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f000 f9cb 	bl	800486c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d6:	f000 fc9f 	bl	8004e18 <xTaskResumeAll>
 80044da:	e77a      	b.n	80043d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f000 f9c5 	bl	800486c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e2:	f000 fc99 	bl	8004e18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e8:	f000 fa12 	bl	8004910 <prvIsQueueEmpty>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f43f af6f 	beq.w	80043d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3730      	adds	r7, #48	; 0x30
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	; 0x38
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623b      	str	r3, [r7, #32]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61fb      	str	r3, [r7, #28]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004554:	f001 f84c 	bl	80055f0 <xTaskGetSchedulerState>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <xQueueSemaphoreTake+0x60>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xQueueSemaphoreTake+0x64>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xQueueSemaphoreTake+0x66>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61bb      	str	r3, [r7, #24]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004584:	f001 ff06 	bl	8006394 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d024      	beq.n	80045de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	1e5a      	subs	r2, r3, #1
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80045a4:	f001 f9ee 	bl	8005984 <pvTaskIncrementMutexHeldCount>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00f      	beq.n	80045d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	3310      	adds	r3, #16
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fe4a 	bl	8005254 <xTaskRemoveFromEventList>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <xQueueSemaphoreTake+0x214>)
 80045c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045d6:	f001 ff0d 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 80045da:	2301      	movs	r3, #1
 80045dc:	e097      	b.n	800470e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d111      	bne.n	8004608 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	617b      	str	r3, [r7, #20]
}
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004600:	f001 fef8 	bl	80063f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004604:	2300      	movs	r3, #0
 8004606:	e082      	b.n	800470e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460e:	f107 030c 	add.w	r3, r7, #12
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fe82 	bl	800531c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800461c:	f001 feea 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004620:	f000 fbb2 	bl	8004d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004624:	f001 feb6 	bl	8006394 <vPortEnterCritical>
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d103      	bne.n	800463e <xQueueSemaphoreTake+0x13a>
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d103      	bne.n	8004654 <xQueueSemaphoreTake+0x150>
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004654:	f001 fece 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004658:	463a      	mov	r2, r7
 800465a:	f107 030c 	add.w	r3, r7, #12
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fe71 	bl	8005348 <xTaskCheckForTimeOut>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d132      	bne.n	80046d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800466c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800466e:	f000 f94f 	bl	8004910 <prvIsQueueEmpty>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d026      	beq.n	80046c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004680:	f001 fe88 	bl	8006394 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ffcf 	bl	800562c <xTaskPriorityInherit>
 800468e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004690:	f001 feb0 	bl	80063f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	3324      	adds	r3, #36	; 0x24
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fd89 	bl	80051b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046a4:	f000 f8e2 	bl	800486c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046a8:	f000 fbb6 	bl	8004e18 <xTaskResumeAll>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f47f af68 	bne.w	8004584 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <xQueueSemaphoreTake+0x214>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	e75e      	b.n	8004584 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046c8:	f000 f8d0 	bl	800486c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046cc:	f000 fba4 	bl	8004e18 <xTaskResumeAll>
 80046d0:	e758      	b.n	8004584 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80046d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046d4:	f000 f8ca 	bl	800486c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d8:	f000 fb9e 	bl	8004e18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046de:	f000 f917 	bl	8004910 <prvIsQueueEmpty>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f43f af4d 	beq.w	8004584 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80046f0:	f001 fe50 	bl	8006394 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80046f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046f6:	f000 f811 	bl	800471c <prvGetDisinheritPriorityAfterTimeout>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004702:	4618      	mov	r0, r3
 8004704:	f001 f89e 	bl	8005844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004708:	f001 fe74 	bl	80063f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800470c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800470e:	4618      	mov	r0, r3
 8004710:	3738      	adds	r7, #56	; 0x38
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f1c3 0307 	rsb	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e001      	b.n	800473e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800473e:	68fb      	ldr	r3, [r7, #12]
	}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d14d      	bne.n	800480e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 ffde 	bl	8005738 <xTaskPriorityDisinherit>
 800477c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	e043      	b.n	800480e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d119      	bne.n	80047c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6898      	ldr	r0, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	461a      	mov	r2, r3
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	f002 f91c 	bl	80069d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d32b      	bcc.n	800480e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	e026      	b.n	800480e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68d8      	ldr	r0, [r3, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	461a      	mov	r2, r3
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	f002 f902 	bl	80069d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	425b      	negs	r3, r3
 80047da:	441a      	add	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d207      	bcs.n	80047fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	425b      	negs	r3, r3
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d105      	bne.n	800480e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	3b01      	subs	r3, #1
 800480c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d018      	beq.n	8004864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	441a      	add	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d303      	bcc.n	8004854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	461a      	mov	r2, r3
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	f002 f8b8 	bl	80069d4 <memcpy>
	}
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004874:	f001 fd8e 	bl	8006394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800487e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004880:	e011      	b.n	80048a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d012      	beq.n	80048b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fce0 	bl	8005254 <xTaskRemoveFromEventList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800489a:	f000 fdb7 	bl	800540c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dce9      	bgt.n	8004882 <prvUnlockQueue+0x16>
 80048ae:	e000      	b.n	80048b2 <prvUnlockQueue+0x46>
					break;
 80048b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048ba:	f001 fd9b 	bl	80063f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048be:	f001 fd69 	bl	8006394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ca:	e011      	b.n	80048f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3310      	adds	r3, #16
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fcbb 	bl	8005254 <xTaskRemoveFromEventList>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048e4:	f000 fd92 	bl	800540c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dce9      	bgt.n	80048cc <prvUnlockQueue+0x60>
 80048f8:	e000      	b.n	80048fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	22ff      	movs	r2, #255	; 0xff
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004904:	f001 fd76 	bl	80063f4 <vPortExitCritical>
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004918:	f001 fd3c 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e001      	b.n	800492e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800492e:	f001 fd61 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 8004932:	68fb      	ldr	r3, [r7, #12]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004944:	f001 fd26 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	429a      	cmp	r2, r3
 8004952:	d102      	bne.n	800495a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e001      	b.n	800495e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800495e:	f001 fd49 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e014      	b.n	80049a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800497c:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <vQueueAddToRegistry+0x50>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004988:	490c      	ldr	r1, [pc, #48]	; (80049bc <vQueueAddToRegistry+0x50>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <vQueueAddToRegistry+0x50>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800499e:	e006      	b.n	80049ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b07      	cmp	r3, #7
 80049aa:	d9e7      	bls.n	800497c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000180 	.word	0x20000180

080049c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d0:	f001 fce0 	bl	8006394 <vPortEnterCritical>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d103      	bne.n	80049ea <vQueueWaitForMessageRestricted+0x2a>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d103      	bne.n	8004a00 <vQueueWaitForMessageRestricted+0x40>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	f001 fcf8 	bl	80063f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fbf1 	bl	80051fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	f7ff ff26 	bl	800486c <prvUnlockQueue>
	}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af04      	add	r7, sp, #16
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fdcb 	bl	80065d8 <pvPortMalloc>
 8004a42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00e      	beq.n	8004a68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004a4a:	2058      	movs	r0, #88	; 0x58
 8004a4c:	f001 fdc4 	bl	80065d8 <pvPortMalloc>
 8004a50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a5e:	e005      	b.n	8004a6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a60:	6978      	ldr	r0, [r7, #20]
 8004a62:	f001 fe7d 	bl	8006760 <vPortFree>
 8004a66:	e001      	b.n	8004a6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d013      	beq.n	8004a9a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9303      	str	r3, [sp, #12]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	9302      	str	r3, [sp, #8]
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f80e 	bl	8004aaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a8e:	69f8      	ldr	r0, [r7, #28]
 8004a90:	f000 f88e 	bl	8004bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a94:	2301      	movs	r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e002      	b.n	8004aa0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
	}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	617b      	str	r3, [r7, #20]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <prvInitialiseNewTask+0x46>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e012      	b.n	8004b24 <prvInitialiseNewTask+0x7a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	7819      	ldrb	r1, [r3, #0]
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3334      	adds	r3, #52	; 0x34
 8004b0e:	460a      	mov	r2, r1
 8004b10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d006      	beq.n	8004b2c <prvInitialiseNewTask+0x82>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3301      	adds	r3, #1
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d9e9      	bls.n	8004afe <prvInitialiseNewTask+0x54>
 8004b2a:	e000      	b.n	8004b2e <prvInitialiseNewTask+0x84>
		{
			break;
 8004b2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d901      	bls.n	8004b40 <prvInitialiseNewTask+0x96>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b3c:	2306      	movs	r3, #6
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b4a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff f847 	bl	8003bea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	3318      	adds	r3, #24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff f842 	bl	8003bea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f1c3 0207 	rsb	r2, r3, #7
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2200      	movs	r2, #0
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	69b8      	ldr	r0, [r7, #24]
 8004b90:	f001 fad4 	bl	800613c <pxPortInitialiseStack>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ba6:	bf00      	nop
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bb8:	f001 fbec 	bl	8006394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a29      	ldr	r2, [pc, #164]	; (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bce:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d110      	bne.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bdc:	f000 fc64 	bl	80054a8 <prvInitialiseTaskLists>
 8004be0:	e00d      	b.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004be2:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <prvAddNewTaskToReadyList+0xc0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d802      	bhi.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <prvAddNewTaskToReadyList+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <prvAddNewTaskToReadyList+0xc4>)
 8004c06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <prvAddNewTaskToReadyList+0xc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <prvAddNewTaskToReadyList+0xc8>)
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <prvAddNewTaskToReadyList+0xcc>)
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f7fe ffe7 	bl	8003c04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c36:	f001 fbdd 	bl	80063f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <prvAddNewTaskToReadyList+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00e      	beq.n	8004c60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d207      	bcs.n	8004c60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <prvAddNewTaskToReadyList+0xd0>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200002c0 	.word	0x200002c0
 8004c6c:	200001c0 	.word	0x200001c0
 8004c70:	200002cc 	.word	0x200002cc
 8004c74:	200002dc 	.word	0x200002dc
 8004c78:	200002c8 	.word	0x200002c8
 8004c7c:	200001c4 	.word	0x200001c4
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <vTaskDelay+0x60>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <vTaskDelay+0x30>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60bb      	str	r3, [r7, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cb4:	f000 f868 	bl	8004d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cb8:	2100      	movs	r1, #0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fe76 	bl	80059ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cc0:	f000 f8aa 	bl	8004e18 <xTaskResumeAll>
 8004cc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <vTaskDelay+0x64>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200002e8 	.word	0x200002e8
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <vTaskStartScheduler+0x84>)
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	491d      	ldr	r1, [pc, #116]	; (8004d74 <vTaskStartScheduler+0x88>)
 8004d00:	481d      	ldr	r0, [pc, #116]	; (8004d78 <vTaskStartScheduler+0x8c>)
 8004d02:	f7ff fe91 	bl	8004a28 <xTaskCreate>
 8004d06:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004d0e:	f000 feb3 	bl	8005a78 <xTimerCreateTimerTask>
 8004d12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d116      	bne.n	8004d48 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <vTaskStartScheduler+0x90>)
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <vTaskStartScheduler+0x94>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <vTaskStartScheduler+0x98>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d42:	f001 fa85 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d46:	e00e      	b.n	8004d66 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d10a      	bne.n	8004d66 <vTaskStartScheduler+0x7a>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	607b      	str	r3, [r7, #4]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <vTaskStartScheduler+0x78>
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200002e4 	.word	0x200002e4
 8004d74:	08006aa0 	.word	0x08006aa0
 8004d78:	08005425 	.word	0x08005425
 8004d7c:	200002e0 	.word	0x200002e0
 8004d80:	200002cc 	.word	0x200002cc
 8004d84:	200002c4 	.word	0x200002c4

08004d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <vTaskSuspendAll+0x18>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4a03      	ldr	r2, [pc, #12]	; (8004da0 <vTaskSuspendAll+0x18>)
 8004d94:	6013      	str	r3, [r2, #0]
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	200002e8 	.word	0x200002e8

08004da4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 8004dae:	2301      	movs	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <prvGetExpectedIdleTime+0x60>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d201      	bcs.n	8004dc0 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <prvGetExpectedIdleTime+0x64>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e012      	b.n	8004df6 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <prvGetExpectedIdleTime+0x68>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d902      	bls.n	8004dde <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e00b      	b.n	8004df6 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e005      	b.n	8004df6 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <prvGetExpectedIdleTime+0x6c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvGetExpectedIdleTime+0x70>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8004df6:	68fb      	ldr	r3, [r7, #12]
	}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	200002c8 	.word	0x200002c8
 8004e08:	200001c0 	.word	0x200001c0
 8004e0c:	200001c4 	.word	0x200001c4
 8004e10:	200002e0 	.word	0x200002e0
 8004e14:	200002c4 	.word	0x200002c4

08004e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <xTaskResumeAll+0x114>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	603b      	str	r3, [r7, #0]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e44:	f001 faa6 	bl	8006394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e48:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <xTaskResumeAll+0x114>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <xTaskResumeAll+0x114>)
 8004e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <xTaskResumeAll+0x114>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d161      	bne.n	8004f1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e5a:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <xTaskResumeAll+0x118>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05d      	beq.n	8004f1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e62:	e02e      	b.n	8004ec2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <xTaskResumeAll+0x11c>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe ff24 	bl	8003cbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe ff1f 	bl	8003cbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <xTaskResumeAll+0x120>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <xTaskResumeAll+0x120>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <xTaskResumeAll+0x124>)
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe feab 	bl	8003c04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <xTaskResumeAll+0x128>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ebc:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <xTaskResumeAll+0x12c>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xTaskResumeAll+0x11c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1cc      	bne.n	8004e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ed0:	f000 fb68 	bl	80055a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ed4:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <xTaskResumeAll+0x130>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ee0:	f000 f846 	bl	8004f70 <xTaskIncrementTick>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <xTaskResumeAll+0x12c>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f1      	bne.n	8004ee0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <xTaskResumeAll+0x130>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f02:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <xTaskResumeAll+0x12c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <xTaskResumeAll+0x134>)
 8004f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f001 fa69 	bl	80063f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f22:	68bb      	ldr	r3, [r7, #8]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200002e8 	.word	0x200002e8
 8004f30:	200002c0 	.word	0x200002c0
 8004f34:	20000280 	.word	0x20000280
 8004f38:	200002c8 	.word	0x200002c8
 8004f3c:	200001c4 	.word	0x200001c4
 8004f40:	200001c0 	.word	0x200001c0
 8004f44:	200002d4 	.word	0x200002d4
 8004f48:	200002d0 	.word	0x200002d0
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <xTaskGetTickCount+0x1c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f5c:	687b      	ldr	r3, [r7, #4]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	200002c4 	.word	0x200002c4

08004f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7a:	4b55      	ldr	r3, [pc, #340]	; (80050d0 <xTaskIncrementTick+0x160>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 8093 	bne.w	80050aa <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f84:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <xTaskIncrementTick+0x164>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f8c:	4a51      	ldr	r2, [pc, #324]	; (80050d4 <xTaskIncrementTick+0x164>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d120      	bne.n	8004fda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <xTaskIncrementTick+0x168>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	603b      	str	r3, [r7, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xTaskIncrementTick+0x46>
 8004fb8:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <xTaskIncrementTick+0x168>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <xTaskIncrementTick+0x16c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <xTaskIncrementTick+0x168>)
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4a45      	ldr	r2, [pc, #276]	; (80050dc <xTaskIncrementTick+0x16c>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <xTaskIncrementTick+0x170>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <xTaskIncrementTick+0x170>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	f000 fae5 	bl	80055a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fda:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <xTaskIncrementTick+0x174>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d34d      	bcc.n	8005080 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe4:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <xTaskIncrementTick+0x168>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <xTaskIncrementTick+0x82>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <xTaskIncrementTick+0x84>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff8:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <xTaskIncrementTick+0x174>)
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	601a      	str	r2, [r3, #0]
					break;
 8005000:	e03e      	b.n	8005080 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005002:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <xTaskIncrementTick+0x168>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d203      	bcs.n	8005022 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800501a:	4a32      	ldr	r2, [pc, #200]	; (80050e4 <xTaskIncrementTick+0x174>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6013      	str	r3, [r2, #0]
						break;
 8005020:	e02e      	b.n	8005080 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fe49 	bl	8003cbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3318      	adds	r3, #24
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fe40 	bl	8003cbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	2201      	movs	r2, #1
 8005044:	409a      	lsls	r2, r3
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <xTaskIncrementTick+0x178>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <xTaskIncrementTick+0x178>)
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a23      	ldr	r2, [pc, #140]	; (80050ec <xTaskIncrementTick+0x17c>)
 800505e:	441a      	add	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fdcc 	bl	8003c04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <xTaskIncrementTick+0x180>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d3b4      	bcc.n	8004fe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800507a:	2301      	movs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507e:	e7b1      	b.n	8004fe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <xTaskIncrementTick+0x180>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	4919      	ldr	r1, [pc, #100]	; (80050ec <xTaskIncrementTick+0x17c>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d901      	bls.n	800509c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <xTaskIncrementTick+0x184>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80050a4:	f7fb fb0a 	bl	80006bc <vApplicationTickHook>
 80050a8:	e006      	b.n	80050b8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <xTaskIncrementTick+0x184>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <xTaskIncrementTick+0x184>)
 80050b2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80050b4:	f7fb fb02 	bl	80006bc <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskIncrementTick+0x188>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050c4:	697b      	ldr	r3, [r7, #20]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200002e8 	.word	0x200002e8
 80050d4:	200002c4 	.word	0x200002c4
 80050d8:	20000278 	.word	0x20000278
 80050dc:	2000027c 	.word	0x2000027c
 80050e0:	200002d8 	.word	0x200002d8
 80050e4:	200002e0 	.word	0x200002e0
 80050e8:	200002c8 	.word	0x200002c8
 80050ec:	200001c4 	.word	0x200001c4
 80050f0:	200001c0 	.word	0x200001c0
 80050f4:	200002d0 	.word	0x200002d0
 80050f8:	200002d4 	.word	0x200002d4

080050fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005102:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <vTaskSwitchContext+0xa4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <vTaskSwitchContext+0xa8>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005110:	e03f      	b.n	8005192 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <vTaskSwitchContext+0xa8>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005118:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <vTaskSwitchContext+0xac>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	fab3 f383 	clz	r3, r3
 8005124:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	f1c3 031f 	rsb	r3, r3, #31
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	491f      	ldr	r1, [pc, #124]	; (80051ac <vTaskSwitchContext+0xb0>)
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vTaskSwitchContext+0x5a>
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <vTaskSwitchContext+0xb0>)
 8005164:	4413      	add	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3308      	adds	r3, #8
 800517a:	429a      	cmp	r2, r3
 800517c:	d104      	bne.n	8005188 <vTaskSwitchContext+0x8c>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <vTaskSwitchContext+0xb4>)
 8005190:	6013      	str	r3, [r2, #0]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	200002e8 	.word	0x200002e8
 80051a4:	200002d4 	.word	0x200002d4
 80051a8:	200002c8 	.word	0x200002c8
 80051ac:	200001c4 	.word	0x200001c4
 80051b0:	200001c0 	.word	0x200001c0

080051b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <vTaskPlaceOnEventList+0x44>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3318      	adds	r3, #24
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fe fd32 	bl	8003c4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051e8:	2101      	movs	r1, #1
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f000 fbde 	bl	80059ac <prvAddCurrentTaskToDelayedList>
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200001c0 	.word	0x200001c0

080051fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	617b      	str	r3, [r7, #20]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <vTaskPlaceOnEventListRestricted+0x54>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3318      	adds	r3, #24
 800522a:	4619      	mov	r1, r3
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fe fce9 	bl	8003c04 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	68b8      	ldr	r0, [r7, #8]
 8005242:	f000 fbb3 	bl	80059ac <prvAddCurrentTaskToDelayedList>
	}
 8005246:	bf00      	nop
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200001c0 	.word	0x200001c0

08005254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60fb      	str	r3, [r7, #12]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	3318      	adds	r3, #24
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fd1a 	bl	8003cbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800528a:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <xTaskRemoveFromEventList+0xb0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11c      	bne.n	80052cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fd11 	bl	8003cbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	2201      	movs	r2, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <xTaskRemoveFromEventList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <xTaskRemoveFromEventList+0xb4>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4a14      	ldr	r2, [pc, #80]	; (800530c <xTaskRemoveFromEventList+0xb8>)
 80052bc:	441a      	add	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7fe fc9d 	bl	8003c04 <vListInsertEnd>
 80052ca:	e005      	b.n	80052d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3318      	adds	r3, #24
 80052d0:	4619      	mov	r1, r3
 80052d2:	480f      	ldr	r0, [pc, #60]	; (8005310 <xTaskRemoveFromEventList+0xbc>)
 80052d4:	f7fe fc96 	bl	8003c04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <xTaskRemoveFromEventList+0xc0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d905      	bls.n	80052f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <xTaskRemoveFromEventList+0xc4>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e001      	b.n	80052f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80052f6:	f000 f955 	bl	80055a4 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80052fa:	697b      	ldr	r3, [r7, #20]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	200002e8 	.word	0x200002e8
 8005308:	200002c8 	.word	0x200002c8
 800530c:	200001c4 	.word	0x200001c4
 8005310:	20000280 	.word	0x20000280
 8005314:	200001c0 	.word	0x200001c0
 8005318:	200002d4 	.word	0x200002d4

0800531c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <vTaskInternalSetTimeOutState+0x24>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <vTaskInternalSetTimeOutState+0x28>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	200002d8 	.word	0x200002d8
 8005344:	200002c4 	.word	0x200002c4

08005348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	613b      	str	r3, [r7, #16]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800538a:	f001 f803 	bl	8006394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <xTaskCheckForTimeOut+0xbc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d102      	bne.n	80053ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e023      	b.n	80053f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <xTaskCheckForTimeOut+0xc0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d007      	beq.n	80053ca <xTaskCheckForTimeOut+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e015      	b.n	80053f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d20b      	bcs.n	80053ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff9b 	bl	800531c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	e004      	b.n	80053f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053f2:	2301      	movs	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053f6:	f000 fffd 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 80053fa:	69fb      	ldr	r3, [r7, #28]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200002c4 	.word	0x200002c4
 8005408:	200002d8 	.word	0x200002d8

0800540c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <vTaskMissedYield+0x14>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	200002d4 	.word	0x200002d4

08005424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800542c:	f000 f87c 	bl	8005528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <prvIdleTask+0x74>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d907      	bls.n	8005448 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005438:	4b18      	ldr	r3, [pc, #96]	; (800549c <prvIdleTask+0x78>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005448:	f7fb f928 	bl	800069c <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800544c:	f7ff fcaa 	bl	8004da4 <prvGetExpectedIdleTime>
 8005450:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d9e9      	bls.n	800542c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005458:	f7ff fc96 	bl	8004d88 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <prvIdleTask+0x7c>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <prvIdleTask+0x80>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20a      	bcs.n	800547e <prvIdleTask+0x5a>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60bb      	str	r3, [r7, #8]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800547e:	f7ff fc91 	bl	8004da4 <prvGetExpectedIdleTime>
 8005482:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d902      	bls.n	8005490 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7fa fea0 	bl	80001d0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8005490:	f7ff fcc2 	bl	8004e18 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8005494:	e7ca      	b.n	800542c <prvIdleTask+0x8>
 8005496:	bf00      	nop
 8005498:	200001c4 	.word	0x200001c4
 800549c:	e000ed04 	.word	0xe000ed04
 80054a0:	200002e0 	.word	0x200002e0
 80054a4:	200002c4 	.word	0x200002c4

080054a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e00c      	b.n	80054ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a12      	ldr	r2, [pc, #72]	; (8005508 <prvInitialiseTaskLists+0x60>)
 80054c0:	4413      	add	r3, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe fb71 	bl	8003baa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3301      	adds	r3, #1
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d9ef      	bls.n	80054b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054d4:	480d      	ldr	r0, [pc, #52]	; (800550c <prvInitialiseTaskLists+0x64>)
 80054d6:	f7fe fb68 	bl	8003baa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054da:	480d      	ldr	r0, [pc, #52]	; (8005510 <prvInitialiseTaskLists+0x68>)
 80054dc:	f7fe fb65 	bl	8003baa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054e0:	480c      	ldr	r0, [pc, #48]	; (8005514 <prvInitialiseTaskLists+0x6c>)
 80054e2:	f7fe fb62 	bl	8003baa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054e6:	480c      	ldr	r0, [pc, #48]	; (8005518 <prvInitialiseTaskLists+0x70>)
 80054e8:	f7fe fb5f 	bl	8003baa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054ec:	480b      	ldr	r0, [pc, #44]	; (800551c <prvInitialiseTaskLists+0x74>)
 80054ee:	f7fe fb5c 	bl	8003baa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <prvInitialiseTaskLists+0x78>)
 80054f4:	4a05      	ldr	r2, [pc, #20]	; (800550c <prvInitialiseTaskLists+0x64>)
 80054f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvInitialiseTaskLists+0x7c>)
 80054fa:	4a05      	ldr	r2, [pc, #20]	; (8005510 <prvInitialiseTaskLists+0x68>)
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200001c4 	.word	0x200001c4
 800550c:	20000250 	.word	0x20000250
 8005510:	20000264 	.word	0x20000264
 8005514:	20000280 	.word	0x20000280
 8005518:	20000294 	.word	0x20000294
 800551c:	200002ac 	.word	0x200002ac
 8005520:	20000278 	.word	0x20000278
 8005524:	2000027c 	.word	0x2000027c

08005528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800552e:	e019      	b.n	8005564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005530:	f000 ff30 	bl	8006394 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005534:	4b10      	ldr	r3, [pc, #64]	; (8005578 <prvCheckTasksWaitingTermination+0x50>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fbbc 	bl	8003cbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <prvCheckTasksWaitingTermination+0x54>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3b01      	subs	r3, #1
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <prvCheckTasksWaitingTermination+0x54>)
 800554e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <prvCheckTasksWaitingTermination+0x58>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3b01      	subs	r3, #1
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <prvCheckTasksWaitingTermination+0x58>)
 8005558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800555a:	f000 ff4b 	bl	80063f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f810 	bl	8005584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <prvCheckTasksWaitingTermination+0x58>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e1      	bne.n	8005530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000294 	.word	0x20000294
 800557c:	200002c0 	.word	0x200002c0
 8005580:	200002a8 	.word	0x200002a8

08005584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	4618      	mov	r0, r3
 8005592:	f001 f8e5 	bl	8006760 <vPortFree>
			vPortFree( pxTCB );
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 f8e2 	bl	8006760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <prvResetNextTaskUnblockTime+0x44>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <prvResetNextTaskUnblockTime+0x14>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <prvResetNextTaskUnblockTime+0x16>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <prvResetNextTaskUnblockTime+0x48>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055c6:	e008      	b.n	80055da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <prvResetNextTaskUnblockTime+0x44>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4a05      	ldr	r2, [pc, #20]	; (80055ec <prvResetNextTaskUnblockTime+0x48>)
 80055d8:	6013      	str	r3, [r2, #0]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000278 	.word	0x20000278
 80055ec:	200002e0 	.word	0x200002e0

080055f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <xTaskGetSchedulerState+0x34>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055fe:	2301      	movs	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	e008      	b.n	8005616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <xTaskGetSchedulerState+0x38>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800560c:	2302      	movs	r3, #2
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	e001      	b.n	8005616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005616:	687b      	ldr	r3, [r7, #4]
	}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	200002cc 	.word	0x200002cc
 8005628:	200002e8 	.word	0x200002e8

0800562c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d06e      	beq.n	8005720 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <xTaskPriorityInherit+0x100>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	429a      	cmp	r2, r3
 800564e:	d25e      	bcs.n	800570e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	db06      	blt.n	8005666 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <xTaskPriorityInherit+0x100>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	f1c3 0207 	rsb	r2, r3, #7
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6959      	ldr	r1, [r3, #20]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4a2e      	ldr	r2, [pc, #184]	; (8005730 <xTaskPriorityInherit+0x104>)
 8005678:	4413      	add	r3, r2
 800567a:	4299      	cmp	r1, r3
 800567c:	d101      	bne.n	8005682 <xTaskPriorityInherit+0x56>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xTaskPriorityInherit+0x58>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03a      	beq.n	80056fe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3304      	adds	r3, #4
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe fb16 	bl	8003cbe <uxListRemove>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d115      	bne.n	80056c4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4924      	ldr	r1, [pc, #144]	; (8005730 <xTaskPriorityInherit+0x104>)
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <xTaskPriorityInherit+0x98>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43da      	mvns	r2, r3
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <xTaskPriorityInherit+0x108>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4013      	ands	r3, r2
 80056c0:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <xTaskPriorityInherit+0x108>)
 80056c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056c4:	4b19      	ldr	r3, [pc, #100]	; (800572c <xTaskPriorityInherit+0x100>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	2201      	movs	r2, #1
 80056d4:	409a      	lsls	r2, r3
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <xTaskPriorityInherit+0x108>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	4a15      	ldr	r2, [pc, #84]	; (8005734 <xTaskPriorityInherit+0x108>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a10      	ldr	r2, [pc, #64]	; (8005730 <xTaskPriorityInherit+0x104>)
 80056ee:	441a      	add	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fe fa84 	bl	8003c04 <vListInsertEnd>
 80056fc:	e004      	b.n	8005708 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <xTaskPriorityInherit+0x100>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e008      	b.n	8005720 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <xTaskPriorityInherit+0x100>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	429a      	cmp	r2, r3
 800571a:	d201      	bcs.n	8005720 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005720:	68fb      	ldr	r3, [r7, #12]
	}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200001c0 	.word	0x200001c0
 8005730:	200001c4 	.word	0x200001c4
 8005734:	200002c8 	.word	0x200002c8

08005738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d06e      	beq.n	800582c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800574e:	4b3a      	ldr	r3, [pc, #232]	; (8005838 <xTaskPriorityDisinherit+0x100>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	429a      	cmp	r2, r3
 8005756:	d00a      	beq.n	800576e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60bb      	str	r3, [r7, #8]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579e:	429a      	cmp	r2, r3
 80057a0:	d044      	beq.n	800582c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d140      	bne.n	800582c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fa85 	bl	8003cbe <uxListRemove>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d115      	bne.n	80057e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	491f      	ldr	r1, [pc, #124]	; (800583c <xTaskPriorityDisinherit+0x104>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <xTaskPriorityDisinherit+0xae>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	2201      	movs	r2, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <xTaskPriorityDisinherit+0x108>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <xTaskPriorityDisinherit+0x108>)
 80057e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f1c3 0207 	rsb	r2, r3, #7
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	2201      	movs	r2, #1
 8005800:	409a      	lsls	r2, r3
 8005802:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <xTaskPriorityDisinherit+0x108>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <xTaskPriorityDisinherit+0x108>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4a08      	ldr	r2, [pc, #32]	; (800583c <xTaskPriorityDisinherit+0x104>)
 800581a:	441a      	add	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe f9ee 	bl	8003c04 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800582c:	697b      	ldr	r3, [r7, #20]
	}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200001c0 	.word	0x200001c0
 800583c:	200001c4 	.word	0x200001c4
 8005840:	200002c8 	.word	0x200002c8

08005844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8088 	beq.w	800596e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60fb      	str	r3, [r7, #12]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d902      	bls.n	800588c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e002      	b.n	8005892 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005890:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	429a      	cmp	r2, r3
 800589a:	d068      	beq.n	800596e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d163      	bne.n	800596e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058a6:	4b34      	ldr	r3, [pc, #208]	; (8005978 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d10a      	bne.n	80058c6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60bb      	str	r3, [r7, #8]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db04      	blt.n	80058e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f1c3 0207 	rsb	r2, r3, #7
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6959      	ldr	r1, [r3, #20]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a22      	ldr	r2, [pc, #136]	; (800597c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80058f4:	4413      	add	r3, r2
 80058f6:	4299      	cmp	r1, r3
 80058f8:	d101      	bne.n	80058fe <vTaskPriorityDisinheritAfterTimeout+0xba>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d034      	beq.n	800596e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe f9d8 	bl	8003cbe <uxListRemove>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d115      	bne.n	8005940 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4918      	ldr	r1, [pc, #96]	; (800597c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43da      	mvns	r2, r3
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	4a10      	ldr	r2, [pc, #64]	; (8005980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800593e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	2201      	movs	r2, #1
 8005946:	409a      	lsls	r2, r3
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a07      	ldr	r2, [pc, #28]	; (800597c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005960:	441a      	add	r2, r3
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7fe f94b 	bl	8003c04 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800596e:	bf00      	nop
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200001c0 	.word	0x200001c0
 800597c:	200001c4 	.word	0x200001c4
 8005980:	200002c8 	.word	0x200002c8

08005984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005988:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005996:	3201      	adds	r2, #1
 8005998:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800599a:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800599c:	681b      	ldr	r3, [r3, #0]
	}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	200001c0 	.word	0x200001c0

080059ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059b6:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xb0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059bc:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe f97b 	bl	8003cbe <uxListRemove>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	2201      	movs	r2, #1
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43da      	mvns	r2, r3
 80059dc:	4b21      	ldr	r3, [pc, #132]	; (8005a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4013      	ands	r3, r2
 80059e2:	4a20      	ldr	r2, [pc, #128]	; (8005a64 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d10a      	bne.n	8005a04 <prvAddCurrentTaskToDelayedList+0x58>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	481a      	ldr	r0, [pc, #104]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059fe:	f7fe f901 	bl	8003c04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a02:	e026      	b.n	8005a52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a0c:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d209      	bcs.n	8005a30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1c:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fe f90f 	bl	8003c4c <vListInsert>
}
 8005a2e:	e010      	b.n	8005a52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe f905 	bl	8003c4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d202      	bcs.n	8005a52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a4c:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6013      	str	r3, [r2, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200002c4 	.word	0x200002c4
 8005a60:	200001c0 	.word	0x200001c0
 8005a64:	200002c8 	.word	0x200002c8
 8005a68:	200002ac 	.word	0x200002ac
 8005a6c:	2000027c 	.word	0x2000027c
 8005a70:	20000278 	.word	0x20000278
 8005a74:	200002e0 	.word	0x200002e0

08005a78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a82:	f000 fae5 	bl	8006050 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <xTimerCreateTimerTask+0x54>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <xTimerCreateTimerTask+0x58>)
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	2302      	movs	r3, #2
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	490e      	ldr	r1, [pc, #56]	; (8005ad4 <xTimerCreateTimerTask+0x5c>)
 8005a9c:	480e      	ldr	r0, [pc, #56]	; (8005ad8 <xTimerCreateTimerTask+0x60>)
 8005a9e:	f7fe ffc3 	bl	8004a28 <xTaskCreate>
 8005aa2:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <xTimerCreateTimerTask+0x48>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	603b      	str	r3, [r7, #0]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <xTimerCreateTimerTask+0x46>
	return xReturn;
 8005ac0:	687b      	ldr	r3, [r7, #4]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2000031c 	.word	0x2000031c
 8005ad0:	20000320 	.word	0x20000320
 8005ad4:	08006aa8 	.word	0x08006aa8
 8005ad8:	08005c99 	.word	0x08005c99

08005adc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005aea:	2028      	movs	r0, #40	; 0x28
 8005aec:	f000 fd74 	bl	80065d8 <pvPortMalloc>
 8005af0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f805 	bl	8005b16 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005b0c:	697b      	ldr	r3, [r7, #20]
	}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	617b      	str	r3, [r7, #20]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d015      	beq.n	8005b72 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005b46:	f000 fa83 	bl	8006050 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe f83c 	bl	8003bea <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <xTimerGenericCommand+0x98>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d02a      	beq.n	8005c08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	dc18      	bgt.n	8005bf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bc4:	f7ff fd14 	bl	80055f0 <xTaskGetSchedulerState>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d109      	bne.n	8005be2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <xTimerGenericCommand+0x98>)
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f107 0114 	add.w	r1, r7, #20
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bda:	f7fe f98f 	bl	8003efc <xQueueGenericSend>
 8005bde:	6278      	str	r0, [r7, #36]	; 0x24
 8005be0:	e012      	b.n	8005c08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <xTimerGenericCommand+0x98>)
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	f107 0114 	add.w	r1, r7, #20
 8005bea:	2300      	movs	r3, #0
 8005bec:	2200      	movs	r2, #0
 8005bee:	f7fe f985 	bl	8003efc <xQueueGenericSend>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8005bf4:	e008      	b.n	8005c08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <xTimerGenericCommand+0x98>)
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f107 0114 	add.w	r1, r7, #20
 8005bfe:	2300      	movs	r3, #0
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	f7fe fa79 	bl	80040f8 <xQueueGenericSendFromISR>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000031c 	.word	0x2000031c

08005c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c22:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <prvProcessExpiredTimer+0x7c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f844 	bl	8003cbe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d122      	bne.n	8005c84 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	18d1      	adds	r1, r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f000 f8c8 	bl	8005de0 <prvInsertTimerInActiveList>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c56:	2300      	movs	r3, #0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6978      	ldr	r0, [r7, #20]
 8005c62:	f7ff ff8b 	bl	8005b7c <xTimerGenericCommand>
 8005c66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	60fb      	str	r3, [r7, #12]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	4798      	blx	r3
}
 8005c8c:	bf00      	nop
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000314 	.word	0x20000314

08005c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ca0:	f107 0308 	add.w	r3, r7, #8
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 f857 	bl	8005d58 <prvGetNextExpireTime>
 8005caa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f803 	bl	8005cbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cb6:	f000 f8d5 	bl	8005e64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cba:	e7f1      	b.n	8005ca0 <prvTimerTask+0x8>

08005cbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cc6:	f7ff f85f 	bl	8004d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f866 	bl	8005da0 <prvSampleTimeNow>
 8005cd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d130      	bne.n	8005d3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <prvProcessTimerOrBlockTask+0x3c>
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d806      	bhi.n	8005cf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cea:	f7ff f895 	bl	8004e18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff91 	bl	8005c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cf6:	e024      	b.n	8005d42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <prvProcessTimerOrBlockTask+0x90>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <prvProcessTimerOrBlockTask+0x94>)
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f7fe fe4f 	bl	80049c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d22:	f7ff f879 	bl	8004e18 <xTaskResumeAll>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <prvProcessTimerOrBlockTask+0x98>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
}
 8005d3c:	e001      	b.n	8005d42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d3e:	f7ff f86b 	bl	8004e18 <xTaskResumeAll>
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000318 	.word	0x20000318
 8005d50:	2000031c 	.word	0x2000031c
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <prvGetNextExpireTime+0x44>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bf0c      	ite	eq
 8005d6a:	2301      	moveq	r3, #1
 8005d6c:	2300      	movne	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <prvGetNextExpireTime+0x44>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e001      	b.n	8005d8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20000314 	.word	0x20000314

08005da0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005da8:	f7ff f8d2 	bl	8004f50 <xTaskGetTickCount>
 8005dac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <prvSampleTimeNow+0x3c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d205      	bcs.n	8005dc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005db8:	f000 f8e8 	bl	8005f8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <prvSampleTimeNow+0x3c>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000324 	.word	0x20000324

08005de0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d812      	bhi.n	8005e2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e01b      	b.n	8005e52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <prvInsertTimerInActiveList+0x7c>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7fd ff11 	bl	8003c4c <vListInsert>
 8005e2a:	e012      	b.n	8005e52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d206      	bcs.n	8005e42 <prvInsertTimerInActiveList+0x62>
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e007      	b.n	8005e52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <prvInsertTimerInActiveList+0x80>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fd fefd 	bl	8003c4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e52:	697b      	ldr	r3, [r7, #20]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000318 	.word	0x20000318
 8005e60:	20000314 	.word	0x20000314

08005e64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e6a:	e07c      	b.n	8005f66 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db78      	blt.n	8005f64 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd ff1b 	bl	8003cbe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff88 	bl	8005da0 <prvSampleTimeNow>
 8005e90:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d866      	bhi.n	8005f66 <prvProcessReceivedCommands+0x102>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <prvProcessReceivedCommands+0x3c>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005f67 	.word	0x08005f67
 8005eb0:	08005f25 	.word	0x08005f25
 8005eb4:	08005f5d 	.word	0x08005f5d
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ec9 	.word	0x08005ec9
 8005ec0:	08005f67 	.word	0x08005f67
 8005ec4:	08005f25 	.word	0x08005f25
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	18d1      	adds	r1, r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ed6:	f7ff ff83 	bl	8005de0 <prvInsertTimerInActiveList>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d042      	beq.n	8005f66 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d13a      	bne.n	8005f66 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	2300      	movs	r3, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f02:	f7ff fe3b 	bl	8005b7c <xTimerGenericCommand>
 8005f06:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12b      	bne.n	8005f66 <prvProcessReceivedCommands+0x102>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	61bb      	str	r3, [r7, #24]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617b      	str	r3, [r7, #20]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	18d1      	adds	r1, r2, r3
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f56:	f7ff ff43 	bl	8005de0 <prvInsertTimerInActiveList>
					break;
 8005f5a:	e004      	b.n	8005f66 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f5e:	f000 fbff 	bl	8006760 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f62:	e000      	b.n	8005f66 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <prvProcessReceivedCommands+0x124>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f107 0108 	add.w	r1, r7, #8
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe f9e7 	bl	8004344 <xQueueReceive>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f af77 	bne.w	8005e6c <prvProcessReceivedCommands+0x8>
	}
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	3728      	adds	r7, #40	; 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	2000031c 	.word	0x2000031c

08005f8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f92:	e045      	b.n	8006020 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <prvSwitchTimerLists+0xbc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <prvSwitchTimerLists+0xbc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fd fe86 	bl	8003cbe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d12e      	bne.n	8006020 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d90e      	bls.n	8005ff2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <prvSwitchTimerLists+0xbc>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fd fe2e 	bl	8003c4c <vListInsert>
 8005ff0:	e016      	b.n	8006020 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fdbd 	bl	8005b7c <xTimerGenericCommand>
 8006002:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <prvSwitchTimerLists+0x94>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	603b      	str	r3, [r7, #0]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <prvSwitchTimerLists+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1b4      	bne.n	8005f94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <prvSwitchTimerLists+0xbc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <prvSwitchTimerLists+0xc0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a04      	ldr	r2, [pc, #16]	; (8006048 <prvSwitchTimerLists+0xbc>)
 8006036:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <prvSwitchTimerLists+0xc0>)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6013      	str	r3, [r2, #0]
}
 800603e:	bf00      	nop
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000314 	.word	0x20000314
 800604c:	20000318 	.word	0x20000318

08006050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006054:	f000 f99e 	bl	8006394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <prvCheckForValidListAndQueue+0x54>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11d      	bne.n	800609c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006060:	4811      	ldr	r0, [pc, #68]	; (80060a8 <prvCheckForValidListAndQueue+0x58>)
 8006062:	f7fd fda2 	bl	8003baa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006066:	4811      	ldr	r0, [pc, #68]	; (80060ac <prvCheckForValidListAndQueue+0x5c>)
 8006068:	f7fd fd9f 	bl	8003baa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <prvCheckForValidListAndQueue+0x60>)
 800606e:	4a0e      	ldr	r2, [pc, #56]	; (80060a8 <prvCheckForValidListAndQueue+0x58>)
 8006070:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <prvCheckForValidListAndQueue+0x64>)
 8006074:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <prvCheckForValidListAndQueue+0x5c>)
 8006076:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006078:	2200      	movs	r2, #0
 800607a:	210c      	movs	r1, #12
 800607c:	200a      	movs	r0, #10
 800607e:	f7fd feb1 	bl	8003de4 <xQueueGenericCreate>
 8006082:	4603      	mov	r3, r0
 8006084:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <prvCheckForValidListAndQueue+0x54>)
 8006086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <prvCheckForValidListAndQueue+0x54>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <prvCheckForValidListAndQueue+0x54>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4908      	ldr	r1, [pc, #32]	; (80060b8 <prvCheckForValidListAndQueue+0x68>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fc68 	bl	800496c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800609c:	f000 f9aa 	bl	80063f4 <vPortExitCritical>
}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000031c 	.word	0x2000031c
 80060a8:	200002ec 	.word	0x200002ec
 80060ac:	20000300 	.word	0x20000300
 80060b0:	20000314 	.word	0x20000314
 80060b4:	20000318 	.word	0x20000318
 80060b8:	08006ab0 	.word	0x08006ab0

080060bc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60fb      	str	r3, [r7, #12]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80060e4:	f000 f956 	bl	8006394 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80060ee:	f000 f981 	bl	80063f4 <vPortExitCritical>

	return pvReturn;
 80060f2:	693b      	ldr	r3, [r7, #16]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <vTimerSetTimerID+0x2a>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60bb      	str	r3, [r7, #8]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 8006126:	f000 f935 	bl	8006394 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
 8006130:	f000 f960 	bl	80063f4 <vPortExitCritical>
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3b04      	subs	r3, #4
 800614c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3b04      	subs	r3, #4
 800615a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f023 0201 	bic.w	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b04      	subs	r3, #4
 800616a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800616c:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <pxPortInitialiseStack+0x64>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b14      	subs	r3, #20
 8006176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b04      	subs	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f06f 0202 	mvn.w	r2, #2
 800618a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3b20      	subs	r3, #32
 8006190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	080061a5 	.word	0x080061a5

080061a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ae:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <prvTaskExitError+0x54>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d00a      	beq.n	80061ce <prvTaskExitError+0x2a>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60fb      	str	r3, [r7, #12]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <prvTaskExitError+0x28>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60bb      	str	r3, [r7, #8]
}
 80061e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061e2:	bf00      	nop
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0fc      	beq.n	80061e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	2000000c 	.word	0x2000000c
 80061fc:	00000000 	.word	0x00000000

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	200001c0 	.word	0x200001c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006256:	4b46      	ldr	r3, [pc, #280]	; (8006370 <xPortStartScheduler+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a46      	ldr	r2, [pc, #280]	; (8006374 <xPortStartScheduler+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10a      	bne.n	8006276 <xPortStartScheduler+0x26>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006276:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <xPortStartScheduler+0x120>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <xPortStartScheduler+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10a      	bne.n	8006296 <xPortStartScheduler+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <xPortStartScheduler+0x12c>)
 8006298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <xPortStartScheduler+0x130>)
 80062bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xPortStartScheduler+0x134>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c4:	e009      	b.n	80062da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <xPortStartScheduler+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <xPortStartScheduler+0x134>)
 80062ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d0ef      	beq.n	80062c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e6:	4b27      	ldr	r3, [pc, #156]	; (8006384 <xPortStartScheduler+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1c3 0307 	rsb	r3, r3, #7
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00a      	beq.n	8006308 <xPortStartScheduler+0xb8>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <xPortStartScheduler+0x134>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <xPortStartScheduler+0x134>)
 8006310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <xPortStartScheduler+0x134>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <xPortStartScheduler+0x134>)
 800631c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <xPortStartScheduler+0x138>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <xPortStartScheduler+0x138>)
 800632c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xPortStartScheduler+0x138>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <xPortStartScheduler+0x138>)
 8006338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800633c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800633e:	f000 f8dd 	bl	80064fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <xPortStartScheduler+0x13c>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006348:	f000 f8fc 	bl	8006544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xPortStartScheduler+0x140>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xPortStartScheduler+0x140>)
 8006352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006358:	f7ff ff66 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800635c:	f7fe fece 	bl	80050fc <vTaskSwitchContext>
	prvTaskExitError();
 8006360:	f7ff ff20 	bl	80061a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00
 8006374:	410fc271 	.word	0x410fc271
 8006378:	410fc270 	.word	0x410fc270
 800637c:	e000e400 	.word	0xe000e400
 8006380:	20000328 	.word	0x20000328
 8006384:	2000032c 	.word	0x2000032c
 8006388:	e000ed20 	.word	0xe000ed20
 800638c:	2000000c 	.word	0x2000000c
 8006390:	e000ef34 	.word	0xe000ef34

08006394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <vPortEnterCritical+0x58>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <vPortEnterCritical+0x58>)
 80063b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <vPortEnterCritical+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10f      	bne.n	80063e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vPortEnterCritical+0x5c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vPortEnterCritical+0x4a>
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <vPortExitCritical+0x50>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vPortExitCritical+0x24>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vPortExitCritical+0x50>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <vPortExitCritical+0x50>)
 8006420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <vPortExitCritical+0x42>
 800642a:	2300      	movs	r3, #0
 800642c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f383 8811 	msr	BASEPRI, r3
}
 8006434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
	...

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f01e 0f10 	tst.w	lr, #16
 8006460:	bf08      	it	eq
 8006462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006474:	f380 8811 	msr	BASEPRI, r0
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f7fe fe3c 	bl	80050fc <vTaskSwitchContext>
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f380 8811 	msr	BASEPRI, r0
 800648c:	bc09      	pop	{r0, r3}
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	f01e 0f10 	tst.w	lr, #16
 800649a:	bf08      	it	eq
 800649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064a0:	f380 8809 	msr	PSP, r0
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst>:
 80064b0:	200001c0 	.word	0x200001c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f7fe fd4d 	bl	8004f70 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <SysTick_Handler+0x40>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortSetupTimerInterrupt+0x38>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <vPortSetupTimerInterrupt+0x3c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <vPortSetupTimerInterrupt+0x40>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	099b      	lsrs	r3, r3, #6
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <vPortSetupTimerInterrupt+0x44>)
 800651a:	3b01      	subs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e010 	.word	0xe000e010
 8006534:	e000e018 	.word	0xe000e018
 8006538:	20000000 	.word	0x20000000
 800653c:	10624dd3 	.word	0x10624dd3
 8006540:	e000e014 	.word	0xe000e014

08006544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006554 <vPortEnableVFP+0x10>
 8006548:	6801      	ldr	r1, [r0, #0]
 800654a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800654e:	6001      	str	r1, [r0, #0]
 8006550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006552:	bf00      	nop
 8006554:	e000ed88 	.word	0xe000ed88

08006558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800655e:	f3ef 8305 	mrs	r3, IPSR
 8006562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b0f      	cmp	r3, #15
 8006568:	d914      	bls.n	8006594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800656a:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <vPortValidateInterruptPriority+0x70>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <vPortValidateInterruptPriority+0x74>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	7afa      	ldrb	r2, [r7, #11]
 800657a:	429a      	cmp	r2, r3
 800657c:	d20a      	bcs.n	8006594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <vPortValidateInterruptPriority+0x78>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <vPortValidateInterruptPriority+0x7c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d90a      	bls.n	80065ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	603b      	str	r3, [r7, #0]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <vPortValidateInterruptPriority+0x60>
	}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000e3f0 	.word	0xe000e3f0
 80065cc:	20000328 	.word	0x20000328
 80065d0:	e000ed0c 	.word	0xe000ed0c
 80065d4:	2000032c 	.word	0x2000032c

080065d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065e4:	f7fe fbd0 	bl	8004d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065e8:	4b58      	ldr	r3, [pc, #352]	; (800674c <pvPortMalloc+0x174>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065f0:	f000 f910 	bl	8006814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065f4:	4b56      	ldr	r3, [pc, #344]	; (8006750 <pvPortMalloc+0x178>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 808e 	bne.w	800671e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01d      	beq.n	8006644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006608:	2208      	movs	r2, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	3308      	adds	r3, #8
 8006622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <pvPortMalloc+0x6c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	617b      	str	r3, [r7, #20]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d069      	beq.n	800671e <pvPortMalloc+0x146>
 800664a:	4b42      	ldr	r3, [pc, #264]	; (8006754 <pvPortMalloc+0x17c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d864      	bhi.n	800671e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006654:	4b40      	ldr	r3, [pc, #256]	; (8006758 <pvPortMalloc+0x180>)
 8006656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006658:	4b3f      	ldr	r3, [pc, #252]	; (8006758 <pvPortMalloc+0x180>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800665e:	e004      	b.n	800666a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <pvPortMalloc+0xa4>
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f1      	bne.n	8006660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800667c:	4b33      	ldr	r3, [pc, #204]	; (800674c <pvPortMalloc+0x174>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	429a      	cmp	r2, r3
 8006684:	d04b      	beq.n	800671e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2208      	movs	r2, #8
 800668c:	4413      	add	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2308      	movs	r3, #8
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d91f      	bls.n	80066e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <pvPortMalloc+0xf8>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	613b      	str	r3, [r7, #16]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066e2:	69b8      	ldr	r0, [r7, #24]
 80066e4:	f000 f8f8 	bl	80068d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066e8:	4b1a      	ldr	r3, [pc, #104]	; (8006754 <pvPortMalloc+0x17c>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a18      	ldr	r2, [pc, #96]	; (8006754 <pvPortMalloc+0x17c>)
 80066f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066f6:	4b17      	ldr	r3, [pc, #92]	; (8006754 <pvPortMalloc+0x17c>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <pvPortMalloc+0x184>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d203      	bcs.n	800670a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006702:	4b14      	ldr	r3, [pc, #80]	; (8006754 <pvPortMalloc+0x17c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <pvPortMalloc+0x184>)
 8006708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <pvPortMalloc+0x178>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	431a      	orrs	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800671e:	f7fe fb7b 	bl	8004e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <pvPortMalloc+0x16a>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <pvPortMalloc+0x168>
	return pvReturn;
 8006742:	69fb      	ldr	r3, [r7, #28]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3728      	adds	r7, #40	; 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20001338 	.word	0x20001338
 8006750:	20001344 	.word	0x20001344
 8006754:	2000133c 	.word	0x2000133c
 8006758:	20001330 	.word	0x20001330
 800675c:	20001340 	.word	0x20001340

08006760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d048      	beq.n	8006804 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006772:	2308      	movs	r3, #8
 8006774:	425b      	negs	r3, r3
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4413      	add	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	4b21      	ldr	r3, [pc, #132]	; (800680c <vPortFree+0xac>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <vPortFree+0x44>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60fb      	str	r3, [r7, #12]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <vPortFree+0x62>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60bb      	str	r3, [r7, #8]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <vPortFree+0xac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4013      	ands	r3, r2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d019      	beq.n	8006804 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d115      	bne.n	8006804 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <vPortFree+0xac>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067e8:	f7fe face 	bl	8004d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <vPortFree+0xb0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	4a06      	ldr	r2, [pc, #24]	; (8006810 <vPortFree+0xb0>)
 80067f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f000 f86c 	bl	80068d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006800:	f7fe fb0a 	bl	8004e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20001344 	.word	0x20001344
 8006810:	2000133c 	.word	0x2000133c

08006814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800681a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800681e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <prvHeapInit+0xac>)
 8006822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3307      	adds	r3, #7
 8006832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0307 	bic.w	r3, r3, #7
 800683a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <prvHeapInit+0xac>)
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <prvHeapInit+0xb0>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <prvHeapInit+0xb0>)
 8006854:	2200      	movs	r2, #0
 8006856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4413      	add	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006860:	2208      	movs	r2, #8
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0307 	bic.w	r3, r3, #7
 800686e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <prvHeapInit+0xb4>)
 8006874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <prvHeapInit+0xb4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <prvHeapInit+0xb4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <prvHeapInit+0xb4>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <prvHeapInit+0xb8>)
 80068a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <prvHeapInit+0xbc>)
 80068aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <prvHeapInit+0xc0>)
 80068ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20000330 	.word	0x20000330
 80068c4:	20001330 	.word	0x20001330
 80068c8:	20001338 	.word	0x20001338
 80068cc:	20001340 	.word	0x20001340
 80068d0:	2000133c 	.word	0x2000133c
 80068d4:	20001344 	.word	0x20001344

080068d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <prvInsertBlockIntoFreeList+0xac>)
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <prvInsertBlockIntoFreeList+0x14>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d8f7      	bhi.n	80068e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d108      	bne.n	800691a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d118      	bne.n	8006960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <prvInsertBlockIntoFreeList+0xb0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d00d      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e008      	b.n	8006968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvInsertBlockIntoFreeList+0xb0>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e003      	b.n	8006968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d002      	beq.n	8006976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20001330 	.word	0x20001330
 8006988:	20001338 	.word	0x20001338

0800698c <__libc_init_array>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4d0d      	ldr	r5, [pc, #52]	; (80069c4 <__libc_init_array+0x38>)
 8006990:	4c0d      	ldr	r4, [pc, #52]	; (80069c8 <__libc_init_array+0x3c>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	2600      	movs	r6, #0
 8006998:	42a6      	cmp	r6, r4
 800699a:	d109      	bne.n	80069b0 <__libc_init_array+0x24>
 800699c:	4d0b      	ldr	r5, [pc, #44]	; (80069cc <__libc_init_array+0x40>)
 800699e:	4c0c      	ldr	r4, [pc, #48]	; (80069d0 <__libc_init_array+0x44>)
 80069a0:	f000 f82e 	bl	8006a00 <_init>
 80069a4:	1b64      	subs	r4, r4, r5
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	2600      	movs	r6, #0
 80069aa:	42a6      	cmp	r6, r4
 80069ac:	d105      	bne.n	80069ba <__libc_init_array+0x2e>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b4:	4798      	blx	r3
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7ee      	b.n	8006998 <__libc_init_array+0xc>
 80069ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80069be:	4798      	blx	r3
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7f2      	b.n	80069aa <__libc_init_array+0x1e>
 80069c4:	08006af0 	.word	0x08006af0
 80069c8:	08006af0 	.word	0x08006af0
 80069cc:	08006af0 	.word	0x08006af0
 80069d0:	08006af4 	.word	0x08006af4

080069d4 <memcpy>:
 80069d4:	440a      	add	r2, r1
 80069d6:	4291      	cmp	r1, r2
 80069d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069dc:	d100      	bne.n	80069e0 <memcpy+0xc>
 80069de:	4770      	bx	lr
 80069e0:	b510      	push	{r4, lr}
 80069e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ea:	4291      	cmp	r1, r2
 80069ec:	d1f9      	bne.n	80069e2 <memcpy+0xe>
 80069ee:	bd10      	pop	{r4, pc}

080069f0 <memset>:
 80069f0:	4402      	add	r2, r0
 80069f2:	4603      	mov	r3, r0
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d100      	bne.n	80069fa <memset+0xa>
 80069f8:	4770      	bx	lr
 80069fa:	f803 1b01 	strb.w	r1, [r3], #1
 80069fe:	e7f9      	b.n	80069f4 <memset+0x4>

08006a00 <_init>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr

08006a0c <_fini>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr
